```json
{
  "exam_name": "Final Exam",
  "problems": [
    {
      "problem": "1 Boolean Logic Circuits",
      "problem_context": "During your job interview, you are asked to design a combinational circuit with a four-bit input, {A, B, C, D} (A is the most significant bit and D is the least significant bit), and two 1-bit outputs, Fib and G3. The value of each output is determined as follows:",
      "problem_figures": ["TABLE"],
      "parts": [
        {
          "part": "a",
          "subproblem": [
            {
              "subproblem_question": "Fill in the missing entries in the truth table below for the combinational circuit you are designing and express the output Fib in the sum of products representation."
            }
          ],
          "answer": [
            {
              "solution": "Fib = (A̅ · B̅ · C̅ · D̅) + (A̅ · B̅ · C̅ · D) + (A̅ · B̅ · C · D̅) + (A̅ · B̅ · C · D) + (A̅ · B · C̅ · D) + (A · B̅ · C̅ · D̅) + (A · B · C̅ · D)"
            }
          ]
        },
        {
          "part": "b",
          "subproblem": [
            {
              "subproblem_question": "Simplify the Fib expression using Boolean minimization rules. Show your work step-by-step."
            }
          ],
          "answer": [
            {
              "solution": "Fib = (A̅ · B̅) + (B · C̅ · D) + (A · B̅ · C̅ · D̅)"
            }
          ]
        },
        {
          "part": "c",
          "subproblem": [
            {
              "subproblem_question": "Find the simplest representation of the G3 output by using only 2-input NAND gates. Show your work step-by-step."
            }
          ],
          "answer": [
            {
              "solution": "G3 = (A̅ · B) + (A · B̅) + (A · B)"
            }
          ]
        }
      ]
    },
    {
      "problem": "2 Finite State Machines",
      "parts": [
        {
          "part": "2.1 Simplifying an FSM",
          "subproblem": [
            {
              "subproblem_question": "Is it possible to simplify this state diagram and reduce the number of states? If so, simplify it to the minimum number of states. Explain each step of your simplification. Draw the simplified state diagram. If not, explain why it is not possible to simplify the state diagram.",
              "subproblem_figures": ["IMAGE"]
            }
          ],
          "answer": [
            {
              "solution": "Yes, it is possible. Below is the state transition table of the given state machine:",
              "solution_figures": ["TABLE", "IMAGE"]
            }
          ]
        },
        {
          "part": "2.2 Designing an FSM",
          "subproblem": [
            {
              "subproblem_question": "Design a Moore finite state machine (FSM), where each output is solely determined by the current state of the machine and not directly influenced by the inputs. The state machine should have one input and one output. This FSM's goal is to detect a stable transition in the input signal from repeated logic-0 to repeated logic-1. The output should be logic-1 only when the input sequence of \"0-0-1-1\" is observed. The output should be zero in all other cases. When the circuit is reset, your state machine should assume that the input signal has been high (logic-1) for a long time. Draw the state diagram and explain why it works. Your state machine should use as few states as possible and each state should have a precise definition and output.",
              "subproblem_figures": ["IMAGE"]
            }
          ],
          "answer": [
            {
              "solution": "We need to keep track of the bit values in the last four bits. This requires 16 states. However, many of these states behave the same. We can reduce the number of states down to five."
            }
          ]
        }
      ]
    },
    {
      "problem": "3 ISA vs. Microarchitecture",
      "parts": [
        {
          "part": "1",
          "subproblem": [
            {
              "subproblem_question": "Width of the immediate value in an ADD instruction."
            }
          ],
          "answer": [
            {
              "solution": "ISA"
            }
          ]
        },
        {
          "part": "2",
          "subproblem": [
            {
              "subproblem_question": "The algorithm used by the ALU to perform multiplication."
            }
          ],
          "answer": [
            {
              "solution": "Microarchitecture"
            }
          ]
        },
        {
          "part": "3",
          "subproblem": [
            {
              "subproblem_question": "Number of bits required for indexing the source register of a store instruction."
            }
          ],
          "answer": [
            {
              "solution": "ISA"
            }
          ]
        },
        {
          "part": "4",
          "subproblem": [
            {
              "subproblem_question": "Number of entries in the L3 cache."
            }
          ],
          "answer": [
            {
              "solution": "Microarchitecture"
            }
          ]
        },
        {
          "part": "5",
          "subproblem": [
            {
              "subproblem_question": "The data cache organization (e.g., direct-mapped, set-associative)."
            }
          ],
          "answer": [
            {
              "solution": "Microarchitecture"
            }
          ]
        },
        {
          "part": "6",
          "subproblem": [
            {
              "subproblem_question": "Support for conveying prefetching hints to the hardware via the compiler."
            }
          ],
          "answer": [
            {
              "solution": "ISA"
            }
          ]
        },
        {
          "part": "7",
          "subproblem": [
            {
              "subproblem_question": "Available data types (e.g., integer) for arithmetic and logic operations."
            }
          ],
          "answer": [
            {
              "solution": "ISA"
            }
          ]
        },
        {
          "part": "8",
          "subproblem": [
            {
              "subproblem_question": "Cache coherence protocol in multi-core processors."
            }
          ],
          "answer": [
            {
              "solution": "Microarchitecture"
            }
          ]
        },
        {
          "part": "9",
          "subproblem": [
            {
              "subproblem_question": "Width of the data bus between the processor and main memory."
            }
          ],
          "answer": [
            {
              "solution": "Microarchitecture"
            }
          ]
        },
        {
          "part": "10",
          "subproblem": [
            {
              "subproblem_question": "The memory controller's memory request scheduling algorithm."
            }
          ],
          "answer": [
            {
              "solution": "Microarchitecture"
            }
          ]
        },
        {
          "part": "11",
          "subproblem": [
            {
              "subproblem_question": "Instruction encoding for control flow and branch instructions."
            }
          ],
          "answer": [
            {
              "solution": "ISA"
            }
          ]
        },
        {
          "part": "12",
          "subproblem": [
            {
              "subproblem_question": "The design of the register renaming logic."
            }
          ],
          "answer": [
            {
              "solution": "Microarchitecture"
            }
          ]
        },
        {
          "part": "13",
          "subproblem": [
            {
              "subproblem_question": "Number of instructions decoded per cycle in a superscalar processor."
            }
          ],
          "answer": [
            {
              "solution": "Microarchitecture"
            }
          ]
        },
        {
          "part": "14",
          "subproblem": [
            {
              "subproblem_question": "L2 cache miss latency."
            }
          ],
          "answer": [
            {
              "solution": "Microarchitecture"
            }
          ]
        },
        {
          "part": "15",
          "subproblem": [
            {
              "subproblem_question": "Width of the program counter."
            }
          ],
          "answer": [
            {
              "solution": "ISA"
            }
          ]
        }
      ]
    },
    {
      "problem": "4 Verilog",
      "parts": [
        {
          "part": "4.1 What Does This Code Do?",
          "subproblem": [
            {
              "subproblem_question": "Analyze the following Verilog module and answer the question.",
              "subproblem_figures": ["IMAGE"]
            }
          ],
          "answer": [
            {
              "solution": "The module outputs the inth number in the Fibonacci sequence after in clock cycles. Until then, it outputs the number of clock cycles that have passed since reset. For the given value of in (8'h09), the values for out are from leftmost yellow box to the rightmost yellow box: 0, 1, 2, 3, 4, 5, 6, 7, 8, 55"
            }
          ]
        },
        {
          "part": "4.2 Is ChatGPT not Right?",
          "subproblem": [
            {
              "subproblem_question": "You gave ChatGPT the following prompt to help with your lab report: \"A Verilog module that simulates a character's movement on a 2D-plane. The module takes four inputs for four directions (direction inputs) the character can move to. The module outputs x and y coordinates. The character stays in the same coordinate if none of the direction inputs are set. Initial coordinates (set on reset) are 0,0 . Stride determines how many units the character moves in one step.\"",
              "subproblem_figures": ["IMAGE"]
            }
          ],
          "answer": [
            {
              "solution": "(1): C. input wire [2:0]\n(2): D. reg [7:0]\n(3): stride != 3'b0 ? stride : 3'b1;\n(4): B. assign\nExplanation. Line 18 introduces a logical error, causing x_internal to always be incremented by move_amount regardless of the direction of movement."
            }
          ]
        }
      ]
    },
    {
      "problem": "5 Memory Potpourri",
      "parts": [
        {
          "part": "1",
          "subproblem": [
            {
              "subproblem_question": "A main memory access typically has larger latency than a register file access."
            }
          ],
          "answer": [
            {
              "solution": "True"
            }
          ]
        },
        {
          "part": "2",
          "subproblem": [
            {
              "subproblem_question": "SRAM is commonly used as main memory in modern computers."
            }
          ],
          "answer": [
            {
              "solution": "False"
            }
          ]
        },
        {
          "part": "3",
          "subproblem": [
            {
              "subproblem_question": "A DRAM cell requires larger power to store data compared to an SRAM cell."
            }
          ],
          "answer": [
            {
              "solution": "False"
            }
          ]
        },
        {
          "part": "4",
          "subproblem": [
            {
              "subproblem_question": "Reads are faster than writes in DRAM."
            }
          ],
          "answer": [
            {
              "solution": "False"
            }
          ]
        },
        {
          "part": "5",
          "subproblem": [
            {
              "subproblem_question": "Reads are faster than writes in phase change memory."
            }
          ],
          "answer": [
            {
              "solution": "False"
            }
          ]
        },
        {
          "part": "6",
          "subproblem": [
            {
              "subproblem_question": "A bitline in a DRAM array connects all DRAM cells in a DRAM row to the row decoder circuitry."
            }
          ],
          "answer": [
            {
              "solution": "True"
            }
          ]
        },
        {
          "part": "7",
          "subproblem": [
            {
              "subproblem_question": "Using virtual memory reduces the memory access latency."
            }
          ],
          "answer": [
            {
              "solution": "False"
            }
          ]
        },
        {
          "part": "8",
          "subproblem": [
            {
              "subproblem_question": "Phase Change Memory (PCM) is non-volatile."
            }
          ],
          "answer": [
            {
              "solution": "True"
            }
          ]
        },
        {
          "part": "9",
          "subproblem": [
            {
              "subproblem_question": "If a hypothetical system is not constrained by chip area, memory cost (\$), and energy consumption, PCM would be the best memory technology to use in that system."
            }
          ],
          "answer": [
            {
              "solution": "True"
            }
          ]
        },
        {
          "part": "10",
          "subproblem": [
            {
              "subproblem_question": "A program with a streaming memory access pattern leads to very high temporal locality in the last level data cache."
            }
          ],
          "answer": [
            {
              "solution": "False"
            }
          ]
        },
        {
          "part": "11",
          "subproblem": [
            {
              "subproblem_question": "In DRAM, accesses to different rows in one bank can be serviced faster compared to accesses to different rows in different banks."
            }
          ],
          "answer": [
            {
              "solution": "False"
            }
          ]
        },
        {
          "part": "12",
          "subproblem": [
            {
              "subproblem_question": "TLB is a specialized instruction cache that caches instructions based on branch prediction results."
            }
          ],
          "answer": [
            {
              "solution": "False"
            }
          ]
        },
        {
          "part": "13",
          "subproblem": [
            {
              "subproblem_question": "Virtual memory simplifies software design."
            }
          ],
          "answer": [
            {
              "solution": "True"
            }
          ]
        },
        {
          "part": "14",
          "subproblem": [
            {
              "subproblem_question": "A page fault happens when the TLB does not contain the entry needed by an instruction."
            }
          ],
          "answer": [
            {
              "solution": "False"
            }
          ]
        },
        {
          "part": "15",
          "subproblem": [
            {
              "subproblem_question": "A fully-associative L1 TLB that only stores 4 KB virtual-to-physical mappings and has 1024 entries can cover up to 4 MB of memory."
            }
          ],
          "answer": [
            {
              "solution": "False"
            }
          ]
        }
      ]
    },
    {
      "problem": "6 Performance Evaluation",
      "parts": [
        {
          "part": "a",
          "subproblem": [
            {
              "subproblem_question": "What is the CPI (cycles per instruction) of application A when executing on processor P1? Show your work."
            }
          ],
          "answer": [
            {
              "solution": "CPI = 0.4 * 6 + 0.2 * 6 + 0.3 * 2 + 0.1 * 2 = 4.4"
            }
          ]
        },
        {
          "part": "b",
          "subproblem": [
            {
              "subproblem_question": "A new design of the processor doubles the clock frequency of P1. However, the latencies of all instructions increase by 4 cycles. We call this new processor P2. The compiler used to generate instructions for P2 is the same as for P1. Thus, it produces the same number of instructions for program A. What is the CPI of application A when executing on processor P2? Show your work."
            }
          ],
          "answer": [
            {
              "solution": "CPI = 0.4 * 10 + 0.2 * 10 + 0.3 * 6 + 0.1 * 6 = 8.4"
            }
          ]
        },
        {
          "part": "c",
          "subproblem": [
            {
              "subproblem_question": "Which processor is faster (P1 or P2)? By how much (i.e., what is the speedup)? Show your work."
            }
          ],
          "answer": [
            {
              "solution": "P2 is 1.05 times faster than P1."
            }
          ]
        },
        {
          "part": "d",
          "subproblem": [
            {
              "subproblem_question": "You want to improve the original P1 design by including one new optimization without changing the clock frequency. You can choose only one of the following options: (1) ALU: An optimized ALU, which halves the latency of both arithmetic and branch instructions. (2) LSU: An asymmetric load-store unit, which halves the latency of load operations but doubles the latency of store operations. Which optimization do you add to P1 for application A? Show your work and justify your choice."
            }
          ],
          "answer": [
            {
              "solution": "The ALU optimization."
            }
          ]
        }
      ]
    },
    {
      "problem": "7 Pipelining",
      "parts": [
        {
          "part": "a",
          "subproblem": [
            {
              "subproblem_question": "List the data forwarding paths between pipeline stages.",
              "subproblem_figures": ["TABLE"]
            }
          ],
          "answer": [
            {
              "solution": "The result of E3 stage is forwarded to E1 stage (e.g., R1's value at clock cycle 6 and R4's value at clock cycle 11). The result of M stage is forwarded to E1 stage (e.g., R1's value at clock cycle 7). The result of E3 stage is forwarded to the condition registers (e.g., SUBI and JNZ at clock cycle 15). There is no other information for any other data forwarding. Therefore, other data forwardings are unknown."
            }
          ]
        },
        {
          "part": "b",
          "subproblem": [
            {
              "subproblem_question": "Does this machine use hardware interlocking or software interlocking? Explain."
            }
          ],
          "answer": [
            {
              "solution": "Hardware interlocking. It detects data dependencies and stalls the pipeline accordingly without needing any software-induced NOPs."
            }
          ]
        },
        {
          "part": "c",
          "subproblem": [
            {
              "subproblem_question": "Calculate the value of T (the clock cycle of the given snapshot). Show your work."
            }
          ],
          "answer": [
            {
              "solution": "T = 82"
            }
          ]
        },
        {
          "part": "d",
          "subproblem": [
            {
              "subproblem_question": "Calculate the value of N (the total number of dynamic instructions fetched by the clock cycle T). Show your work."
            }
          ],
          "answer": [
            {
              "solution": "N = 51"
            }
          ]
        },
        {
          "part": "e",
          "subproblem": [
            {
              "subproblem_question": "Calculate the total execution time of the assembly code in Code Listing 1 until the completion in terms of the number of clock cycles. Show your work."
            }
          ],
          "answer": [
            {
              "solution": "100 cycles."
            }
          ]
        }
      ]
    },
    {
      "problem": "8 Vector Processing",
      "parts": [
        {
          "part": "a",
          "subproblem": [
            {
              "subproblem_question": "What should the minimum number of banks (N) be to avoid stalls while executing a VLD or VST instruction? Calculate the minimum number of banks for every stride from 1 to 10. Explain."
            }
          ],
          "answer": [
            {
              "solution": "101 banks for even strides, 100 banks for odd strides."
            }
          ]
        },
        {
          "part": "b",
          "subproblem": [
            {
              "subproblem_question": "Translate the following loop into assembly code that can be executed in the least possible number of cycles in the previously described vector machine:",
              "subproblem_figures": ["TABLE"]
            }
          ],
          "answer": [
            {
              "solution": "SET Vst, 1\nSET Vln, 46\nVLD V1, a\nVLD V2, b\nVCMPZ V3, V1\nLDM V3\nVST c, V2\nVNOT V3\nLDM V3\nVSHFR V4, V1\nVMUL V5, V1, V2\nVADD V6, V5, V4\nVST c, V6"
            }
          ]
        },
        {
          "part": "c",
          "subproblem": [
            {
              "subproblem_question": "What is the number of cycles the previous code takes to execute in the vector processor described in this question? Assume: Vectors a and b are in different rows. A machine that has a memory with 8 banks. The rest of the machine is the same as in part (a)."
            }
          ],
          "answer": [
            {
              "solution": "1822 cycles."
            }
          ]
        }
      ]
    },
    {
      "problem": "9 VLIW",
      "parts": [
        {
          "part": "a",
          "subproblem": [
            {
              "subproblem_question": "Your goal in this question is to statically schedule the instructions in Figure 1 to the VLIW processor specified above. Table 2 (on the next page) represents the occupancy of each functional unit during the execution of the assembly code in Figure 1. For the assembly code given in Figure 1, fill in Table 2 with the appropriate VLIW instructions. In your solution, minimize the number of VLIW instructions, and ensure that each instruction is scheduled to execute as soon as possible. Table 2 should only contain assembly operations supported by the VLIW processor, as described in Table 1.",
              "subproblem_figures": ["TABLE"]
            }
          ],
          "answer": [
            {
              "solution": "1 LOOP: load_inc r2, [r31, r0, 00] | load r3, [r29, r1, 00] | load r4, [r30, r1, 00] | NOP | NOP | NOP | NOP\n2 | NOP | NOP | NOP | NOP | mult r5, r2, r3 | NOP | NOP\n3 | NOP | NOP | NOP | NOP | NOP | add r6, r5, r4 | NOP\n4 | NOP | NOP | NOP | store_inc [r31, r1, 00], r6 | NOP | NOP | NOP\n5 | NOP | NOP | NOP | NOP | NOP | NOP | bne r1, 0N, LOOP"
            }
          ]
        },
        {
          "part": "b",
          "subproblem": [
            {
              "subproblem_question": "What is the ratio between the number of useful operations and the number of VLIW instructions in your code? A useful operation refers to any assembly operation that is not a NOP."
            }
          ],
          "answer": [
            {
              "solution": "7/5 useful operations per VLIW instruction."
            }
          ]
        },
        {
          "part": "c",
          "subproblem": [
            {
              "subproblem_question": "What is the execution time (in cycles) of the VLIW processor when executing the sequence of instructions in Table 2, as a function of the loop counter N? Show your work."
            }
          ],
          "answer": [
            {
              "solution": "Execution time = 5 * N."
            }
          ]
        }
      ]
    },
    {
      "problem": "10 Cache",
      "parts": [
        {
          "part": "a",
          "subproblem": [
            {
              "subproblem_question": "What are the addresses of the next two cache blocks that should be accessed to successfully reverse-engineer the number of sets and ways in the L1 data cache? There may be multiple solutions; please give the lowest possible addresses that can enable the identification of the number of sets and ways. Please explain every step in detail to get full points.",
              "subproblem_figures": ["TABLE"]
            }
          ],
          "answer": [
            {
              "solution": "0 -> 2"
            }
          ]
        },
        {
          "part": "b",
          "subproblem": [
            {
              "subproblem_question": "What is the number of sets and ways if the cache hit rate observed over the two extra addresses accessed in Part (1) were:",
              "subproblem_figures": ["TABLE"]
            }
          ],
          "answer": [
            {
              "solution": "100% hit rate: 1 set, 4 ways\n50% hit rate: 4 sets, 1 way\n0% hit rate: 2 sets, 2 ways"
            }
          ]
        },
        {
          "part": "c",
          "subproblem": [
            {
              "subproblem_question": "Is it possible to reverse-engineer the number of sets and ways of the cache using two accesses (after the application's first three accesses) if the Most Recently Used (MRU) block is replaced first? Explain your reasoning."
            }
          ],
          "answer": [
            {
              "solution": "No. There is no solution for just two more accesses because with an MRU policy, no permutation of two more accesses is able to assign a unique L1 hit rate to each of the three cache configurations."
            }
          ]
        }
      ]
    },
    {
      "problem": "11 BONUS: Systolic Arrays",
      "parts": [
        {
          "part": "a",
          "subproblem": [
            {
              "subproblem_question": "Fill in the blanks only with relevant information. Input cells left blank are interpreted as 0.",
              "subproblem_figures": ["TABLE"]
            }
          ],
          "answer": [
            {
              "solution": "cycle | H0 | H1 | V0 | V1 | PE00 | PE01 | PE10 | PE11\n0 | A00 |  | B00 |  |  |  |  | \n1 | A01 | A10 | B10 | B01 |  |  |  | \n2 |  | A11 |  | B11 | C00 |  |  | \n3 |  |  |  |  |  | C01 | C10 | \n4 |  |  |  |  |  |  |  | C11"
            }
          ]
        },
        {
          "part": "b",
          "subproblem": [
            {
              "subproblem_question": "Suppose that the same systolic array from Figure 2 is used to compute the multiplication of two 4x4 matrices. How many cycles does it take to perform the multiplication? Assume that the register in a PE resets to 0 immediately after an output is generated, i.e., PEs can start accumulating for the next output element in the next cycle without waiting for an extra cycle to reset the register to 0. Show your work."
            }
          ],
          "answer": [
            {
              "solution": "19 cycles."
            }
          ]
        }
      ]
    },
    {
      "problem": "12 BONUS: Prefetching",
      "parts": [
        {
          "part": "a",
          "subproblem": [
            {
              "subproblem_question": "Determine what type of prefetching mechanism is used by M1 and M2. Show your work. Answers without explanation will not be rewarded.",
              "subproblem_figures": ["TABLE"]
            }
          ],
          "answer": [
            {
              "solution": "Machine M1: 4th-next-line prefetcher\nMachine M2: Stride prefetcher"
            }
          ]
        }
      ]
    }
  ]
}
```