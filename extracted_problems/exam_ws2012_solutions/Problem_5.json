{
  "exam_name": "Computer Architecture Exam.pdf",
  "problem": "5",
  "problem_context": "In this section, you will be given a task and two code snippets in MIPS assembly language. You will have to decide which of the code snippets can be used for the task. For all the questions assume the following initial values:\n\nRegisters:\n\nRegister Value\n\n$s0 0x0000 00FF\n$s1 0x0000 0004\n$s2 0x0000 0008\n$s3 0x0000 000C\n\nMemory:\n\nAddress Value\n\n0x0000 00000 0x0000 FF00\n0x0000 00004 0x0000 00FF\n0x0000 00008 0xFFFF FFF7\n0x0000 0000C 0x1234 5678",
  "problem_figures": [],
  "parts": [
    {
      "part": "a",
      "subproblem": [
        {
          "subproblem_question": "Set the content of the register $t1 to 0x0000 1234\n\n(A)\n\nlw $t1, 0xC($0)\nsrl $t1, $t1, 16\n\n(B)\n\nxor $t1, $t1, $t1\nori $t1, 0x1234\n\n□ none □ A □ B □ Both A and B",
          "subproblem_figures": []
        }
      ],
      "answer": [
        {
          "solution": "",
          "solution_figures": []
        }
      ]
    },
    {
      "part": "b",
      "subproblem": [
        {
          "subproblem_question": "Starting from the address 0x0000 4000 write all zeroes to 1024 consecutive memory locations (until 0x0000 5000)\n\n(A)\n\naddi $s0, $s0, 0x1000\nLOOP: sw $0, 0x4000($s0)\naddi $s0, $s0, -1\nbne $s0, $0, LOOP\n\n(B)\n\naddi $s0, $s0, 0x4000\naddi $s1, $s0, 0x1000\naddi $s2, $0, 1\n\nLOOP: sw $0, $s0\nsub $s1, $s1, $s2\nbne $s0, $s1, LOOP\n\n□ none □ A □ B □ Both A and B",
          "subproblem_figures": []
        }
      ],
      "answer": [
        {
          "solution": "B is incorrect since the assignment is on $s0 which constant at 0x4000. If that line were to read:\n\nLOOP: sw $0, $s1\n\nit would be correct.",
          "solution_figures": []
        }
      ]
    },
    {
      "part": "c",
      "subproblem": [
        {
          "subproblem_question": "Add all the numbers from 0 to 255\n\n(A)\n\nlw $s1, $s0\nxor $s0, $s0, $s0\n\nLOOP: add $s0, $s0, $s1\naddi $s1, $s1, -1\nbne $s1, $0, LOOP\n\n(B)\n\naddi $s1, $0, 255\nlw $s0, $0\n\nLOOP: addi $s1, $s1, -1\nbeq $s1, $0, DONE\njmp LOOP\n\nDONE:\n\n□ none □ A □ B □ Both A and B",
          "subproblem_figures": []
        }
      ],
      "answer": [
        {
          "solution": "B is incorrect since there is no addition of numbers anywhere. The loop is correct though",
          "solution_figures": []
        }
      ]
    },
    {
      "part": "d",
      "subproblem": [
        {
          "subproblem_question": "Jump to subroutine STOP if only the 4th bit from the right (representing 2^3) of the data written at address 0x0000 0020 is 1. Otherwise continue with the program at CONT.\n\n(A)\n\nlw $s0, 0x20($0)\nsrl $s0, $s0, 3\naddi $s1, $0, 1\nbeq $s0, $s1, CONT\njmp STOP\n\nCONT: ...\nSTOP: ...\n\n(B)\n\naddi $s0, $0, 0x20\nlw $s1, $s0\nlw $s2, 0x8($0)\nand $s3, $s1, $s2\nbne $s3, $0, CONT\njal STOP\n\nCONT: ...\nSTOP: ...\n\n□ none □ A □ B □ Both A and B",
          "subproblem_figures": []
        }
      ],
      "answer": [
        {
          "solution": "A looks ok, but it would also work if other bits (higher than 4) are one as well, the jump is not to a subroutine, and the condition is inverse",
          "solution_figures": []
        }
      ]
    },
    {
      "part": "e",
      "subproblem": [
        {
          "subproblem_question": "Save the two registers $s0 and $s1 to the stack\n\n(A)\n\njal SAVE\n...\n\nSAVE: sw $sp, $s0\nsw $sp, $s1\njr $ra\n\n(B)\n\naddi $sp, $sp, -8\nsw $s0, 8($sp)\nsw $s1, 4($sp)\n\n□ none □ A □ B □ Both A and B",
          "subproblem_figures": []
        }
      ],
      "answer": [
        {
          "solution": "A is incorrect since both values overwrite the last value in the stack.",
          "solution_figures": []
        }
      ]
    }
  ]
}