[
    {
        "question_id": "exam_ss2013_solutions/Problem_1/(a)",
        "context": "\n",
        "context_figures": [],
        "question": "You receive the following 12-bit binary sequence:\n\n0000 0111 1100\n\nWhich decimal numbers are encoded in this sequence, if you were told that the sequence contained:\n\nTwo 6-bit numbers using two's complement: 1,\u22124\n\nA single 12-bit unsigned number: 124\n\nThree 4-bit numbers using sign/magnitude: 0, 7,\u22124",
        "solution": "Solution:\n\n1. Zero is represented only once\n\n2. Standard binary addition works with two's complement numbers without additional effort\n\n3. Associativity law holds",
        "solution_figures": [],
        "passed_llm_verification": false,
        "reasoning": "The solution text does not match the original PDF. The solution text provided is actually for problem 1(b), not 1(a). The solution for 1(a) should contain the actual decimal numbers encoded in the binary sequence for each representation method.",
        "passed_human_verification": false
    },
    {
        "question_id": "exam_ss2013_solutions/Problem_1/(b)",
        "context": "\n",
        "context_figures": [],
        "question": "In the lecture, it was explained that the two's complement was the better alternative to represent negative numbers. Name two main advantages of the two's complement representation over a sign/magnitude representation:",
        "solution": "",
        "solution_figures": [],
        "passed_llm_verification": false,
        "reasoning": "The solution field is empty, but the original PDF contains a solution for this problem (the three advantages of two's complement representation). The solution that was incorrectly placed in problem 1(a) actually belongs here.",
        "passed_human_verification": false
    },
    {
        "question_id": "exam_ss2013_solutions/Problem_2/a",
        "context": "The following Verilog code defines a combinational circuit. We are interested in finding out the timing properties of this circuit.\n\n\n1 module gandalf ( input [3:0] a, input e, output z);\n2\n\n3 wire b,c,d;\n4 reg f;\n5\n\n6 assign d = \u02dc(a[3] & (a[2] | b));\n7\n\n8 always @ (*)\n9 f <= a[3] & b;\n\n\n10\n\n11 assign z = (\u02dce) ? d : f;\n12 assign b = a[0] & a[1];\n13\n\n14 endmodule\n\n\nThe circuit is implemented using only the following basic logic building blocks: 2-input AND, 2-input OR, 2:1 Multiplexer, Inverter. The delay from any input to the output for each basic building block is given in the table below:\n\n\nDescription Delay [ps]\n\n\n2-input AND gate 100\n2-input OR gate 120\nInverter 50\n2:1 Multiplexer 180\n",
        "context_figures": [],
        "question": "Draw a gate-level circuit diagram of the circuit using only the following basic logic gates: 2-input AND, 2-input OR, 2:1 Multiplexer, Inverter. Note: there is no need for optimizations.",
        "solution": "Solution:",
        "solution_figures": [
            "chart_p5_0.png"
        ],
        "passed_llm_verification": false,
        "reasoning": "The solution figure 'chart_p5_0.png' contains both the solution to part (a) as well as the propagation and contamination delay paths that are part of the solutions to parts (b) and (c). This reveals parts of the solutions to questions (b) and (c) in the solution figure for question (a).",
        "passed_human_verification": false
    },
    {
        "question_id": "exam_ss2013_solutions/Problem_2/b",
        "context": "The following Verilog code defines a combinational circuit. We are interested in finding out the timing properties of this circuit.\n\n\n1 module gandalf ( input [3:0] a, input e, output z);\n2\n\n3 wire b,c,d;\n4 reg f;\n5\n\n6 assign d = \u02dc(a[3] & (a[2] | b));\n7\n\n8 always @ (*)\n9 f <= a[3] & b;\n\n\n10\n\n11 assign z = (\u02dce) ? d : f;\n12 assign b = a[0] & a[1];\n13\n\n14 endmodule\n\n\nThe circuit is implemented using only the following basic logic building blocks: 2-input AND, 2-input OR, 2:1 Multiplexer, Inverter. The delay from any input to the output for each basic building block is given in the table below:\n\n\nDescription Delay [ps]\n\n\n2-input AND gate 100\n2-input OR gate 120\nInverter 50\n2:1 Multiplexer 180\n",
        "context_figures": [],
        "question": "Determine the propagation delay of the circuit. Draw it on your schematic, and calculate the propagation delay using the delay values from the table.",
        "solution": "Solution:\n\ntpd = tpd,AND + tpd,OR + tpd,AND + tpd,INV + tpd,MUX\n\n= 100 ps + 120 ps + 100 ps + 50 ps + 180 ps\n\n= 550 ps",
        "solution_figures": [],
        "passed_llm_verification": false,
        "reasoning": "The solution requires drawing the propagation delay on a schematic, but there is no solution figure included. The schematic with the propagation delay path is shown in the image 'chart_p5_0.png' which is incorrectly only associated with question (a).",
        "passed_human_verification": false
    },
    {
        "question_id": "exam_ss2013_solutions/Problem_2/c",
        "context": "The following Verilog code defines a combinational circuit. We are interested in finding out the timing properties of this circuit.\n\n\n1 module gandalf ( input [3:0] a, input e, output z);\n2\n\n3 wire b,c,d;\n4 reg f;\n5\n\n6 assign d = \u02dc(a[3] & (a[2] | b));\n7\n\n8 always @ (*)\n9 f <= a[3] & b;\n\n\n10\n\n11 assign z = (\u02dce) ? d : f;\n12 assign b = a[0] & a[1];\n13\n\n14 endmodule\n\n\nThe circuit is implemented using only the following basic logic building blocks: 2-input AND, 2-input OR, 2:1 Multiplexer, Inverter. The delay from any input to the output for each basic building block is given in the table below:\n\n\nDescription Delay [ps]\n\n\n2-input AND gate 100\n2-input OR gate 120\nInverter 50\n2:1 Multiplexer 180\n",
        "context_figures": [],
        "question": "Determine the contamination delay of the circuit. Draw it on your schematic, and calculate the contamination delay using the delay values from the table.",
        "solution": "Solution:\n\ntpd = tpd,INV + tpd,MUX\n\n= 50 ps + 180 ps\n\n= 230 ps",
        "solution_figures": [],
        "passed_llm_verification": false,
        "reasoning": "The solution requires drawing the contamination delay on a schematic, but there is no solution figure included. The schematic with the contamination delay path is shown in the image 'chart_p5_0.png' which is incorrectly only associated with question (a).",
        "passed_human_verification": false
    },
    {
        "question_id": "exam_ss2013_solutions/Problem_3/a",
        "context": "The following Verilog code defines a Finite State Machine (FSM).\n\n\n1 module fsm ( input a , input b , output [1:0] z,\n2 input clk, input reset);\n3\n\n4 reg [2:0] state, nextstate;\n5\n\n6 parameter INIT = 3'b000;\n7 parameter DECODE = 3'b001;\n8 parameter LOOP = 3'b100;\n9 parameter JUMP = 3'b111;\n\n\n10 parameter NEXT = 3'b010;\n11 // DEF1 = 3'b011;\n12 // DEF2 = 3'b101;\n13 // DEF3 = 3'b110;\n14\n\n15 // next state calculation\n16 always @( * )\n17 case (state)\n18 INIT: if ((a==1'b0) & (b==1'b0) ) nextstate = DECODE;\n19 else nextstate = INIT;\n20 DECODE: if (a) nextstate = NEXT;\n21 else nextstate = LOOP;\n22 LOOP: nextstate = JUMP;\n23 JUMP: if (b) nextstate = INIT;\n24 else nextstate = DECODE;\n25 NEXT: nextstate = INIT;\n26 default: nextstate = INIT;\n27 endcase\n28\n\n29 // state register\n30 always @ (posedge clk, negedge reset)\n31 if (reset == 1'b0) state <= INIT;\n32 else state <= nextstate;\n33\n\n34 // output logic\n35 assign z = state[1:0];\n36\n\n37 endmodule\n",
        "context_figures": [],
        "question": "Is this a Moore or a Mealy FSM? Briefly explain.",
        "solution": "Moore, outputs depend only on the present state and nothing else.",
        "solution_figures": [],
        "passed_llm_verification": true,
        "passed_human_verification": true
    },
    {
        "question_id": "exam_ss2013_solutions/Problem_3/b",
        "context": "The following Verilog code defines a Finite State Machine (FSM).\n\n\n1 module fsm ( input a , input b , output [1:0] z,\n2 input clk, input reset);\n3\n\n4 reg [2:0] state, nextstate;\n5\n\n6 parameter INIT = 3'b000;\n7 parameter DECODE = 3'b001;\n8 parameter LOOP = 3'b100;\n9 parameter JUMP = 3'b111;\n\n\n10 parameter NEXT = 3'b010;\n11 // DEF1 = 3'b011;\n12 // DEF2 = 3'b101;\n13 // DEF3 = 3'b110;\n14\n\n15 // next state calculation\n16 always @( * )\n17 case (state)\n18 INIT: if ((a==1'b0) & (b==1'b0) ) nextstate = DECODE;\n19 else nextstate = INIT;\n20 DECODE: if (a) nextstate = NEXT;\n21 else nextstate = LOOP;\n22 LOOP: nextstate = JUMP;\n23 JUMP: if (b) nextstate = INIT;\n24 else nextstate = DECODE;\n25 NEXT: nextstate = INIT;\n26 default: nextstate = INIT;\n27 endcase\n28\n\n29 // state register\n30 always @ (posedge clk, negedge reset)\n31 if (reset == 1'b0) state <= INIT;\n32 else state <= nextstate;\n33\n\n34 // output logic\n35 assign z = state[1:0];\n36\n\n37 endmodule\n",
        "context_figures": [],
        "question": "Draw the State Transition Diagram corresponding to the Verilog code given above.",
        "solution": "INIT\n\nz=00\n\nDECODE\n\nz=01\n\nLOOP\n\nz=00\n\nJUMP\n\nz=11\n\nNEXT\n\nz=10\n\na=0&b=0\n\na=0\n\na=1\n\nb=0\n\nb=1\n\na=1|b=1\n\nreset",
        "solution_figures": [
            "chart_p6_0.png"
        ],
        "passed_llm_verification": false,
        "reasoning": "The solution figure 'chart_p6_0.png' is referenced but I cannot verify its contents since the actual image is not provided in a viewable format. Without being able to confirm that the image correctly represents the state transition diagram, I cannot mark this as correctly parsed.",
        "passed_human_verification": false
    },
    {
        "question_id": "exam_ss2013_solutions/Problem_3/c",
        "context": "The following Verilog code defines a Finite State Machine (FSM).\n\n\n1 module fsm ( input a , input b , output [1:0] z,\n2 input clk, input reset);\n3\n\n4 reg [2:0] state, nextstate;\n5\n\n6 parameter INIT = 3'b000;\n7 parameter DECODE = 3'b001;\n8 parameter LOOP = 3'b100;\n9 parameter JUMP = 3'b111;\n\n\n10 parameter NEXT = 3'b010;\n11 // DEF1 = 3'b011;\n12 // DEF2 = 3'b101;\n13 // DEF3 = 3'b110;\n14\n\n15 // next state calculation\n16 always @( * )\n17 case (state)\n18 INIT: if ((a==1'b0) & (b==1'b0) ) nextstate = DECODE;\n19 else nextstate = INIT;\n20 DECODE: if (a) nextstate = NEXT;\n21 else nextstate = LOOP;\n22 LOOP: nextstate = JUMP;\n23 JUMP: if (b) nextstate = INIT;\n24 else nextstate = DECODE;\n25 NEXT: nextstate = INIT;\n26 default: nextstate = INIT;\n27 endcase\n28\n\n29 // state register\n30 always @ (posedge clk, negedge reset)\n31 if (reset == 1'b0) state <= INIT;\n32 else state <= nextstate;\n33\n\n34 // output logic\n35 assign z = state[1:0];\n36\n\n37 endmodule\n",
        "context_figures": [],
        "question": "Complete the following state transition table for the FSM described by the Verilog code. To make writing easier, denote the state bits by S2, S1, S0 and the nextstate bits by N2, N1, N0. Note that the default behavior for the nextstate is to move to the INIT state. Since only five states have been defined, there are three additional states which we named DEF1, DEF2, DEF3. As an example, entries for these three default states and the NEXT state have been entered.",
        "solution": "State Inputs Next State\n\nname S2 S1 S0 A B name N2 N1 N0\n\nINIT 0 0 0 0 0 DECODE 0 0 1\n\nINIT 0 0 0 0 1 INIT 0 0 0\n\nINIT 0 0 0 1 0 INIT 0 0 0\n\nINIT 0 0 0 1 1 INIT 0 0 0\n\nDECODE 0 0 1 0 X LOOP 1 0 0\n\nDECODE 0 0 1 1 X NEXT 0 1 0\n\nLOOP 1 0 0 X X JUMP 1 1 1\n\nJUMP 1 1 1 X 0 DECODE 0 0 1\n\nJUMP 1 1 1 X 1 INIT 0 0 0\n\nNEXT 0 1 0 X X INIT 0 0 0\n\nDEF1 0 1 1 X X INIT 0 0 0\n\nDEF2 1 0 1 X X INIT 0 0 0\n\nDEF3 1 1 0 X X INIT 0 0 0\n\nNote that there are different ways of writing this table to represent the same result.",
        "solution_figures": [
            "chart_p8_0.png"
        ],
        "passed_llm_verification": false,
        "reasoning": "The solution figure 'chart_p8_0.png' is referenced but I cannot verify its contents since the actual image is not provided in a viewable format. Without being able to confirm that the image correctly represents the state transition table, I cannot mark this as correctly parsed.",
        "passed_human_verification": false
    },
    {
        "question_id": "exam_ss2013_solutions/Problem_3/d",
        "context": "The following Verilog code defines a Finite State Machine (FSM).\n\n\n1 module fsm ( input a , input b , output [1:0] z,\n2 input clk, input reset);\n3\n\n4 reg [2:0] state, nextstate;\n5\n\n6 parameter INIT = 3'b000;\n7 parameter DECODE = 3'b001;\n8 parameter LOOP = 3'b100;\n9 parameter JUMP = 3'b111;\n\n\n10 parameter NEXT = 3'b010;\n11 // DEF1 = 3'b011;\n12 // DEF2 = 3'b101;\n13 // DEF3 = 3'b110;\n14\n\n15 // next state calculation\n16 always @( * )\n17 case (state)\n18 INIT: if ((a==1'b0) & (b==1'b0) ) nextstate = DECODE;\n19 else nextstate = INIT;\n20 DECODE: if (a) nextstate = NEXT;\n21 else nextstate = LOOP;\n22 LOOP: nextstate = JUMP;\n23 JUMP: if (b) nextstate = INIT;\n24 else nextstate = DECODE;\n25 NEXT: nextstate = INIT;\n26 default: nextstate = INIT;\n27 endcase\n28\n\n29 // state register\n30 always @ (posedge clk, negedge reset)\n31 if (reset == 1'b0) state <= INIT;\n32 else state <= nextstate;\n33\n\n34 // output logic\n35 assign z = state[1:0];\n36\n\n37 endmodule\n",
        "context_figures": [],
        "question": "For describing the nextstate is it better to use Products-of-Sums (POS) or Sums-of-Products (SOP)? Briefly explain.",
        "solution": "Sums-of-Products, there are fewer entries with a 1 in them, and SOP requires one entry for each",
        "solution_figures": [],
        "passed_llm_verification": false,
        "reasoning": "The solution appears to be incomplete. The original solution in the PDF says 'Sums-of-Products, there are fewer entries with a 1 in them, and SOP requires one entry for each' but it seems to be cut off. The complete explanation should clarify what SOP requires one entry for each of.",
        "passed_human_verification": true
    },
    {
        "question_id": "exam_ss2013_solutions/Problem_3/e",
        "context": "The following Verilog code defines a Finite State Machine (FSM).\n\n\n1 module fsm ( input a , input b , output [1:0] z,\n2 input clk, input reset);\n3\n\n4 reg [2:0] state, nextstate;\n5\n\n6 parameter INIT = 3'b000;\n7 parameter DECODE = 3'b001;\n8 parameter LOOP = 3'b100;\n9 parameter JUMP = 3'b111;\n\n\n10 parameter NEXT = 3'b010;\n11 // DEF1 = 3'b011;\n12 // DEF2 = 3'b101;\n13 // DEF3 = 3'b110;\n14\n\n15 // next state calculation\n16 always @( * )\n17 case (state)\n18 INIT: if ((a==1'b0) & (b==1'b0) ) nextstate = DECODE;\n19 else nextstate = INIT;\n20 DECODE: if (a) nextstate = NEXT;\n21 else nextstate = LOOP;\n22 LOOP: nextstate = JUMP;\n23 JUMP: if (b) nextstate = INIT;\n24 else nextstate = DECODE;\n25 NEXT: nextstate = INIT;\n26 default: nextstate = INIT;\n27 endcase\n28\n\n29 // state register\n30 always @ (posedge clk, negedge reset)\n31 if (reset == 1'b0) state <= INIT;\n32 else state <= nextstate;\n33\n\n34 // output logic\n35 assign z = state[1:0];\n36\n\n37 endmodule\n",
        "context_figures": [],
        "question": "Write down the Boolean Equations for the nextstate bits N2, N1, N0, in either POS or SOP. You don't need to minimize the equations.",
        "solution": "N0 = S2 S1 S0AB + S2 S1 S0 + S2 S1 S0B\n\nN1 = S2 S1 S0A + S2 S1 S0\n\nN2 = S2 S1 S0A + S2 S1 S0",
        "solution_figures": [
            "chart_p9_0.png"
        ],
        "passed_llm_verification": false,
        "reasoning": "The solution figure 'chart_p9_0.png' is referenced but I cannot verify its contents since the actual image is not provided in a viewable format. Additionally, the Boolean equations in the solution text don't properly represent the overbar notation for negation that appears in the original PDF. The equations should show which variables are negated with proper notation.",
        "passed_human_verification": false
    },
    {
        "question_id": "exam_ss2013_solutions/Problem_3/f",
        "context": "The following Verilog code defines a Finite State Machine (FSM).\n\n\n1 module fsm ( input a , input b , output [1:0] z,\n2 input clk, input reset);\n3\n\n4 reg [2:0] state, nextstate;\n5\n\n6 parameter INIT = 3'b000;\n7 parameter DECODE = 3'b001;\n8 parameter LOOP = 3'b100;\n9 parameter JUMP = 3'b111;\n\n\n10 parameter NEXT = 3'b010;\n11 // DEF1 = 3'b011;\n12 // DEF2 = 3'b101;\n13 // DEF3 = 3'b110;\n14\n\n15 // next state calculation\n16 always @( * )\n17 case (state)\n18 INIT: if ((a==1'b0) & (b==1'b0) ) nextstate = DECODE;\n19 else nextstate = INIT;\n20 DECODE: if (a) nextstate = NEXT;\n21 else nextstate = LOOP;\n22 LOOP: nextstate = JUMP;\n23 JUMP: if (b) nextstate = INIT;\n24 else nextstate = DECODE;\n25 NEXT: nextstate = INIT;\n26 default: nextstate = INIT;\n27 endcase\n28\n\n29 // state register\n30 always @ (posedge clk, negedge reset)\n31 if (reset == 1'b0) state <= INIT;\n32 else state <= nextstate;\n33\n\n34 // output logic\n35 assign z = state[1:0];\n36\n\n37 endmodule\n",
        "context_figures": [],
        "question": "Briefly explain how the output z could be obtained in an actual circuit implementation, what kind of logic circuit would be needed?",
        "solution": "The output is directly obtained from the 2 least significant bits of the state, or S1 S0.",
        "solution_figures": [],
        "passed_llm_verification": true,
        "passed_human_verification": true
    },
    {
        "question_id": "exam_ss2013_solutions/Problem_4/a",
        "context": "There are four Verilog code snippets in this section. Only one of these codes is syntactically correct. All others have a problem with the syntax. For each code, first state whether or not there is a mistake. If there is a mistake explain how to correct it. Note: Assume that the behavior as described, is correct\n",
        "context_figures": [
            "chart_p10_0.png"
        ],
        "question": "module one (input [1:0] sel, input [3:0] data, output z);\n\nassign z = sel[1] ? (sel[0] ? data[0] : data[3])\n: (sel[0] ? data[2] : data[1]);\nendmodule",
        "solution": "This code is correct. The distribution of the data bits may seem strange, but we are not checking for behviour.",
        "solution_figures": [],
        "passed_llm_verification": true,
        "passed_human_verification": true
    },
    {
        "question_id": "exam_ss2013_solutions/Problem_4/b",
        "context": "There are four Verilog code snippets in this section. Only one of these codes is syntactically correct. All others have a problem with the syntax. For each code, first state whether or not there is a mistake. If there is a mistake explain how to correct it. Note: Assume that the behavior as described, is correct\n",
        "context_figures": [
            "chart_p10_1.png"
        ],
        "question": "module mux2 ( input [1:0] i, input sel, output z);\n\nassign z= (sel) ? i[1]:i[0];\n\nendmodule\n\nmodule two ( input [3:0] data, input sel1, input sel2, output z);\n\nmux2 i0 (.i(data[1:0]), .sel(sel1), .z(m[0]) );\nmux2 i1 (.i(data[3:2]), .sel(sel1), .z(m[1]) );\nmux2 i2 (.i(m), .sel(sel2), .z(z) );\n\nendmodule",
        "solution": "This code has mistakes. In module two there is an additional signal m used. This has not been declared, it should be declared as wire [1:0] m;.",
        "solution_figures": [],
        "passed_llm_verification": true,
        "passed_human_verification": true
    },
    {
        "question_id": "exam_ss2013_solutions/Problem_4/c",
        "context": "There are four Verilog code snippets in this section. Only one of these codes is syntactically correct. All others have a problem with the syntax. For each code, first state whether or not there is a mistake. If there is a mistake explain how to correct it. Note: Assume that the behavior as described, is correct\n",
        "context_figures": [
            "chart_p11_0.png"
        ],
        "question": "module three (input [1:0] sel, output reg [7:0] z);\n\nalways @ (sel)\nif (sel = 2'b01) z=8'b01010101;\nelse if (sel = 2'b10) z=8'b10101010;\nelse z=8'b00000000;\n\nendmodule",
        "solution": "This code has mistakes. The condition checking for sel has been written as = which is an assignment. It should be == in both instances.",
        "solution_figures": [],
        "passed_llm_verification": false,
        "reasoning": "The image chart_p11_0.png shows that in the original code, the output is declared as 'output req [7:0] z' but in the parsed question it's written as 'output reg [7:0] z'. This is a discrepancy between the original and parsed text.",
        "passed_human_verification": true
    },
    {
        "question_id": "exam_ss2013_solutions/Problem_4/d",
        "context": "There are four Verilog code snippets in this section. Only one of these codes is syntactically correct. All others have a problem with the syntax. For each code, first state whether or not there is a mistake. If there is a mistake explain how to correct it. Note: Assume that the behavior as described, is correct\n",
        "context_figures": [
            "chart_p11_1.png"
        ],
        "question": "module four (input [1:0] sel, input neg, output reg [3:0] z);\n\nalways @ (neg, sel)\nif (neg) z = 4'b1111;\nelse z = 4'b0000;\nif (sel[1]) z = 4'b0001;\nif (sel[0]) z = 4'b0010;\n\nendmodule",
        "solution": "This code has mistakes. There are 3 seperate if statements following always. These should be within a begin ... end block. Note that, it would not be correct to have three separate always statements as this would mean driving the signal z from three different processes.",
        "solution_figures": [],
        "passed_llm_verification": false,
        "reasoning": "The image chart_p11_1.png shows that in the original code, the output is declared as 'output req [3:0] z' but in the parsed question it's written as 'output reg [3:0] z'. This is a discrepancy between the original and parsed text.",
        "passed_human_verification": true
    },
    {
        "question_id": "exam_ss2013_solutions/Problem_5/(a)",
        "context": "In this section, you will compare three structures to add 32-bit binary numbers in terms of Latency, Throughput, Area and Maximum Operating Frequency. Assume the following performance numbers for the components in the question. Note that the registers are considered ideal for timing: no propagation delay and no setup delay\n\nDescription Delay [ns] Area [\u00b5m2]\n\n32-bit Ripple Carry Adder 4.0 4'000\n16-bit Ripple Carry Adder 2.0 2'000\n32-bit Carry Lookahead Adder 2.5 6'000\n64-bit register 0.0 670\n49-bit register 0.0 500\n32-bit register 0.0 330\nConsider the following 32-bit ripple carry adder pipeline stage and answer the following questions:",
        "context_figures": [
            "chart_p12_0.png"
        ],
        "question": "\u2022 What is the area occupied by the entire pipeline?\n\n\u2022 How long does it take to compute one addition?\n\n\u2022 What is the maximum operating frequency (in GHz) of this pipeline?\n\n\u2022 How many additions can be completed in 1000 ns?",
        "solution": "Area = AFF,64 + ARCA,32 + AFF,32\n= 670 + 4000 + 330\n= 5000\n\nLatency = 4ns\n\nMaxFrequency = 1/4ns\n= 0.250GHz\n\nThroughput = 1000/4ns\n= 250 additions per 1000ns\n\nHint: 1/1ns = 1GHz, a clock with 1 GHz has a period of 1 ns.",
        "solution_figures": [],
        "passed_llm_verification": true,
        "passed_human_verification": true
    },
    {
        "question_id": "exam_ss2013_solutions/Problem_5/(b)",
        "context": "In this section, you will compare three structures to add 32-bit binary numbers in terms of Latency, Throughput, Area and Maximum Operating Frequency. Assume the following performance numbers for the components in the question. Note that the registers are considered ideal for timing: no propagation delay and no setup delay\n\nDescription Delay [ns] Area [\u00b5m2]\n\n32-bit Ripple Carry Adder 4.0 4'000\n16-bit Ripple Carry Adder 2.0 2'000\n32-bit Carry Lookahead Adder 2.5 6'000\n64-bit register 0.0 670\n49-bit register 0.0 500\n32-bit register 0.0 330\nConsider the following 32-bit carry lookahead pipeline stage and answer the following questions:",
        "context_figures": [
            "chart_p13_0.png"
        ],
        "question": "\u2022 What is the area occupied by the entire pipeline?\n\n\u2022 How long does it take to compute one addition?\n\n\u2022 What is the maximum operating frequency (in GHz) of this pipeline?\n\n\u2022 How many additions can be completed in 1000 ns?",
        "solution": "Area = AFF,64 + ACLA,32 + AFF,32\n= 670 + 6000 + 330\n= 7000\n\nLatency = 2.5ns\n\nMaxFrequency = 1/2.5ns\n= 0.400GHz\n\nThroughput = 1000/2.5ns\n= 400 additions per 1000ns",
        "solution_figures": [],
        "passed_llm_verification": true,
        "passed_human_verification": true
    },
    {
        "question_id": "exam_ss2013_solutions/Problem_5/(c)",
        "context": "In this section, you will compare three structures to add 32-bit binary numbers in terms of Latency, Throughput, Area and Maximum Operating Frequency. Assume the following performance numbers for the components in the question. Note that the registers are considered ideal for timing: no propagation delay and no setup delay\n\nDescription Delay [ns] Area [\u00b5m2]\n\n32-bit Ripple Carry Adder 4.0 4'000\n16-bit Ripple Carry Adder 2.0 2'000\n32-bit Carry Lookahead Adder 2.5 6'000\n64-bit register 0.0 670\n49-bit register 0.0 500\n32-bit register 0.0 330\nConsider the following 32-bit adder with a 2 stage pipeline built out of two 16-bit ripple carry adders and answer the following questions:",
        "context_figures": [
            "chart_p14_0.png"
        ],
        "question": "\u2022 What is the area occupied by the entire pipeline?\n\n\u2022 How long does it take to compute one addition?\n\n\u2022 What is the maximum operating frequency (in GHz) of this pipeline?\n\n\u2022 How many additions can be completed in 1000 ns?",
        "solution": "Area = AFF,64 + ARCA,16 + AFF,49 + ARCA,16 + AFF,32\n= 670 + 2000 + 500 + 2000 + 330\n= 5500\n\nLatency = 4ns\n\nMaxFrequency = 1/2ns\n= 0.500GHz\n\nThroughput = 1000/2ns\n= 500 additions per 1000ns",
        "solution_figures": [],
        "passed_llm_verification": true,
        "passed_human_verification": true
    },
    {
        "question_id": "exam_ss2013_solutions/Problem_5/(d)",
        "context": "In this section, you will compare three structures to add 32-bit binary numbers in terms of Latency, Throughput, Area and Maximum Operating Frequency. Assume the following performance numbers for the components in the question. Note that the registers are considered ideal for timing: no propagation delay and no setup delay\n\nDescription Delay [ns] Area [\u00b5m2]\n\n32-bit Ripple Carry Adder 4.0 4'000\n16-bit Ripple Carry Adder 2.0 2'000\n32-bit Carry Lookahead Adder 2.5 6'000\n64-bit register 0.0 670\n49-bit register 0.0 500\n32-bit register 0.0 330\n",
        "context_figures": [],
        "question": "The Latency is the time it takes to calculate one addition, whereas the Throughput is the number of additions that can be calculated per unit time. It is obvious that the throughput will increase if you can reduce the latency. Is it possible to increase the throughput, even if you cannot reduce the latency? Briefly explain.",
        "solution": "Yes. One solution is to introduce pipelining it is possible to improve the throughput as seen in the section c) of this question. Pipelining does not reduce latency, the computation of one data item still takes the same amount of time, however, the operation is broken down into smaller pieces, and as soon as the first part is completed, a new data item can be accepted, this improves the throughput. Another solution is to increase parallelism by, for example, duplicating the hardware.",
        "solution_figures": [],
        "passed_llm_verification": true,
        "passed_human_verification": true
    },
    {
        "question_id": "exam_ss2013_solutions/Problem_6",
        "context": "As covered in class, the execution speed of a program on a processor can be given as:\n\nExecution T ime = N \u00d7 CPI \u00d7 1/f\n\nWhere N is the number of instructions, CPI is clocks per instruction and f is the clock frequency. Execution T ime will improve by either reducing N and CPI, or increasing f (or a combination thereof).",
        "context_figures": [],
        "question": "List at least five improvements that can be made in order to improve the Execution T ime.",
        "solution": "Solution: Any five of the following could be accepted:\n\n\u2022 Reduce number of instructions\n\n\u2013 adopt CISC, that uses instructions that can do more\n\n\u2013 improve the compiler so that it produces more optimized code\n\n\u2022 Reduce clocks per instruction\n\n\u2013 adopt RISC, simpler instructions can be executed faster\n\n\u2013 add parallel execution units, do more per clock cycle\n\n\u2022 Increase clock frequency\n\n\u2013 migrate to a more modern manufacturing technology\n\n\u2013 adopt pipelining\n\n\u2013 redesign and improve timing critical components in the circuit (adders, alu etc)\n\n\u2013 Could also be accepted : overclock the system (use higher voltage, clock frequency)",
        "solution_figures": [],
        "passed_llm_verification": true,
        "passed_human_verification": true
    },
    {
        "question_id": "exam_ss2013_solutions/Problem_7",
        "context": "Consider the following MIPS program. For clarity the addresses have been written using only 4 hexadecimal digits. Leading hexadecimal digits are all zeroes (the real start address is 0x00003000).\n\n0x3000 start: addi $s0, $0, 4\n0x3004 xor $s1, $s1, $s1\n0x3008 addi $s2, $0, 10\n0x300C sw $s2, 0($s1)\n0x3010 addi $s2, $s2, 6\n0x3014 add $s1, $s1, $s0\n0x3018 sw $s2, 0($s1)\n\n0x301C addi $a0, $0, 11\n0x3020 sll $t1, $a0, 1\n0x3024 and $a1, $a0, $t1\n0x3028 jal absdiff\n0x302C sw $v0, 4($s1)\n\n0x3030 lw $a0, 0($0)\n0x3034 lw $a1, 0($s0)\n0x3038 jal absdiff\n0x303C lw $t3, 8($0)\n0x3040 sub $t2, $t3, $v0\n\n0x3044 done: j done\n\n0x3048 absdiff: sub $t1, $a0, $a1\n0x304C slt $t2, $t1, $0\n0x3050 beq $t2, $0, pos\n0x3054 sub $t1, $a1, $a0\n0x3058 pos: add $v0, $0, $t1\n0x305C jr $ra",
        "context_figures": [
            "chart_p16_0.png"
        ],
        "question": "We are interested in determining the value of some registers at the end of the program execution when the program reaches line 0x3044. Fill in the following table, writing the value of the indicated registers at the end of the program, and at which line these values have been written into these registers.\n\nAs an example: at the end of execution the register $s0 will have the value 4. This value has been written into the register while executing line 0x3000.",
        "solution": "Register Value Assigned on line\n\n$s0 4 0x3000\n\n$s2 16 0x3010\n\n$t1 6 0x3054\n\n$t2 3 0x3040\n\n$t3 9 0x303C\n\n$ra 0x303c 0x3038",
        "solution_figures": [
            "chart_p16_0.png"
        ],
        "passed_llm_verification": true,
        "passed_human_verification": false
    },
    {
        "question_id": "exam_ss2013_solutions/Problem_8/(a)",
        "context": "You are involved in designing a computing system using a cache (256 kbyte, 4-way set associative cache using 1 kbyte blocks). Your first design has some cache performance problems. Your colleagues made the following suggestions. For each suggestion, first state whether or not the idea will work, and then briefly explain why. If the idea works explain under what conditions.\n",
        "context_figures": [],
        "question": "Alain: \"We have too many cache misses due to conflicts. We need to reduce the degree of associativity, so that we reduce conflict misses in the cache\":",
        "solution": "This idea will not work. Just the opposite: increasing set associativity gives data more possibilities to be stored in the cache without replacing other data. This reduces conflict misses.",
        "solution_figures": [],
        "passed_llm_verification": true,
        "passed_human_verification": true
    },
    {
        "question_id": "exam_ss2013_solutions/Problem_8/(b)",
        "context": "You are involved in designing a computing system using a cache (256 kbyte, 4-way set associative cache using 1 kbyte blocks). Your first design has some cache performance problems. Your colleagues made the following suggestions. For each suggestion, first state whether or not the idea will work, and then briefly explain why. If the idea works explain under what conditions.\n",
        "context_figures": [],
        "question": "Beatrice: \"There are many compulsory cache misses. To combat this, we should increase our block size\"",
        "solution": "This idea could work. A larger block size will take advantage of spatial locality and assume that nearby data items will also be accessed by the program. If the program has such accesses, the first data access will result in a compulsory miss, but the subsequent accesses will find data in the cache.",
        "solution_figures": [],
        "passed_llm_verification": true,
        "passed_human_verification": true
    },
    {
        "question_id": "exam_ss2013_solutions/Problem_8/(c)",
        "context": "You are involved in designing a computing system using a cache (256 kbyte, 4-way set associative cache using 1 kbyte blocks). Your first design has some cache performance problems. Your colleagues made the following suggestions. For each suggestion, first state whether or not the idea will work, and then briefly explain why. If the idea works explain under what conditions.\n",
        "context_figures": [],
        "question": "Cathy: \"Our cache has many capacity misses. Instead of using a set associative cache, we should convert it to a direct mapped cache of the same size. This will allow more sets to be stored in the cache, hence reducing capacity misses\"",
        "solution": "This idea will not work. The organization of the cache does not change its capacity. The capacity miss occurs because data that is needed can not fit into the cache.",
        "solution_figures": [],
        "passed_llm_verification": true,
        "passed_human_verification": true
    }
]