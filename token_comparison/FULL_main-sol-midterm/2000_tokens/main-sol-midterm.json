{
 "exam_name": "Computer Architecture Exam.pdf",
 "problems": [
   {
     "problem": "Problem 1 (30 Points): Emerging Memory Technologies",
     "problem_context": "Computer scientists at ETH developed a new memory technology, ETH-RAM, which is non-volatile. The access latency of ETH-RAM is close to that of DRAM while it provides higher density compared to the latest DRAM technologies. ETH-RAM has one shortcoming, however: it has limited endurance, i.e., a memory cell stops functioning after 10^6 writes are performed to the cell (known as cell wear-out).\n\nA bright ETH student has built a computer system using 1GB of ETH-RAM as main memory. ETH-RAM exploits a perfect wear-leveling mechanism, i.e., a mechanism that equally distributes the writes over all of the cells of the main memory.",
     "parts": [
       {
         "part": "a",
         "subproblem": [
           {
             "subproblem_question": "This student is worried about the lifetime of the computer system she has built. She executes a test program that runs special instructions to bypass the cache hierarchy and repeatedly writes data into different words until all the ETH-RAM cells are worn-out (stop functioning) and the system becomes useless. The student's measurements show that ETH-RAM stops functioning (i.e., all its cells are worn-out) in one year (365 days). Assume the following:\n\n• The processor is in-order and there is no memory-level parallelism.\n\n• It takes 5 ns to send a memory request from the processor to the memory controller and it takes 28 ns to send the request from the memory controller to ETH-RAM.\n\n• ETH-RAM is word-addressable. Thus, each write request writes 4 bytes to memory.\n\nWhat is the write latency of ETH-RAM? Show your work."
           }
         ],
         "answer": [
           {
             "solution": "twear_out = 2^30 / (2^2 × 10^6 × (twrite_MLC + 5 + 28))\n365× 24× 3600× 10^9ns = 2^28 × 10^6 × (twrite_MLC + 33)\n\ntwrite_MLC = 365×24×3600×10^3 / 2^28 - 33 = 84.5ns\n\nExplanation:\n\n• Each memory cell should receive 10^6 writes.\n\n• Since ETH-RAM is word addressable, the required amount of writes is equal to 2^30 / 2^2 × 10^6 (there is no problem if 1GB is assumed to be equal to 10^9 bytes).\n\n• The processor is in-order and there is no memory-level parallelism, so the total latency of each memory access is equal to twrite_MLC + 5 + 28."
           }
         ]
       },
       {
         "part": "b",
         "subproblem": [
           {
             "subproblem_question": "ETH-RAM works in the multi-level cell (MLC) mode in which each memory cell stores 2 bits. The student decides to improve the lifetime of ETH-RAM cells by using the single-level cell (SLC) mode. When ETH-RAM is used in SLC mode, the lifetime of each cell improves by a factor of 10 and the write latency decreases by 70%. What is the lifetime of the system using the SLC mode, if we repeat the experiment in part (a), with everything else remaining the same in the system? Show your work."
           }
         ],
         "answer": [
           {
             "solution": "twear_out = 2^29 / (2^2 × 10^7 × (25.35 + 5 + 28)× 10^-9)\n\ntwear_out = 78579686.3s = 2.49 year\n\nExplanation:\n\n• Each memory cell should receive 10× 10^6 = 10^7 writes.\n\n• The memory capacity is reduced by 50% since we are using SLC: Capacity = 2^30/2 = 2^29\n\n• The required amount of writes is equal to 2^29 / 2^2 × 10^7.\n\n• The SLC write latency is 0.3× twrite_MLC : twrite_SLC = 0.3× 84.5 = 25.35 ns"
           }
         ]
       }
     ]
   },
   {
     "problem": "Problem 2 (80 Points): Cache Performance Analysis",
     "problem_context": "We are going to microbenchmark the cache hierarchy of a computer with the following two codes. The array data contains 32-bit unsigned integer values. For simplicity, we consider that accesses to the array latency bypass all caches (i.e., latency is not cached). timer() returns a timestamp in cycles.\n\n(1) j = 0;\nfor (i=0; i<size; i+=stride){\n    start = timer();\n    d = data[i];\n    stop = timer();\n    latency[j++] = stop - start;\n}\n\n(2) for (i=0; i<size1; i+=stride1){\n    d = data[i];\n}\nj = 0;\nfor (i=0; i<size2; i+=stride2){\n    start = timer();\n    d = data[i];\n    stop = timer();\n    latency[j++] = stop - start;\n}\n\nThe cache hierarchy has two levels. L1 is a 4kB set associative cache.",
     "parts": [
       {
         "part": "a",
         "subproblem": [
           {
             "subproblem_question": "When we run code (1), we obtain the latency values in the following chart for the first 64 reads to the array data (in the first 64 iterations of the loop) with stride equal to 1. What are the cache block sizes in L1 and L2?",
             "subproblem_figures": ["IMAGE"]
           }
         ],
         "answer": [
           {
             "solution": "L1 cache block size is 32 bytes, and L2 cache block size is 128 bytes.\n\nExplanation:\nThe highest latency values (700 cycles) correspond to L2 cache misses. The latency of 300 cycles correspond to L1 cache misses that hit the L2 cache. The lowest latency (100 cycles) corresponds to L1 cache hits. We find L1 misses every 8 32-bit elements, and L2 misses every 32 32-bit elements. Thus, L1 cache blocks are of size 32 bytes, while L2 cache blocks are 128 bytes."
           }
         ]
       },
       {
         "part": "b",
         "subproblem": [
           {
             "subproblem_question": "Using code (2) with stride1 = stride2 = 32, size1 = 1056, and size2 = 1024, we observe latency[0] = 300 cycles. However, if size1 = 1024, latency[0] = 100 cycles. What is the maximum number of ways in L1? (Note: The replacement policy can be either FIFO or LRU)."
           }
         ],
         "answer": [
           {
             "solution": "The maximum number of ways is 32.\n\nExplanation:\nIn L1 there are a total of 128 cache blocks. If the accessed space is 1056 elements, 33 cache blocks are read. In case of having more than 32 ways, there would be a hit in the second loop. However, with 32 or less ways, the cache block that contains data[0] is replaced in the last iteration of the first loop."
           }
         ]
       },
       {
         "part": "c",