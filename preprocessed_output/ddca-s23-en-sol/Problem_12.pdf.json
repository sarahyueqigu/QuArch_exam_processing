{
    "problem": "12",
    "problem_context": "An ETH student writes two programs (A and B) and runs them on two different toy machines (M1 and M2) to determine the type of the prefetcher used in each of these machines. She observes programs A and B to generate the following memory access patterns (note that these are cacheblock addresses, not byte addresses).\n\nProgram A: 27 memory accesses\n\na, a + 1, a + 2, a + 3, a + 4, a + 8, a + 16, a + 32, a + 64,\na, a + 1, a + 2, a + 3, a + 4, a + 8, a + 16, a + 32, a + 64,\na, a + 1, a + 2, a + 3, a + 4, a + 8, a + 16, a + 32, a + 64\n\nProgram B: 501 memory accesses\n\nb, b + 2, b + 4, ...., b + 998, b + 1000\n\nThe student measures the coverage (i.e., the fraction of program's memory accesses correctly predicted by the prefetcher) and accuracy (i.e., the fraction of sent prefetch requests that are used by the program) of the prefetching mechanism in each of the machines. The following table shows her measurement results:\n\nMachine M1\tMachine M2\nCoverage\tAccuracy\tCoverage\tAccuracy\n\nProgram A\t6/27\t6/27\t1/3\t9/26\nProgram B\t499/501\t499/501\t499/501\t499/500\n\nThe student knows the following information about the machines:\n\n- There are three possible choices for the prefetching mechanism:\n\n1. Stride prefetcher\n2. 1st-next-block prefetcher with degree 1: Prefetches cacheline A+1 after seeing access to block A\n3. 4th-next-block prefetcher with degree 1: Prefetches cacheline A+4 after seeing access to block A\n\n- Each prefetcher has large enough resources to detect and store access patterns.\n- Each prefetcher starts with an empty table.\n- Each prefetcher sends only one prefetch request for each program access.\n- Each memory access is separated long enough in time so that all prefetch requests sent can complete before the next access occurs.\n- No prefetcher employs any confidence mechanism (e.g., the stride prefetcher will send a prefetch request to address A+4 by only seeing two consecutive memory accesses to addresses A and A+2).\n\nDetermine what type of prefetching mechanism is used by M1 and M2. Show your work. Answers without explanation will not be rewarded.",
    "problem_solution": "Machine M1: 4th-next-line prefetcher\n\nMachine M2: Stride prefetcher\n\nExplanation\n\nWe calculate the accuracy and coverage for all three types of prefetchers, and then we can answer what prefetcher each machine is using. Underlined and red-marked cacheline addresses are correctly and incorrectly prefetched, respectively.\n\nEach prefetcher works in the following way while running Application A:\n\nStride: Coverage: 1/3, Accuracy: 9/26\na, a + 1, a + 2, a + 3, a + 4, a + 8, a + 16, a + 32, a + 64, (incorrect: a + 5, a + 12, a + 24, a + 48, a + 96)\na, a + 1, a + 2, a + 3, a + 4, a + 8, a + 16, a + 32, a + 64, (incorrect: a - 64, a + 5, a + 12, a + 24, a + 48, a + 96)\na, a + 1, a + 2, a + 3, a + 4, a + 8, a + 16, a + 32, a + 64 (incorrect: a - 64, a + 5, a + 12, a + 24, a + 48, a + 96)\n\n1st-next-line: Coverage: 4/9, Accuracy: 4/9\na, a + 1, a + 2, a + 3, a + 4, a + 8, a + 16, a + 32, a + 64, (incorrect: a + 5, a + 9, a + 17, a + 33, a + 65)\na, a + 1, a + 2, a + 3, a + 4, a + 8, a + 16, a + 32, a + 64, (incorrect: a + 5, a + 9, a + 17, a + 33, a + 65)\na, a + 1, a + 2, a + 3, a + 4, a + 8, a + 16, a + 32, a + 64, (incorrect: a + 5, a + 9, a + 17, a + 33, a + 65)\n\n4th-next-line: Coverage: 6/27, Accuracy: 6/27\na, a + 1, a + 2, a + 3, a + 4, a + 8, a + 16, a + 32, a + 64, (incorrect: a + 5, a + 6, a + 7, a + 12, a + 20, a + 36, a + 68)\na, a + 1, a + 2, a + 3, a + 4, a + 8, a + 16, a + 32, a + 64, (incorrect: a + 5, a + 6, a + 7, a + 12, a + 20, a + 36, a + 68)\na, a + 1, a + 2, a + 3, a + 4, a + 8, a + 16, a + 32, a + 64 (incorrect: a + 5, a + 6, a + 7, a + 12, a + 20, a + 36, a + 68)\n\nThe three prefetchers work in the following way while running Application B:\n\nStride: Coverage: 499/501, Accuracy: 499/500\nb, b + 2, b + 4, b + 6, b + 8, b + 10, ..., b + 998, b + 1000 (incorrect: b + 1002)\n\n1st-next-line: Coverage: 0, Accuracy: 0\nb, b + 2, b + 4, b + 6, b + 8, b + 10, ... , b + 998, b + 1000 (incorrect: b + 1, b + 3, ..., b + 999, b + 1001)\n\n4th-next-line: Coverage: 499/501, Accuracy: 499/501\nb, b + 2, b + 4, b + 6, b + 8, b + 10, ..., b + 998, b + 1000 (incorrect: b +1002, b + 1004)",
    "problem_context_figures": [],
    "problem_solution_figures": []
}