{
    "problem": "2",
    "problem_context": "Finite State Machines",
    "subproblems": [
        {
            "subproblem": "2.1",
            "subproblem_context": "Simplifying an FSM",
            "subproblem_question": "You are given the finite state machine of a one input / one output digital circuit design. Answer the following questions for the given state diagram. Is it possible to simplify this state diagram and reduce the number of states? If so, simplify it to the minimum number of states. Explain each step of your simplification. Draw the simplified state diagram. If not, explain why it is not possible to simplify the state diagram.",
            "subproblem_solution": "Yes, it is possible. Below is the state transition table of the given state machine:\n\nCurrent State Input Next State Output\n\nA 0 A 1\nA 1 B 0\nB 0 A 1\nB 1 B 0\nC 0 D 1\nC 1 A 0\nD 0 A 1\nD 1 B 0\n\nWe can see that the states A, B, and D are identical. For all of these states,\n\u02c6 an input of 0 leads to the next state A and the output 1\n\u02c6 an input of 1 leads to the next state B and the output 0\n\nTherefore, we can merge states A, B, and D. Let's use the name X:\n\nCurrent State Input Next State Output\n\nX 0 X 1\nX 1 X 0\nC 0 X 1\nC 1 X 0\n\nWe can further simplify this state machine as both states C and X are identical in terms of their next state and output. As a result, this state machine has only one state and the output is always the inverse of the input.\n\nS\n\n1/0\n0/1\n\nFinal Exam Page 4 of 27",
            "subproblem_context_figures": [],
            "subproblem_solution_figures": []
        },
        {
            "subproblem": "2.2",
            "subproblem_context": "Designing an FSM",
            "subproblem_question": "Design a Moore finite state machine (FSM), where each output is solely determined by the current state of the machine and not directly influenced by the inputs. The state machine should have one input and one output. This FSM's goal is to detect a stable transition in the input signal from repeated logic-0 to repeated logic-1. The output should be logic-1 only when the input sequence of \"0-0-1-1\" is observed. The output should be zero in all other cases. When the circuit is reset, your state machine should assume that the input signal has been high (logic-1) for a long time. Draw the state diagram and explain why it works. Your state machine should use as few states as possible and each state should have a precise definition and output.",
            "subproblem_solution": "We need to keep track of the bit values in the last four bits. This requires 16 states. However, many of these states behave the same. We can reduce the number of states down to five.\n\n\u02c6 Since this is a Moore machine, the output should be independent from the input. Therefore, there should be a state for the posedge where the output is \"1\". All other states will have the output of \"0\". The FSM goes to the posedge state only when the last four bits are 0-0-1-1. We call this state S0011.\n\n\u02c6 The FSM should reach to the posedge state from another state where the last three input bits are 0-0-1. We call this state SX001.\n\n\u02c6 The FSM should reach to the 0-0-1 state from a state where the last two input bits are 0-0. Note that it does not matter what the input bits are, earlier than the last two zeros. We call this state SXX01.\n\n\u02c6 The FSM should not stay in state S0011 for more than one clock cycle as when the new input comes, the last four bits will not be 0-0-1-1 anymore. If the input is 1, the next state should be SXXX1: the last bit is zero but it is not a posedge and the earlier bits are not important. If the input is 0, the next state should be SXX10: the last two bits are 1-0 and the earlier bits are not important.\n\n\u02c6 Intuitively, if the state is SXXX1, the FSM should remain at this state if the input is 1 and go to SXX10 if the input is 0.\n\n\u02c6 If the state is SXX10, the FSM should not remain at this state regardless of the input. If the input is 0, the next state is SXX00. If the input is 1, the next state is SXXX1.\n\nTherefore, it is possible to design this state machine with five states. The state diagram is shown below.\n\nreset\nSXX00\n\n0\n\n0\n\nSXX10\n0\n\nSXXX1\n0\n\n0\n\n1\n\n1\n\nSX001\n0\n\n0 1\n\n1\n\n0\n\nS0011\n1\n\n1 0\n\nFinal Exam Page 5 of 27",
            "subproblem_context_figures": [],
            "subproblem_solution_figures": []
        }
    ],
    "problem_context_figures": []
}