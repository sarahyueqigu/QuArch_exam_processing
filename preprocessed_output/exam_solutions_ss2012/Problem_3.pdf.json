{
    "problem": "3",
    "problem_context": "In this question you will design a simple Finite State Machine (FSM) that implements a 3-bit Gray Code counter. The FSM will not have any inputs and have three output bits G2, G1, G0. Gray codes are specialized codes where consecutive numbers differ in only one bit position as seen in the table below.\n\nState Gray Code Output \nS G2 G1 G0 \nS0 0 0 0 \nS1 0 0 1 \nS2 0 1 1 \nS3 0 1 0 \nS4 1 1 0 \nS5 1 1 1 \nS6 1 0 1 \nS7 1 0 0 \n\nThe following is a state transition diagram of this FSM with the states named S0 to S7.",
    "subproblems": [
        {
            "subproblem": "a",
            "subproblem_question": "Is this a Moore or Mealy type FSM?",
            "subproblem_solution": "Moore type, since the output G only depends on the state as there are no inputs",
            "subproblem_context_figures": [],
            "subproblem_solution_figures": []
        },
        {
            "subproblem": "b",
            "subproblem_context": "It has been decided to use a simple binary state encoding using 3-bits where each state is encoded in standard binary. I.e. S0 = 000, S1 = 001, \u2026 , S6= 110, S7 = 111.",
            "subproblem_question": "Make a state transition table using the binary state encodings given above. Determine the next state equations.",
            "subproblem_solution": "Current State Next State \nS2 S1 S0 N2 N1 N0 \n0 0 0 0 0 1 \n0 0 1 0 1 0 \n0 1 0 0 1 1 \n0 1 1 1 0 0 \n1 0 0 1 0 1 \n1 0 1 1 1 0 \n1 1 0 1 1 1 \n1 1 1 0 0 0 \n\nN2 = S2'S1S0 + S2S1' + S2S0'  \nN1 = S1'S0 + S1S0' \nN0 = S0'",
            "subproblem_context_figures": [],
            "subproblem_solution_figures": []
        },
        {
            "subproblem": "c",
            "subproblem_question": "Now determine the output equations that calculate the outputs G2, G1, G0 from the state bits S0, S1, S2.",
            "subproblem_solution": "G2 = S2 \nG1 = S2S1' + S2'S1 \nG0 = S1'S0 + S1S0'",
            "subproblem_context_figures": [],
            "subproblem_solution_figures": []
        },
        {
            "subproblem": "d",
            "subproblem_context": "In step b), we have used a binary coding for the states. As a result, we needed a additional circuit to calculate the outputs from the State bits. In this part we will directly use the gray code for the state encoding. In this way, the state will directly be the required gray code, and no additional output encoding will be required.",
            "subproblem_question": "Make a new state transition table and determine the next state equations using the gray code as state encoding.",
            "subproblem_solution": "Current State Next State \nS2 S1 S0 N2 N1 N0 \n0 0 0 0 0 1 \n0 0 1 0 1 1 \n0 1 0 1 1 0 \n0 1 1 0 1 0 \n1 0 0 0 0 0 \n1 0 1 1 0 0 \n1 1 0 1 1 1 \n1 1 1 1 0 1 \n\n\n\nN2 = S2S0 + S1S0' \nN1 = S2'S0 + S1S0' \nN2 = S2'S1' + S2S1",
            "subproblem_context_figures": [],
            "subproblem_solution_figures": []
        },
        {
            "subproblem": "e",
            "subproblem_question": "Which solution would you prefer (using binary coding for the states as in b or gray coding as in d)? Explain with a short sentence.",
            "subproblem_solution": "Using the gray code as the state encoding results in a simpler circuit with fewer gates, it would be better to use that one.",
            "subproblem_context_figures": [],
            "subproblem_solution_figures": []
        }
    ],
    "problem_context_figures": []
}