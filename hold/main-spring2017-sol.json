{
  "exam_name": "Computer Architecture Exam.pdf",
  "problem": "Problem 1 (70 Points): Potpourri",
  "problem_context": "",
  "problem_figures": [],
  "parts": [
    {
      "part": "1.1",
      "subproblem": [
        {
          "subproblem_question": "Processor Design [20 points]\n\nCircle the lines including terms that are compatible with each other and it makes sense for a processor design to include both.\n\u2022 superscalar execution \u2014 in-order execution\n\u2022 superscalar execution \u2014 out-of-order execution\n\u2022 single-cycle machine \u2014 branch prediction\n\u2022 reservation station \u2014 microprogramming\n\u2022 fine-grained multithreading \u2014 single-core processor\n\u2022 Tomasulo's algorithm \u2014 in-order execution\n\u2022 precise exceptions \u2014 out-of-order instruction retirement\n\u2022 branch prediction \u2014 fine-grained multithreading\n\u2022 direct-mapped cache \u2014 LRU replacement policy\n\u2022 fine-grained multithreading \u2014 pipelining",
          "subproblem_figures": []
        }
      ],
      "answer": [
        {
          "solution": "\u2022 superscalar execution \u2014 in-order execution 2 points\n\u2022 superscalar execution \u2014 out-of-order execution 2 points\n\u2022 single-cycle machine \u2014 branch prediction 2 points\n\u2022 reservation station \u2014 microprogramming 2 points\n\u2022 fine-grained multithreading \u2014 single-core processor 2 points\n\u2022 Tomasulo's algorithm \u2014 in-order execution 2 points\n\u2022 precise exceptions \u2014 out-of-order instruction retirement 2 points\n\u2022 branch prediction \u2014 fine-grained multithreading 2 points\n\u2022 direct-mapped cache \u2014 LRU replacement policy 2 points\n\u2022 fine-grained multithreading \u2014 pipelining 2 points",
          "solution_figures": []
        }
      ]
    },
    {
      "part": "1.2",
      "subproblem": [
        {
          "subproblem_question": "Pipelining [6 points]\n\nWhat are the three major causes of pipeline stalls?",
          "subproblem_figures": []
        }
      ],
      "answer": [
        {
          "solution": "Data/Control Flow dependences (other possible answer: Data flow dependence)\n2 points\n\nMulti-cycle operations (other possible answer: Control flow dependence) 2 points\n\nResource contention 2 points",
          "solution_figures": []
        }
      ]
    },
    {
      "part": "1.3",
      "subproblem": [
        {
          "subproblem_question": "Caches I [5 points]\n\nPlease reason about the following statements about a possible processor cache one can design.\n\nCan a cache be 5-way set associative?\n\nYES NO\n\nExplain your reasoning. Be concise. Show your work.",
          "subproblem_figures": []
        }
      ],
      "answer": [
        {
          "solution": "Answer: we just need 5 tag comparators.\nExplanation: Nothing wrong with a non-power-of-two associativity.",
          "solution_figures": []
        }
      ]
    },
    {
      "part": "1.4",
      "subproblem": [
        {
          "subproblem_question": "Caches II [10 points]\n\nAssume a processor where instructions operate on 8-byte operands. An instruction is also encoded using 8 bytes. Assume that the designed processor implements a 16 kilo-byte, 4-way set associative cache that contains 1024 sets.\n\nHow effective is this cache? Explain your reasoning. Be concise. Show your work.",
          "subproblem_figures": []
        }
      ],
      "answer": [
        {
          "solution": "Answer:\n1) The cache requires two accesses to be effective. (5 points)\n2) The cache cannot exploit spatial locality. (5 points)\nExplanation: The cache has 4 \u2217 1024 = 4096 cache lines in total. That means, each cache line is 16KB/4096 = 4 bytes. With 4-byte cache lines, each operand and each instruction needs to be stored in two cache lines, which will require 2 accesses to the cache for each load/store operation and instruction fetches. The cache cannot exploit spatial locality, but only can provide benefit by exploiting temporal locality (albeit requiring two accesses).",
          "solution_figures": []
        }
      ]
    },
    {
      "part": "1.5",
      "subproblem": [
        {
          "subproblem_question": "Performance Analysis [15 points]\n\nA multi-cycle processor executes arithmetic instructions in 5 cycles, branch instructions in 4 cycles and memory instructions in 10 cycles. You have a program where 30% of all instructions are arithmetic instructions, 35% of all instructions are memory instructions, and the rest are branch instructions. You figured out that the processor cannot execute the program fast enough to meet your performance goals. Your goal is to reduce the execution time of this program by at least 10%. Hence, you decide to change the processor design to improve the performance of arithmetic instructions.\n\nIn the new processor design, at most how many cycles should the execution of a single arithmetic instruction take to reduce the execution time of the entire program by at least 10%? Show your work.",
          "subproblem_figures": []
        }
      ],
      "answer": [
        {
          "solution": "Answer: 2 cycles. (10 points)\nExplanation: Let the total number of instructions be X.\nThe processor will execute the program in:\n5 \u2217 0.3 \u2217X + 4 \u2217 0.35 \u2217X + 10 \u2217 0.35 \u2217X = 6.4 \u2217X cycles.\nTo improve the execution time by 10%, the program should complete in:\n6.4 \u2217X \u2217 0.1 = 0.64 \u2217X less cycles.\nThe cost of executing the arithmetic instructions was 5 \u2217 0.3 \u2217X = 1.5 \u2217X cycles. To improve the program's performance by 10%, the arithmetic instructions should complete execution at least in 1.5\u2217X\u22120.64\u2217X = 0.86\u2217X cycles. Hence, A \u2217 0.3 \u2217X <= 0.86 \u2217X,A <= 2.87, where A is the new number of cycles that the processor should execute an arithmetic instruction in. So, to improve the overall performance by 10%, an arithmetic instruction needs to execute 3 cycles faster. Hence, it should take at most 5 - 3 = 2 cycles. (a correct explanation that proves the student's understanding may receive 13/14 points.)",
          "solution_figures": []
        }
      ]
    },
    {
      "part": "1.6",
      "subproblem": [
        {
          "subproblem_question": "Microprogrammed Design [4 points]\n\nIn lecture, we discussed a design principle for microprogrammed processors. We said that it is a good design principle to generate the control signals for cycle N + 1 in cycle N.\n\nWhy is this a good design principle? Be concise in your answer.",
          "subproblem_figures": []
        }
      ],
      "answer": [
        {
          "solution": "Answer: Likely keeps the critical path short (it follows the critical path design principle).\nExplanation: By generating the control signals in advance, we can make the critical path of the circuit likely shorter. Shorter critical path can increase the frequency of the processor.",
          "solution_figures": []
        }
      ]
    },
    {
      "part": "1.7",
      "subproblem": [
        {
          "subproblem_question": "Processor Performance [10 points]\n\nAssume that we test the performance of two processors, A and B, on a benchmark program. We find the following about each:\n\n\u2022 Processor A has a CPI of 2 and executes 4 Billion Instructions per Second.\n\n\u2022 Processor B has a CPI of 1 and executes 8 Billion Instructions per Second.\n\nWhich processor has higher performance on this program? Circle one.\nRecall that CPI stands for Cycles Per Instruction.\n\nA. Processor A\nB. Processor B\nC. They have equal performance\nD. Not enough information to tell\n\nExplain concisely your answer in the box provided below. Show your work.",
          "subproblem_figures": []
        }
      ],
      "answer": [
        {
          "solution": "Answer: Neither of these metrics nor their combination provide execution time.\nExplanation: Although information about the CPI and the instructions/second is provided, it is not enough to reason about the processors' performance. The processors may support different Instruction Set Architectures, in which case the benchmark program will be compiled into a different assembly code. The fact that one of the processors execute more instructions per second does not necessarily mean that the processor makes more progress on the benchmark.",
          "solution_figures": []
        }
      ]
    }
  ]
}