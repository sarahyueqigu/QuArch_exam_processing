{
  "exam_name": "Computer Architecture Exam.pdf",
  "problem": "1",
  "problem_figures": [],
  "parts": [
    {
      "part": "a",
      "subproblem": [
        {
          "subproblem_question": "You receive the following 12-bit binary sequence:\n\n0000 0111 1100\n\nWhich decimal numbers are encoded in this sequence, if you were told that the sequence contained:",
          "subproblem_figures": []
        }
      ],
      "answer": [
        {
          "solution": "Two 6-bit numbers using two's complement: 1,−4\n\nA single 12-bit unsigned number: 124\n\nThree 4-bit numbers using sign/magnitude: 0, 7,−4",
          "solution_figures": []
        }
      ]
    },
    {
      "part": "b",
      "subproblem": [
        {
          "subproblem_question": "In the lecture, it was explained that the two's complement was the better alternative to represent negative numbers. Name two main advantages of the two's complement representation over a sign/magnitude representation:",
          "subproblem_figures": []
        }
      ],
      "answer": [
        {
          "solution": "1. Zero is represented only once\n\n2. Standard binary addition works with two's complement numbers without additional effort\n\n3. Associativity law holds",
          "solution_figures": []
        }
      ]
    }
  ]
}

{
  "exam_name": "Computer Architecture Exam.pdf",
  "problem": "2",
  "problem_context": "The following Verilog code defines a combinational circuit. We are interested in finding out the timing properties of this circuit.\n\n1 module gandalf ( input [3:0] a, input e, output z);\n2\n\n3 wire b,c,d;\n4 reg f;\n5\n\n6 assign d = ˜(a[3] & (a[2] | b));\n7\n\n8 always @ (*)\n9 f <= a[3] & b;\n10\n\n11 assign z = (˜e) ? d : f;\n12 assign b = a[0] & a[1];\n13\n\n14 endmodule\n\n\nThe circuit is implemented using only the following basic logic building blocks: 2-input AND, 2-input OR, 2:1 Multiplexer, Inverter. The delay from any input to the output for each basic building block is given in the table below:\n\nDescription Delay [ps]\n\n2-input AND gate 100\n2-input OR gate 120\nInverter 50\n2:1 Multiplexer 180",
  "problem_figures": [],
  "parts": [
    {
      "part": "a",
      "subproblem": [
        {
          "subproblem_question": "Draw a gate-level circuit diagram of the circuit using only the following basic logic gates: 2-input AND, 2-input OR, 2:1 Multiplexer, Inverter. Note: there is no need for optimizations.",
          "subproblem_figures": []
        }
      ],
      "answer": [
        {
          "solution": "",
          "solution_figures": ["IMAGE"]
        }
      ]
    },
    {
      "part": "b",
      "subproblem": [
        {
          "subproblem_question": "Determine the propagation delay of the circuit. Draw it on your schematic, and calculate the propagation delay using the delay values from the table.",
          "subproblem_figures": []
        }
      ],
      "answer": [
        {
          "solution": "tpd = tpd,AND + tpd,OR + tpd,AND + tpd,INV + tpd,MUX\n\n= 100 ps + 120 ps + 100 ps + 50 ps + 180 ps\n\n= 550 ps",
          "solution_figures": []
        }
      ]
    },
    {
      "part": "c",
      "subproblem": [
        {
          "subproblem_question": "Determine the contamination delay of the circuit. Draw it on your schematic, and calculate the contamination delay using the delay values from the table.",
          "subproblem_figures": []
        }
      ],
      "answer": [
        {
          "solution": "tpd = tpd,INV + tpd,MUX\n\n= 50 ps + 180 ps\n\n= 230 ps",
          "solution_figures": []
        }
      ]
    }
  ]
}

{
  "exam_name": "Computer Architecture Exam.pdf",
  "problem": "3",
  "problem_context": "The following Verilog code defines a Finite State Machine (FSM).\n\n1 module fsm ( input a , input b , output [1:0] z,\n2 input clk, input reset);\n3\n\n4 reg [2:0] state, nextstate;\n5\n\n6 parameter INIT = 3'b000;\n7 parameter DECODE = 3'b001;\n8 parameter LOOP = 3'b100;\n9 parameter JUMP = 3'b111;\n10 parameter NEXT = 3'b010;\n11 // DEF1 = 3'b011;\n12 // DEF2 = 3'b101;\n13 // DEF3 = 3'b110;\n14\n\n15 // next state calculation\n16 always @( * )\n17 case (state)\n18 INIT: if ((a==1'b0) & (b==1'b0) ) nextstate = DECODE;\