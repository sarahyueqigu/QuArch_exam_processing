{
    "pages": [
        {
            "page": 1,
            "text": " Family Name:    SOLUTIONS                           First Name:                        Student ID:\n                                                               Final Exam\n                                               Design of Digital Circuits (252-0028-00L)\n                                                        ETH Z\u00fcrich, Spring 2019\n                                                            Prof. Onur Mutlu\n                      Problem 1 (12 Points):   Boolean Algebra\n                      Problem 2 (20 Points):   Verilog\n                      Problem 3 (30 Points):   Finite State Machines (FSM)\n                      Problem 4 (20 Points):   ISA vs. Microarchitecture\n                      Problem 5 (20 Points):   Performance Evaluation\n                      Problem 6 (40 Points):   Pipeline (Reverse Engineering)\n                      Problem 7 (36 Points):   Tomasulo\u2019s Algorithm\n                      Problem 8 (30 Points):   Systolic Arrays\n                      Problem 9 (35 Points):   GPUs and SIMD\n                     Problem 10 (40 Points):   Reverse Engineering Caches\n                     Problem 11 (30 Points):   Dataflow\n              Problem 12 (BONUS: 30 Points):   Branch Prediction\n        Total (343 (313 + 30 bonus) Points):\nExamination Rules:\n  1. Written exam, 180 minutes in total.\n  2. No books, no calculators, no computers or communication devices. 3 double-sided A4 sheets of\n     handwritten notes are allowed.\n  3. Write all your answers on this document; space is reserved for your answers after each question.\n  4. You are provided with scratchpad sheets. Do not answer questions on them. We will not collect them.\n  5. Clearly indicate your final answer for each problem. Answers will only be evaluated if they are readable.\n  6. Put your Student ID card visible on the desk during the exam.\n  7. If you feel disturbed, immediately call an assistant.\n  8. Write with a black or blue pen (no pencil, no green or red color).\n  9. Show all your work. For some questions, you may get partial credit even if the end result is wrong due\n     to a calculation mistake. If you make assumptions, state your assumptions clearly and precisely.\n 10. Please write your initials at the top of every page.\nTips:\n \u2022 Be cognizant of time. Do not spend too much time on one question.\n \u2022 Be concise. You may be penalized for verbosity.\n \u2022 Show work when needed. You will receive partial credit at the instructors\u2019 discretion.\n \u2022 Write legibly. Show your final answer.",
            "md": "# Final Exam\n\n# Design of Digital Circuits (252-0028-00L)\n\n# ETH Z\u00fcrich, Spring 2019\n\n# Prof. Onur Mutlu\n\nFamily Name: SOLUTIONS\n\nFirst Name:\n\nStudent ID:\n\n# Problems\n\n- Problem 1 (12 Points): Boolean Algebra\n- Problem 2 (20 Points): Verilog\n- Problem 3 (30 Points): Finite State Machines (FSM)\n- Problem 4 (20 Points): ISA vs. Microarchitecture\n- Problem 5 (20 Points): Performance Evaluation\n- Problem 6 (40 Points): Pipeline (Reverse Engineering)\n- Problem 7 (36 Points): Tomasulo\u2019s Algorithm\n- Problem 8 (30 Points): Systolic Arrays\n- Problem 9 (35 Points): GPUs and SIMD\n- Problem 10 (40 Points): Reverse Engineering Caches\n- Problem 11 (30 Points): Dataflow\n- Problem 12 (BONUS: 30 Points): Branch Prediction\n\nTotal (343 (313 + 30 bonus) Points):\n\n# Examination Rules:\n\n1. Written exam, 180 minutes in total.\n2. No books, no calculators, no computers or communication devices. 3 double-sided A4 sheets of handwritten notes are allowed.\n3. Write all your answers on this document; space is reserved for your answers after each question.\n4. You are provided with scratchpad sheets. Do not answer questions on them. We will not collect them.\n5. Clearly indicate your final answer for each problem. Answers will only be evaluated if they are readable.\n6. Put your Student ID card visible on the desk during the exam.\n7. If you feel disturbed, immediately call an assistant.\n8. Write with a black or blue pen (no pencil, no green or red color).\n9. Show all your work. For some questions, you may get partial credit even if the end result is wrong due to a calculation mistake. If you make assumptions, state your assumptions clearly and precisely.\n10. Please write your initials at the top of every page.\n\n# Tips:\n\n- Be cognizant of time. Do not spend too much time on one question.\n- Be concise. You may be penalized for verbosity.\n- Show work when needed. You will receive partial credit at the instructors\u2019 discretion.\n- Write legibly. Show your final answer.",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Final Exam",
                    "md": "# Final Exam",
                    "rows": null,
                    "bBox": {
                        "x": 257.49,
                        "y": 59.18,
                        "w": 80.58,
                        "h": 14.0
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits (252-0028-00L)",
                    "md": "# Design of Digital Circuits (252-0028-00L)",
                    "rows": null,
                    "bBox": {
                        "x": 129.69,
                        "y": 84.48,
                        "w": 336.33,
                        "h": 17.0
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "ETH Z\u00fcrich, Spring 2019",
                    "md": "# ETH Z\u00fcrich, Spring 2019",
                    "rows": null,
                    "bBox": {
                        "x": 194.75,
                        "y": 116.06,
                        "w": 205.64,
                        "h": 17.0
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Prof. Onur Mutlu",
                    "md": "# Prof. Onur Mutlu",
                    "rows": null,
                    "bBox": {
                        "x": 251.56,
                        "y": 147.68,
                        "w": 92.62,
                        "h": 12.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Family Name: SOLUTIONS\n\nFirst Name:\n\nStudent ID:",
                    "md": "Family Name: SOLUTIONS\n\nFirst Name:\n\nStudent ID:",
                    "rows": null,
                    "bBox": {
                        "x": 63.58,
                        "y": 43.1,
                        "w": 441.58,
                        "h": 10.0
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Problems",
                    "md": "# Problems",
                    "rows": null,
                    "bBox": {
                        "x": 0.0,
                        "y": 0.0,
                        "w": 595.28,
                        "h": 841.89
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "- Problem 1 (12 Points): Boolean Algebra\n- Problem 2 (20 Points): Verilog\n- Problem 3 (30 Points): Finite State Machines (FSM)\n- Problem 4 (20 Points): ISA vs. Microarchitecture\n- Problem 5 (20 Points): Performance Evaluation\n- Problem 6 (40 Points): Pipeline (Reverse Engineering)\n- Problem 7 (36 Points): Tomasulo\u2019s Algorithm\n- Problem 8 (30 Points): Systolic Arrays\n- Problem 9 (35 Points): GPUs and SIMD\n- Problem 10 (40 Points): Reverse Engineering Caches\n- Problem 11 (30 Points): Dataflow\n- Problem 12 (BONUS: 30 Points): Branch Prediction\n\nTotal (343 (313 + 30 bonus) Points):",
                    "md": "- Problem 1 (12 Points): Boolean Algebra\n- Problem 2 (20 Points): Verilog\n- Problem 3 (30 Points): Finite State Machines (FSM)\n- Problem 4 (20 Points): ISA vs. Microarchitecture\n- Problem 5 (20 Points): Performance Evaluation\n- Problem 6 (40 Points): Pipeline (Reverse Engineering)\n- Problem 7 (36 Points): Tomasulo\u2019s Algorithm\n- Problem 8 (30 Points): Systolic Arrays\n- Problem 9 (35 Points): GPUs and SIMD\n- Problem 10 (40 Points): Reverse Engineering Caches\n- Problem 11 (30 Points): Dataflow\n- Problem 12 (BONUS: 30 Points): Branch Prediction\n\nTotal (343 (313 + 30 bonus) Points):",
                    "rows": null,
                    "bBox": {
                        "x": 94.91,
                        "y": 178.41,
                        "w": 307.72,
                        "h": 270.98
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Examination Rules:",
                    "md": "# Examination Rules:",
                    "rows": null,
                    "bBox": {
                        "x": 57.6,
                        "y": 479.05,
                        "w": 98.34,
                        "h": 10.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "1. Written exam, 180 minutes in total.\n2. No books, no calculators, no computers or communication devices. 3 double-sided A4 sheets of handwritten notes are allowed.\n3. Write all your answers on this document; space is reserved for your answers after each question.\n4. You are provided with scratchpad sheets. Do not answer questions on them. We will not collect them.\n5. Clearly indicate your final answer for each problem. Answers will only be evaluated if they are readable.\n6. Put your Student ID card visible on the desk during the exam.\n7. If you feel disturbed, immediately call an assistant.\n8. Write with a black or blue pen (no pencil, no green or red color).\n9. Show all your work. For some questions, you may get partial credit even if the end result is wrong due to a calculation mistake. If you make assumptions, state your assumptions clearly and precisely.\n10. Please write your initials at the top of every page.",
                    "md": "1. Written exam, 180 minutes in total.\n2. No books, no calculators, no computers or communication devices. 3 double-sided A4 sheets of handwritten notes are allowed.\n3. Write all your answers on this document; space is reserved for your answers after each question.\n4. You are provided with scratchpad sheets. Do not answer questions on them. We will not collect them.\n5. Clearly indicate your final answer for each problem. Answers will only be evaluated if they are readable.\n6. Put your Student ID card visible on the desk during the exam.\n7. If you feel disturbed, immediately call an assistant.\n8. Write with a black or blue pen (no pencil, no green or red color).\n9. Show all your work. For some questions, you may get partial credit even if the end result is wrong due to a calculation mistake. If you make assumptions, state your assumptions clearly and precisely.\n10. Please write your initials at the top of every page.",
                    "rows": null,
                    "bBox": {
                        "x": 64.8,
                        "y": 496.98,
                        "w": 473.11,
                        "h": 195.31
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Tips:",
                    "md": "# Tips:",
                    "rows": null,
                    "bBox": {
                        "x": 57.6,
                        "y": 700.22,
                        "w": 25.0,
                        "h": 10.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "- Be cognizant of time. Do not spend too much time on one question.\n- Be concise. You may be penalized for verbosity.\n- Show work when needed. You will receive partial credit at the instructors\u2019 discretion.\n- Write legibly. Show your final answer.",
                    "md": "- Be cognizant of time. Do not spend too much time on one question.\n- Be concise. You may be penalized for verbosity.\n- Show work when needed. You will receive partial credit at the instructors\u2019 discretion.\n- Write legibly. Show your final answer.",
                    "rows": null,
                    "bBox": {
                        "x": 0.0,
                        "y": 0.0,
                        "w": 595.28,
                        "h": 841.89
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 2,
            "text": "Initials:                              Design of Digital Circuits                    August 23rd, 2019\n                                   This page intentionally left blank\nFinal Exam                                                                                 Page 1 of 24",
            "md": "# Design of Digital Circuits\n\nAugust 23rd, 2019\n\nThis page intentionally left blank\n\n# Final Exam\n\nPage 1 of 24",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits",
                    "md": "# Design of Digital Circuits",
                    "rows": null,
                    "bBox": {
                        "x": 241.96,
                        "y": 43.11,
                        "w": 110.97,
                        "h": 10.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "August 23rd, 2019\n\nThis page intentionally left blank",
                    "md": "August 23rd, 2019\n\nThis page intentionally left blank",
                    "rows": null,
                    "bBox": {
                        "x": 225.58,
                        "y": 43.11,
                        "w": 297.78,
                        "h": 38.89
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Final Exam",
                    "md": "# Final Exam",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 784.67,
                        "w": 50.87,
                        "h": 10.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Page 1 of 24",
                    "md": "Page 1 of 24",
                    "rows": null,
                    "bBox": {
                        "x": 469.46,
                        "y": 784.67,
                        "w": 53.85,
                        "h": 10.0
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 3,
            "text": "Initials:                      Design of Digital Circuits           August 23rd, 2019\n1   Boolean Algebra        [12 points]\n(a) [6 points] Find the simplest sum-of-products representation of the following Boolean equation. Show\n   your work step-by-step.\n   F = ( ~~A</s> + B + C).(A + B +<s>C~~  ).C + A\n       F = B.C + A\n       Explanation:\n       F = (A.A + A.B + A.C + B.A + B.B + B.C + C.A + C.B + C.C).C + A\n       F = (0 + B.( ~~A</s> + A) + A.C + B + B.(<s>C~~   + C) + C.A + 0).C + A\n       F = (B + A.C + B + B + C.A).C + A\n       F = (B.C + A.C.C + B.C + C.A.C ) + A\n       F = (B.C + 0 + C.A) + A\n       F = B.C + A.(C + 1)\n       F = B.C + A\n(b) [6 points] Convert the following Boolean equation so that it contains only NAND operations. Show\n   your work step-by-step.\n   F =  ~~A</s> + (B.C +<s>A.C~~   )\n       F = (A.(B.C.A.C.A.C))\n       Explanation:\n       F = (( ~~A</s> + (B.C +<s>A.C~~   ))\n       F = (A.(B.C +  ~~A.C~~   ))\n       F = (A.(B.C +  ~~A.C~~   ))\n       F = (A.(B.C.A.C))\n       F = (A.(B.C.A.C.A.C))\nFinal Exam                                                              Page 2 of 24",
            "md": "# Design of Digital Circuits\n\nDate: August 23rd, 2019\n\n# 1 Boolean Algebra [12 points]\n\n# (a) [6 points]\n\nFind the simplest sum-of-products representation of the following Boolean equation. Show your work step-by-step.\n\nF = (~~A + B + C).(A + B +C~~).C + A\n\nF = B.C + A\n\nExplanation:\n\nF = (A.A + A.B + A.C + B.A + B.B + B.C + C.A + C.B + C.C).C + A\n\nF = (0 + B.(~~A + A) + A.C + B + B.(C~~ + C) + C.A + 0).C + A\n\nF = (B + A.C + B + B + C.A).C + A\n\nF = (B.C + A.C.C + B.C + C.A.C ) + A\n\nF = (B.C + 0 + C.A) + A\n\nF = B.C + A.(C + 1)\n\nF = B.C + A\n\n# (b) [6 points]\n\nConvert the following Boolean equation so that it contains only NAND operations. Show your work step-by-step.\n\nF = ~~A + (B.C +A.C~~)\n\nF = (A.(B.C.A.C.A.C))\n\nExplanation:\n\nF = ((~~A + (B.C +A.C~~))\n\nF = (A.(B.C + ~~A.C~~))\n\nF = (A.(B.C + ~~A.C~~))\n\nF = (A.(B.C.A.C))\n\nF = (A.(B.C.A.C.A.C))\n\nFinal Exam\n\nPage 2 of 24",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits",
                    "md": "# Design of Digital Circuits",
                    "rows": null,
                    "bBox": {
                        "x": 241.96,
                        "y": 43.11,
                        "w": 110.97,
                        "h": 10.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Date: August 23rd, 2019",
                    "md": "Date: August 23rd, 2019",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 43.11,
                        "w": 451.36,
                        "h": 38.51
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "1 Boolean Algebra [12 points]",
                    "md": "# 1 Boolean Algebra [12 points]",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 67.62,
                        "w": 201.95,
                        "h": 14.0
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "(a) [6 points]",
                    "md": "# (a) [6 points]",
                    "rows": null,
                    "bBox": {
                        "x": 0.0,
                        "y": 0.0,
                        "w": 595.28,
                        "h": 841.89
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Find the simplest sum-of-products representation of the following Boolean equation. Show your work step-by-step.\n\nF = (~~A + B + C).(A + B +C~~).C + A\n\nF = B.C + A\n\nExplanation:\n\nF = (A.A + A.B + A.C + B.A + B.B + B.C + C.A + C.B + C.C).C + A\n\nF = (0 + B.(~~A + A) + A.C + B + B.(C~~ + C) + C.A + 0).C + A\n\nF = (B + A.C + B + B + C.A).C + A\n\nF = (B.C + A.C.C + B.C + C.A.C ) + A\n\nF = (B.C + 0 + C.A) + A\n\nF = B.C + A.(C + 1)\n\nF = B.C + A",
                    "md": "Find the simplest sum-of-products representation of the following Boolean equation. Show your work step-by-step.\n\nF = (~~A + B + C).(A + B +C~~).C + A\n\nF = B.C + A\n\nExplanation:\n\nF = (A.A + A.B + A.C + B.A + B.B + B.C + C.A + C.B + C.C).C + A\n\nF = (0 + B.(~~A + A) + A.C + B + B.(C~~ + C) + C.A + 0).C + A\n\nF = (B + A.C + B + B + C.A).C + A\n\nF = (B.C + A.C.C + B.C + C.A.C ) + A\n\nF = (B.C + 0 + C.A) + A\n\nF = B.C + A.(C + 1)\n\nF = B.C + A",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 67.62,
                        "w": 358.82,
                        "h": 511.97
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "(b) [6 points]",
                    "md": "# (b) [6 points]",
                    "rows": null,
                    "bBox": {
                        "x": 0.0,
                        "y": 0.0,
                        "w": 595.28,
                        "h": 841.89
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Convert the following Boolean equation so that it contains only NAND operations. Show your work step-by-step.\n\nF = ~~A + (B.C +A.C~~)\n\nF = (A.(B.C.A.C.A.C))\n\nExplanation:\n\nF = ((~~A + (B.C +A.C~~))\n\nF = (A.(B.C + ~~A.C~~))\n\nF = (A.(B.C + ~~A.C~~))\n\nF = (A.(B.C.A.C))\n\nF = (A.(B.C.A.C.A.C))\n\nFinal Exam\n\nPage 2 of 24",
                    "md": "Convert the following Boolean equation so that it contains only NAND operations. Show your work step-by-step.\n\nF = ~~A + (B.C +A.C~~)\n\nF = (A.(B.C.A.C.A.C))\n\nExplanation:\n\nF = ((~~A + (B.C +A.C~~))\n\nF = (A.(B.C + ~~A.C~~))\n\nF = (A.(B.C + ~~A.C~~))\n\nF = (A.(B.C.A.C))\n\nF = (A.(B.C.A.C.A.C))\n\nFinal Exam\n\nPage 2 of 24",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 111.75,
                        "w": 451.32,
                        "h": 682.92
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 4,
            "text": "Initials:                             Design of Digital Circuits                  August 23rd, 2019\n2    Verilog     [20 points]\nPlease answer the following three questions about Verilog.\n(a) [5 points] Does the following code result in a single D Flip-Flop with a synchronous active-low reset?\n    Please explain your answer.\n 1    module   mem (input clk, input reset,      input [1:0] d, output      reg [1:0] q);\n 2    always   @ (posedge clk    or negedge reset)\n 3         begin\n 4           if (!reset)    q <= 0;\n 5           else q   <= d;\n 6         end\n 7    endmodule\n         No.\n         The code implements two    D Flip-Flops, not  one.   Each D Flip-Flop works with an\n         asynchronous  active-low reset signal.\n         Explanation:\n            \u2022 D and Q signals are two-bit-wide. Therefore, this code implements two D flip-flops.\n            \u2022 The reset input is included in the sensitivity list, therefore it is not synchronous.\n            \u2022 The code resets the output if the reset signal is low. Thus, the reset signal is active-\n              low.\n(b) [5 points] Does the following code result in a sequential circuit or a combinational circuit? Please\n    explain your answer.\n 1       module  Mask (input [1:0] data_in,      input mask, output     reg  [1:0] data_out);\n 2       always  @ (*)\n 3           begin\n 4                data_out[1]    = data_in[1];\n 5                if (mask)\n 6                     data_out[0]   =  0;\n 7           end\n 8       endmodule\n         Sequential circuit.\n         Explanation:\n         This code results in a sequential circuit, as all the left-hand side signals are not assigned in\n         every possible condition. For example, data_out[0]    is not assigned when mask signal\n         equals to zero.\nFinal Exam                                                                              Page 3 of 24",
            "md": "# Design of Digital Circuits\n\nAugust 23rd, 2019\n\n# 2 Verilog [20 points]\n\nPlease answer the following three questions about Verilog.\n\n# (a) [5 points] Does the following code result in a single D Flip-Flop with a synchronous active-low reset?\n\nPlease explain your answer.\n\nmodule   mem (input clk, input reset,      input [1:0] d, output      reg [1:0] q);\nalways   @ (posedge clk    or negedge reset)\nbegin\nif (!reset)    q <= 0;\nelse q   <= d;\nend\nendmodule\n\nNo.\n\nThe code implements two D Flip-Flops, not one. Each D Flip-Flop works with an asynchronous active-low reset signal.\n\nExplanation:\n\n- D and Q signals are two-bit-wide. Therefore, this code implements two D flip-flops.\n- The reset input is included in the sensitivity list, therefore it is not synchronous.\n- The code resets the output if the reset signal is low. Thus, the reset signal is active-low.\n\n# (b) [5 points] Does the following code result in a sequential circuit or a combinational circuit? Please explain your answer.\n\nmodule  Mask (input [1:0] data_in,      input mask, output     reg  [1:0] data_out);\nalways  @ (*)\nbegin\ndata_out[1]    = data_in[1];\nif (mask)\ndata_out[0]   =  0;\nend\nendmodule\n\nSequential circuit.\n\nExplanation:\n\nThis code results in a sequential circuit, as all the left-hand side signals are not assigned in every possible condition. For example, data_out[0] is not assigned when mask signal equals to zero.\n\nFinal Exam\n\nPage 3 of 24",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits",
                    "md": "# Design of Digital Circuits",
                    "rows": null,
                    "bBox": {
                        "x": 241.96,
                        "y": 43.11,
                        "w": 110.97,
                        "h": 10.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "August 23rd, 2019",
                    "md": "August 23rd, 2019",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 43.11,
                        "w": 451.36,
                        "h": 446.94
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "2 Verilog [20 points]",
                    "md": "# 2 Verilog [20 points]",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 67.62,
                        "w": 130.09,
                        "h": 411.47
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Please answer the following three questions about Verilog.",
                    "md": "Please answer the following three questions about Verilog.",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 67.62,
                        "w": 450.97,
                        "h": 370.55
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "(a) [5 points] Does the following code result in a single D Flip-Flop with a synchronous active-low reset?",
                    "md": "# (a) [5 points] Does the following code result in a single D Flip-Flop with a synchronous active-low reset?",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 117.73,
                        "w": 451.01,
                        "h": 394.24
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Please explain your answer.\n\nmodule   mem (input clk, input reset,      input [1:0] d, output      reg [1:0] q);\nalways   @ (posedge clk    or negedge reset)\nbegin\nif (!reset)    q <= 0;\nelse q   <= d;\nend\nendmodule\n\nNo.\n\nThe code implements two D Flip-Flops, not one. Each D Flip-Flop works with an asynchronous active-low reset signal.\n\nExplanation:\n\n- D and Q signals are two-bit-wide. Therefore, this code implements two D flip-flops.\n- The reset input is included in the sensitivity list, therefore it is not synchronous.\n- The code resets the output if the reset signal is low. Thus, the reset signal is active-low.",
                    "md": "Please explain your answer.\n\nmodule   mem (input clk, input reset,      input [1:0] d, output      reg [1:0] q);\nalways   @ (posedge clk    or negedge reset)\nbegin\nif (!reset)    q <= 0;\nelse q   <= d;\nend\nendmodule\n\nNo.\n\nThe code implements two D Flip-Flops, not one. Each D Flip-Flop works with an asynchronous active-low reset signal.\n\nExplanation:\n\n- D and Q signals are two-bit-wide. Therefore, this code implements two D flip-flops.\n- The reset input is included in the sensitivity list, therefore it is not synchronous.\n- The code resets the output if the reset signal is low. Thus, the reset signal is active-low.",
                    "rows": null,
                    "bBox": {
                        "x": 76.36,
                        "y": 129.68,
                        "w": 446.61,
                        "h": 521.1
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "(b) [5 points] Does the following code result in a sequential circuit or a combinational circuit? Please explain your answer.",
                    "md": "# (b) [5 points] Does the following code result in a sequential circuit or a combinational circuit? Please explain your answer.",
                    "rows": null,
                    "bBox": {
                        "x": 71.45,
                        "y": 129.68,
                        "w": 451.52,
                        "h": 382.28
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "module  Mask (input [1:0] data_in,      input mask, output     reg  [1:0] data_out);\nalways  @ (*)\nbegin\ndata_out[1]    = data_in[1];\nif (mask)\ndata_out[0]   =  0;\nend\nendmodule\n\nSequential circuit.\n\nExplanation:\n\nThis code results in a sequential circuit, as all the left-hand side signals are not assigned in every possible condition. For example, data_out[0] is not assigned when mask signal equals to zero.\n\nFinal Exam\n\nPage 3 of 24",
                    "md": "module  Mask (input [1:0] data_in,      input mask, output     reg  [1:0] data_out);\nalways  @ (*)\nbegin\ndata_out[1]    = data_in[1];\nif (mask)\ndata_out[0]   =  0;\nend\nendmodule\n\nSequential circuit.\n\nExplanation:\n\nThis code results in a sequential circuit, as all the left-hand side signals are not assigned in every possible condition. For example, data_out[0] is not assigned when mask signal equals to zero.\n\nFinal Exam\n\nPage 3 of 24",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 67.62,
                        "w": 451.32,
                        "h": 727.05
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 5,
            "text": "Initials:                           Design of Digital Circuits                August 23rd, 2019\n(c) [10 points] Is the following code syntactically correct? If not, please explain the mistake(s) and how\n    to fix it/them.\n 1      module  fulladd(input a, b, c, output     reg  s, c_out);\n 2           assign  s  =  a^b;\n 3           assign  c_out = (a & b)  | (b  & c) & (c  & a);\n 4      endmodule\n 5\n 6      module  top  (  input wire [5:0] instr,   input wire op,   output  z);\n 7\n 8        reg[1:0] r1,     r2;\n 9        wire [3:0] w1,    w2;\n10\n11        fulladd FA1      (.a(instr[0]),  .b(instr[1]), .c(instr[2]),\n12                                         .c_out(r1[1]),  .z(r1[0]));\n13        fulladd FA2      (.a(instr[3]),  .b(instr[4]), .c(instr[5]),\n14                                         .z(r2[0]), .c_out(r2[1]));\n15\n16        assign  z  =  r1 | op;\n17        assign  w1    =  r1 + 1;\n18        assign  w2    =  r2 << 1;\n19        assign  op    =  r1 ^ r2;\n20\n21      endmodule\n        The code is not syntactically correct.\n        Explanation:\n         \u2022  \u2018r1\u2019 and \u2018r2\u2019 have to be declared as wires.\n         \u2022  \u2018op\u2019 signal is connected to multiple drivers. It gets assigned from the input port and in\n            line 19.\n         \u2022 The module \u2018fulladd\u2019 does not have ports named \u2018z\u2019. Those need to be changed to \u2018s\u2019.\n         \u2022 The output signals \u2018s\u2019 and \u2018c_out\u2019 have to be declared as wires but not as regs, since\n            they are driven by assign statements.\nFinal Exam                                                                          Page 4 of 24",
            "md": "# Design of Digital Circuits\n\nDate: August 23rd, 2019\n\n# (c) [10 points]\n\nIs the following code syntactically correct? If not, please explain the mistake(s) and how to fix it/them.\n\n1      module  fulladd(input a, b, c, output     reg  s, c_out);\n2           assign  s  =  a^b;\n3           assign  c_out = (a & b)  | (b  & c) & (c  & a);\n4      endmodule\n5\n6      module  top  (  input wire [5:0] instr,   input wire op,   output  z);\n7\n8        reg[1:0] r1,     r2;\n9        wire [3:0] w1,    w2;\n10\n11        fulladd FA1      (.a(instr[0]),  .b(instr[1]), .c(instr[2]),\n12                                         .c_out(r1[1]),  .z(r1[0]));\n13        fulladd FA2      (.a(instr[3]),  .b(instr[4]), .c(instr[5]),\n14                                         .z(r2[0]), .c_out(r2[1]));\n15\n16        assign  z  =  r1 | op;\n17        assign  w1    =  r1 + 1;\n18        assign  w2    =  r2 << 1;\n19        assign  op    =  r1 ^ r2;\n20\n21      endmodule\n\nThe code is not syntactically correct.\n\n# Explanation:\n\n- \u2018r1\u2019 and \u2018r2\u2019 have to be declared as wires.\n- \u2018op\u2019 signal is connected to multiple drivers. It gets assigned from the input port and in line 19.\n- The module \u2018fulladd\u2019 does not have ports named \u2018z\u2019. Those need to be changed to \u2018s\u2019.\n- The output signals \u2018s\u2019 and \u2018c_out\u2019 have to be declared as wires but not as regs, since they are driven by assign statements.\n\nFinal Exam\n\nPage 4 of 24",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits",
                    "md": "# Design of Digital Circuits",
                    "rows": null,
                    "bBox": {
                        "x": 165.03,
                        "y": 43.11,
                        "w": 187.9,
                        "h": 79.83
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Date: August 23rd, 2019",
                    "md": "Date: August 23rd, 2019",
                    "rows": null,
                    "bBox": {
                        "x": 72.97,
                        "y": 43.11,
                        "w": 450.39,
                        "h": 277.08
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "(c) [10 points]",
                    "md": "# (c) [10 points]",
                    "rows": null,
                    "bBox": {
                        "x": 72.97,
                        "y": 106.97,
                        "w": 253.7,
                        "h": 103.63
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Is the following code syntactically correct? If not, please explain the mistake(s) and how to fix it/them.\n\n1      module  fulladd(input a, b, c, output     reg  s, c_out);\n2           assign  s  =  a^b;\n3           assign  c_out = (a & b)  | (b  & c) & (c  & a);\n4      endmodule\n5\n6      module  top  (  input wire [5:0] instr,   input wire op,   output  z);\n7\n8        reg[1:0] r1,     r2;\n9        wire [3:0] w1,    w2;\n10\n11        fulladd FA1      (.a(instr[0]),  .b(instr[1]), .c(instr[2]),\n12                                         .c_out(r1[1]),  .z(r1[0]));\n13        fulladd FA2      (.a(instr[3]),  .b(instr[4]), .c(instr[5]),\n14                                         .z(r2[0]), .c_out(r2[1]));\n15\n16        assign  z  =  r1 | op;\n17        assign  w1    =  r1 + 1;\n18        assign  w2    =  r2 << 1;\n19        assign  op    =  r1 ^ r2;\n20\n21      endmodule\n\nThe code is not syntactically correct.",
                    "md": "Is the following code syntactically correct? If not, please explain the mistake(s) and how to fix it/them.\n\n1      module  fulladd(input a, b, c, output     reg  s, c_out);\n2           assign  s  =  a^b;\n3           assign  c_out = (a & b)  | (b  & c) & (c  & a);\n4      endmodule\n5\n6      module  top  (  input wire [5:0] instr,   input wire op,   output  z);\n7\n8        reg[1:0] r1,     r2;\n9        wire [3:0] w1,    w2;\n10\n11        fulladd FA1      (.a(instr[0]),  .b(instr[1]), .c(instr[2]),\n12                                         .c_out(r1[1]),  .z(r1[0]));\n13        fulladd FA2      (.a(instr[3]),  .b(instr[4]), .c(instr[5]),\n14                                         .z(r2[0]), .c_out(r2[1]));\n15\n16        assign  z  =  r1 | op;\n17        assign  w1    =  r1 + 1;\n18        assign  w2    =  r2 << 1;\n19        assign  op    =  r1 ^ r2;\n20\n21      endmodule\n\nThe code is not syntactically correct.",
                    "rows": null,
                    "bBox": {
                        "x": 72.97,
                        "y": 83.96,
                        "w": 371.67,
                        "h": 388.48
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Explanation:",
                    "md": "# Explanation:",
                    "rows": null,
                    "bBox": {
                        "x": 111.39,
                        "y": 486.35,
                        "w": 64.0,
                        "h": 10.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "- \u2018r1\u2019 and \u2018r2\u2019 have to be declared as wires.\n- \u2018op\u2019 signal is connected to multiple drivers. It gets assigned from the input port and in line 19.\n- The module \u2018fulladd\u2019 does not have ports named \u2018z\u2019. Those need to be changed to \u2018s\u2019.\n- The output signals \u2018s\u2019 and \u2018c_out\u2019 have to be declared as wires but not as regs, since they are driven by assign statements.\n\nFinal Exam\n\nPage 4 of 24",
                    "md": "- \u2018r1\u2019 and \u2018r2\u2019 have to be declared as wires.\n- \u2018op\u2019 signal is connected to multiple drivers. It gets assigned from the input port and in line 19.\n- The module \u2018fulladd\u2019 does not have ports named \u2018z\u2019. Those need to be changed to \u2018s\u2019.\n- The output signals \u2018s\u2019 and \u2018c_out\u2019 have to be declared as wires but not as regs, since they are driven by assign statements.\n\nFinal Exam\n\nPage 4 of 24",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 102.98,
                        "w": 451.32,
                        "h": 691.68
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 6,
            "text": "Initials:                         Design of Digital Circuits               August 23rd, 2019\n3    Finite State Machines (FSM)               [30 points]\nYou are given two one-bit input signals (TA and TB) and one one-bit output signal (O) for the following\nmodular equation: 2N (TA)+N (TB) \u2261 2 (mod 4). In this modular equation, N (TA) and N (TB) represent\nthe total number of times the inputs TA and TB are high (i.e., logic 1) at each positive clock edge,\nrespectively. The one-bit output signal, O, is set to 1 when the modular equation is satisfied (i.e.,\n2N (TA) + N (TB) \u2261 2 (mod 4)), and 0 otherwise. An example that sets O = 1 at the end of the fourth\ncycle would be:\n   \u2022  (1st cycle) TA = 0 (N (TA) = 0), TB = 0 (N (TB) = 0), 2N (TA) + N (TB) \u2261 0 (mod 4) \u21d2 O = 0\n   \u2022  (2nd cycle) TA = 1 (N (TA) = 1), TB = 1 (N (TB) = 1), 2N (TA) + N (TB) \u2261 3 (mod 4) \u21d2 O = 0\n   \u2022  (3rd cycle) TA = 1 (N (TA) = 2), TB = 0 (N (TB) = 1), 2N (TA) + N (TB) \u2261 1 (mod 4) \u21d2 O = 0\n   \u2022  (4th cycle) TA = 0 (N (TA) = 2), TB = 1 (N (TB) = 2), 2N (TA) + N (TB) \u2261 2 (mod 4) \u21d2 O = 1\n(a) [10 points] You are given a partial Moore machine state transition diagram that corresponds to\n    the modular equation described above. However, the input labels of most of the transitions are\n    still missing in this diagram. Please label the transitions with the correct inputs so that the FSM\n    correctly implements the above specification.\n                reset\n                     0(mod4)                                       1(mod4)\n                       O:0                                           O:0\n                     3(mod4)                                       2(mod4)\n                       O:0                                           O:1\nFinal Exam                                                                      Page 5 of 24",
            "md": "# Design of Digital Circuits\n\nAugust 23rd, 2019\n\n# 3 Finite State Machines (FSM) [30 points]\n\nYou are given two one-bit input signals (TA and TB) and one one-bit output signal (O) for the following modular equation: 2N (TA) + N (TB) \u2261 2 (mod 4). In this modular equation, N (TA) and N (TB) represent the total number of times the inputs TA and TB are high (i.e., logic 1) at each positive clock edge, respectively. The one-bit output signal, O, is set to 1 when the modular equation is satisfied (i.e., 2N (TA) + N (TB) \u2261 2 (mod 4)), and 0 otherwise. An example that sets O = 1 at the end of the fourth cycle would be:\n\n- (1st cycle) TA = 0 (N (TA) = 0), TB = 0 (N (TB) = 0), 2N (TA) + N (TB) \u2261 0 (mod 4) \u21d2 O = 0\n- (2nd cycle) TA = 1 (N (TA) = 1), TB = 1 (N (TB) = 1), 2N (TA) + N (TB) \u2261 3 (mod 4) \u21d2 O = 0\n- (3rd cycle) TA = 1 (N (TA) = 2), TB = 0 (N (TB) = 1), 2N (TA) + N (TB) \u2261 1 (mod 4) \u21d2 O = 0\n- (4th cycle) TA = 0 (N (TA) = 2), TB = 1 (N (TB) = 2), 2N (TA) + N (TB) \u2261 2 (mod 4) \u21d2 O = 1\n\n# (a) [10 points]\n\nYou are given a partial Moore machine state transition diagram that corresponds to the modular equation described above. However, the input labels of most of the transitions are still missing in this diagram. Please label the transitions with the correct inputs so that the FSM correctly implements the above specification.\n\n| reset | 0(mod4) |     | 1(mod4) |     |\n| ----- | ------- | --- | ------- | --- |\n| O:0   | 3(mod4) | O:0 | 2(mod4) | O:1 |\n\nFinal Exam\n\nPage 5 of 24",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits",
                    "md": "# Design of Digital Circuits",
                    "rows": null,
                    "bBox": {
                        "x": 241.96,
                        "y": 43.11,
                        "w": 110.97,
                        "h": 10.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "August 23rd, 2019",
                    "md": "August 23rd, 2019",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 43.11,
                        "w": 451.36,
                        "h": 39.19
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "3 Finite State Machines (FSM) [30 points]",
                    "md": "# 3 Finite State Machines (FSM) [30 points]",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 68.3,
                        "w": 284.65,
                        "h": 14.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "You are given two one-bit input signals (TA and TB) and one one-bit output signal (O) for the following modular equation: 2N (TA) + N (TB) \u2261 2 (mod 4). In this modular equation, N (TA) and N (TB) represent the total number of times the inputs TA and TB are high (i.e., logic 1) at each positive clock edge, respectively. The one-bit output signal, O, is set to 1 when the modular equation is satisfied (i.e., 2N (TA) + N (TB) \u2261 2 (mod 4)), and 0 otherwise. An example that sets O = 1 at the end of the fourth cycle would be:\n\n- (1st cycle) TA = 0 (N (TA) = 0), TB = 0 (N (TB) = 0), 2N (TA) + N (TB) \u2261 0 (mod 4) \u21d2 O = 0\n- (2nd cycle) TA = 1 (N (TA) = 1), TB = 1 (N (TB) = 1), 2N (TA) + N (TB) \u2261 3 (mod 4) \u21d2 O = 0\n- (3rd cycle) TA = 1 (N (TA) = 2), TB = 0 (N (TB) = 1), 2N (TA) + N (TB) \u2261 1 (mod 4) \u21d2 O = 0\n- (4th cycle) TA = 0 (N (TA) = 2), TB = 1 (N (TB) = 2), 2N (TA) + N (TB) \u2261 2 (mod 4) \u21d2 O = 1",
                    "md": "You are given two one-bit input signals (TA and TB) and one one-bit output signal (O) for the following modular equation: 2N (TA) + N (TB) \u2261 2 (mod 4). In this modular equation, N (TA) and N (TB) represent the total number of times the inputs TA and TB are high (i.e., logic 1) at each positive clock edge, respectively. The one-bit output signal, O, is set to 1 when the modular equation is satisfied (i.e., 2N (TA) + N (TB) \u2261 2 (mod 4)), and 0 otherwise. An example that sets O = 1 at the end of the fourth cycle would be:\n\n- (1st cycle) TA = 0 (N (TA) = 0), TB = 0 (N (TB) = 0), 2N (TA) + N (TB) \u2261 0 (mod 4) \u21d2 O = 0\n- (2nd cycle) TA = 1 (N (TA) = 1), TB = 1 (N (TB) = 1), 2N (TA) + N (TB) \u2261 3 (mod 4) \u21d2 O = 0\n- (3rd cycle) TA = 1 (N (TA) = 2), TB = 0 (N (TB) = 1), 2N (TA) + N (TB) \u2261 1 (mod 4) \u21d2 O = 0\n- (4th cycle) TA = 0 (N (TA) = 2), TB = 1 (N (TB) = 2), 2N (TA) + N (TB) \u2261 2 (mod 4) \u21d2 O = 1",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 68.3,
                        "w": 451.6,
                        "h": 495.89
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "(a) [10 points]",
                    "md": "# (a) [10 points]",
                    "rows": null,
                    "bBox": {
                        "x": 0.0,
                        "y": 0.0,
                        "w": 595.28,
                        "h": 841.89
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "You are given a partial Moore machine state transition diagram that corresponds to the modular equation described above. However, the input labels of most of the transitions are still missing in this diagram. Please label the transitions with the correct inputs so that the FSM correctly implements the above specification.",
                    "md": "You are given a partial Moore machine state transition diagram that corresponds to the modular equation described above. However, the input labels of most of the transitions are still missing in this diagram. Please label the transitions with the correct inputs so that the FSM correctly implements the above specification.",
                    "rows": null,
                    "bBox": {
                        "x": 89.71,
                        "y": 261.88,
                        "w": 433.4,
                        "h": 33.91
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "| reset | 0(mod4) |     | 1(mod4) |     |\n| ----- | ------- | --- | ------- | --- |\n| O:0   | 3(mod4) | O:0 | 2(mod4) | O:1 |",
                    "rows": [
                        [
                            "reset",
                            "0(mod4)",
                            "",
                            "1(mod4)",
                            ""
                        ],
                        [
                            "O:0",
                            "3(mod4)",
                            "O:0",
                            "2(mod4)",
                            "O:1"
                        ]
                    ],
                    "bBox": {
                        "x": 72.0,
                        "y": 43.11,
                        "w": 451.6,
                        "h": 751.56
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Final Exam\n\nPage 5 of 24",
                    "md": "Final Exam\n\nPage 5 of 24",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 784.67,
                        "w": 451.32,
                        "h": 10.0
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 7,
            "text": "Initials:                                   Design of Digital Circuits       August 23rd, 2019\n        (b) [10 points] Describe the FSM with Boolean equations assuming that the states are encoded with\n    one-hot encoding. Assign state encodings while using the minimum possible number of bits to\n    represent the states. Please indicate the values you assign to each state.\n        State assignments: 0 (mod 4): 0001, 1 (mod 4): 0010, 2 (mod 4): 0100, 3 (mod 4): 1000\n        CS denotes current states, and NS denotes next states.\n        N S[0] = CS[0] TA TB + CS[1] TA TB + CS[2] TA TB + CS[3] TA TB\n        N S[1] = CS[1] TA TB + CS[2] TA TB + CS[3] TA TB + CS[0] TA TB\n        N S[2] = CS[2] TA TB + CS[3] TA TB + CS[0] TA TB + CS[1] TA TB\n        N S[3] = CS[3] TA TB + CS[0] TA TB + CS[1] TA TB + CS[2] TA TB\n        O[0] = CS[2]\n(c) [10 points] Describe the FSM with Boolean equations assuming that the states are encoded with\n    binary encoding  (i.e., fully encoding). Assign state encodings while using the minimum possible\n    number of bits to represent the states. Please indicate the values you assign to each state.\n        State assignments: 0 (mod 4): 00, 1 (mod 4): 01, 2 (mod 4): 10, 3 (mod 4): 11\n        CS denotes current states, and NS denotes next states.\n        N S[0] = CS[0] TB + CS[0] TB\n        N S[1] = CS[0] (CS[1] XOR TA XOR TB) + CS[0] (TA XOR CS[1])\n        O[0] = CS[1] CS[0]\nFinal Exam                                                                         Page 6 of 24",
            "md": "# Design of Digital Circuits\n\nAugust 23rd, 2019\n\n# (b) [10 points]\n\nDescribe the FSM with Boolean equations assuming that the states are encoded with one-hot encoding. Assign state encodings while using the minimum possible number of bits to represent the states. Please indicate the values you assign to each state.\n\nState assignments:\n\n| 0 (mod 4) | 0001 |\n| --------- | ---- |\n| 1 (mod 4) | 0010 |\n| 2 (mod 4) | 0100 |\n| 3 (mod 4) | 1000 |\n\nCS denotes current states, and NS denotes next states.\n\nN S[0] = CS[0] TA TB + CS[1] TA TB + CS[2] TA TB + CS[3] TA TB\n\nN S[1] = CS[1] TA TB + CS[2] TA TB + CS[3] TA TB + CS[0] TA TB\n\nN S[2] = CS[2] TA TB + CS[3] TA TB + CS[0] TA TB + CS[1] TA TB\n\nN S[3] = CS[3] TA TB + CS[0] TA TB + CS[1] TA TB + CS[2] TA TB\n\nO[0] = CS[2]\n\n# (c) [10 points]\n\nDescribe the FSM with Boolean equations assuming that the states are encoded with binary encoding (i.e., fully encoding). Assign state encodings while using the minimum possible number of bits to represent the states. Please indicate the values you assign to each state.\n\nState assignments:\n\n| 0 (mod 4) | 00 |\n| --------- | -- |\n| 1 (mod 4) | 01 |\n| 2 (mod 4) | 10 |\n| 3 (mod 4) | 11 |\n\nCS denotes current states, and NS denotes next states.\n\nN S[0] = CS[0] TB + CS[0] TB\n\nN S[1] = CS[0] (CS[1] XOR TA XOR TB) + CS[0] (TA XOR CS[1])\n\nO[0] = CS[1] CS[0]\n\nFinal Exam\n\nPage 6 of 24",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits",
                    "md": "# Design of Digital Circuits",
                    "rows": null,
                    "bBox": {
                        "x": 241.96,
                        "y": 43.11,
                        "w": 110.97,
                        "h": 10.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "August 23rd, 2019",
                    "md": "August 23rd, 2019",
                    "rows": null,
                    "bBox": {
                        "x": 443.23,
                        "y": 43.11,
                        "w": 80.13,
                        "h": 10.0
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "(b) [10 points]",
                    "md": "# (b) [10 points]",
                    "rows": null,
                    "bBox": {
                        "x": 0.0,
                        "y": 0.0,
                        "w": 595.28,
                        "h": 841.89
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Describe the FSM with Boolean equations assuming that the states are encoded with one-hot encoding. Assign state encodings while using the minimum possible number of bits to represent the states. Please indicate the values you assign to each state.\n\nState assignments:",
                    "md": "Describe the FSM with Boolean equations assuming that the states are encoded with one-hot encoding. Assign state encodings while using the minimum possible number of bits to represent the states. Please indicate the values you assign to each state.\n\nState assignments:",
                    "rows": null,
                    "bBox": {
                        "x": 89.71,
                        "y": 83.96,
                        "w": 433.71,
                        "h": 357.51
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "| 0 (mod 4) | 0001 |\n| --------- | ---- |\n| 1 (mod 4) | 0010 |\n| 2 (mod 4) | 0100 |\n| 3 (mod 4) | 1000 |",
                    "rows": [
                        [
                            "0 (mod 4)",
                            "0001"
                        ],
                        [
                            "1 (mod 4)",
                            "0010"
                        ],
                        [
                            "2 (mod 4)",
                            "0100"
                        ],
                        [
                            "3 (mod 4)",
                            "1000"
                        ]
                    ],
                    "bBox": {
                        "x": 111.39,
                        "y": 213.35,
                        "w": 390.12,
                        "h": 343.34
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "CS denotes current states, and NS denotes next states.\n\nN S[0] = CS[0] TA TB + CS[1] TA TB + CS[2] TA TB + CS[3] TA TB\n\nN S[1] = CS[1] TA TB + CS[2] TA TB + CS[3] TA TB + CS[0] TA TB\n\nN S[2] = CS[2] TA TB + CS[3] TA TB + CS[0] TA TB + CS[1] TA TB\n\nN S[3] = CS[3] TA TB + CS[0] TA TB + CS[1] TA TB + CS[2] TA TB\n\nO[0] = CS[2]",
                    "md": "CS denotes current states, and NS denotes next states.\n\nN S[0] = CS[0] TA TB + CS[1] TA TB + CS[2] TA TB + CS[3] TA TB\n\nN S[1] = CS[1] TA TB + CS[2] TA TB + CS[3] TA TB + CS[0] TA TB\n\nN S[2] = CS[2] TA TB + CS[3] TA TB + CS[0] TA TB + CS[1] TA TB\n\nN S[3] = CS[3] TA TB + CS[0] TA TB + CS[1] TA TB + CS[2] TA TB\n\nO[0] = CS[2]",
                    "rows": null,
                    "bBox": {
                        "x": 111.39,
                        "y": 225.3,
                        "w": 308.53,
                        "h": 343.34
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "(c) [10 points]",
                    "md": "# (c) [10 points]",
                    "rows": null,
                    "bBox": {
                        "x": 0.0,
                        "y": 0.0,
                        "w": 595.28,
                        "h": 841.89
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Describe the FSM with Boolean equations assuming that the states are encoded with binary encoding (i.e., fully encoding). Assign state encodings while using the minimum possible number of bits to represent the states. Please indicate the values you assign to each state.\n\nState assignments:",
                    "md": "Describe the FSM with Boolean equations assuming that the states are encoded with binary encoding (i.e., fully encoding). Assign state encodings while using the minimum possible number of bits to represent the states. Please indicate the values you assign to each state.\n\nState assignments:",
                    "rows": null,
                    "bBox": {
                        "x": 89.71,
                        "y": 95.91,
                        "w": 433.43,
                        "h": 345.56
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "| 0 (mod 4) | 00 |\n| --------- | -- |\n| 1 (mod 4) | 01 |\n| 2 (mod 4) | 10 |\n| 3 (mod 4) | 11 |",
                    "rows": [
                        [
                            "0 (mod 4)",
                            "00"
                        ],
                        [
                            "1 (mod 4)",
                            "01"
                        ],
                        [
                            "2 (mod 4)",
                            "10"
                        ],
                        [
                            "3 (mod 4)",
                            "11"
                        ]
                    ],
                    "bBox": {
                        "x": 71.45,
                        "y": 43.11,
                        "w": 451.91,
                        "h": 513.58
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "CS denotes current states, and NS denotes next states.\n\nN S[0] = CS[0] TB + CS[0] TB\n\nN S[1] = CS[0] (CS[1] XOR TA XOR TB) + CS[0] (TA XOR CS[1])\n\nO[0] = CS[1] CS[0]\n\nFinal Exam\n\nPage 6 of 24",
                    "md": "CS denotes current states, and NS denotes next states.\n\nN S[0] = CS[0] TB + CS[0] TB\n\nN S[1] = CS[0] (CS[1] XOR TA XOR TB) + CS[0] (TA XOR CS[1])\n\nO[0] = CS[1] CS[0]\n\nFinal Exam\n\nPage 6 of 24",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 225.3,
                        "w": 451.32,
                        "h": 569.36
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 8,
            "text": "Initials:                             Design of Digital Circuits                     August 23rd, 2019\n4    ISA vs. Microarchitecture                  [20 points]\nA new CPU has two comprehensive user manuals available for purchase as shown in Table 1.\n                       Manual Title            Cost                     Description\n                       the_isa.pdf        CHF 1 million          describes the ISA in detail\n                the_microarchitecture.pdf CHF 10 million  describes the microarchitecture in detail\n                                        Table 1: Manual Costs\nUnfortunately, the manuals are extremely expensive, and you can only afford one of the two.     If both\nmanuals might be useful, you would prefer the cheaper one.\nFor each of the following questions that you would like to answer, decide which manual is more likely to\nhelp. Note: we will subtract 1 point for each incorrect answer. For an unanswered question, you will\nget +0 points.\n 1. [2 points]  The latency of a branch predictor misprediction.\n                     1. the_isa.pdf                       2. the_microarchitecture.pdf\n 2. [2 points]  The size of a physical memory page.\n                     1. the_isa.pdf                       2. the_microarchitecture.pdf\n 3. [2 points]  The memory-mapped locations of exception vectors.\n                      1. the_isa.pdf              2. the_microarchitecture.pdf\n 4. [2 points]  The function of each bit in a programmable branch-predictor configuration register.\n                      1. the_isa.pdf              2. the_microarchitecture.pdf\n 5. [2 points]  The bit-width of the interface between the CPU and the L1 cache.\n                     1. the_isa.pdf                       2. the_microarchitecture.pdf\n 6. [2 points]  The number of pipeline stages in the CPU.\n                     1. the_isa.pdf                       2. the_microarchitecture.pdf\n 7. [2 points]  The order in which loads and stores are executed by a multi-core CPU.\n                      1. the_isa.pdf              2. the_microarchitecture.pdf\n 8. [2 points]  The memory addressing modes available for arithmetic operations.\n                      1. the_isa.pdf              2. the_microarchitecture.pdf\n 9. [2 points]  The program counter width.\n                      1. the_isa.pdf              2. the_microarchitecture.pdf\n10. [2 points]  The number of cache sets at each level of the cache hierarchy.\n                     1. the_isa.pdf               2. the_microarchitecture.pdf\nFinal Exam                                                                                 Page 7 of 24",
            "md": "# Design of Digital Circuits\n\nAugust 23rd, 2019\n\n# 4 ISA vs. Microarchitecture\n\n[20 points]\n\nA new CPU has two comprehensive user manuals available for purchase as shown in Table 1.\n\n| Manual Title               | Cost           | Description                               |\n| -------------------------- | -------------- | ----------------------------------------- |\n| the\\_isa.pdf               | CHF 1 million  | describes the ISA in detail               |\n| the\\_microarchitecture.pdf | CHF 10 million | describes the microarchitecture in detail |\n\nTable 1: Manual Costs\n\nUnfortunately, the manuals are extremely expensive, and you can only afford one of the two. If both manuals might be useful, you would prefer the cheaper one.\n\nFor each of the following questions that you would like to answer, decide which manual is more likely to help. Note: we will subtract 1 point for each incorrect answer. For an unanswered question, you will get +0 points.\n\n1. [2 points] The latency of a branch predictor misprediction.\n2. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The size of a physical memory page.\n3. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The memory-mapped locations of exception vectors.\n4. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The function of each bit in a programmable branch-predictor configuration register.\n5. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The bit-width of the interface between the CPU and the L1 cache.\n6. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The number of pipeline stages in the CPU.\n7. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The order in which loads and stores are executed by a multi-core CPU.\n8. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The memory addressing modes available for arithmetic operations.\n9. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The program counter width.\n10. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The number of cache sets at each level of the cache hierarchy.\n\nFinal Exam\n\nPage 7 of 24",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits",
                    "md": "# Design of Digital Circuits",
                    "rows": null,
                    "bBox": {
                        "x": 241.96,
                        "y": 43.11,
                        "w": 110.97,
                        "h": 10.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "August 23rd, 2019",
                    "md": "August 23rd, 2019",
                    "rows": null,
                    "bBox": {
                        "x": 443.23,
                        "y": 43.11,
                        "w": 80.13,
                        "h": 10.0
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "4 ISA vs. Microarchitecture",
                    "md": "# 4 ISA vs. Microarchitecture",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 67.62,
                        "w": 204.35,
                        "h": 14.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "[20 points]\n\nA new CPU has two comprehensive user manuals available for purchase as shown in Table 1.",
                    "md": "[20 points]\n\nA new CPU has two comprehensive user manuals available for purchase as shown in Table 1.",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 70.85,
                        "w": 406.22,
                        "h": 38.94
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "| Manual Title               | Cost           | Description                               |\n| -------------------------- | -------------- | ----------------------------------------- |\n| the\\_isa.pdf               | CHF 1 million  | describes the ISA in detail               |\n| the\\_microarchitecture.pdf | CHF 10 million | describes the microarchitecture in detail |",
                    "rows": [
                        [
                            "Manual Title",
                            "Cost",
                            "Description"
                        ],
                        [
                            "the_isa.pdf",
                            "CHF 1 million",
                            "describes the ISA in detail"
                        ],
                        [
                            "the_microarchitecture.pdf",
                            "CHF 10 million",
                            "describes the microarchitecture in detail"
                        ]
                    ],
                    "bBox": {
                        "x": 89.2,
                        "y": 122.46,
                        "w": 416.53,
                        "h": 519.29
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Table 1: Manual Costs\n\nUnfortunately, the manuals are extremely expensive, and you can only afford one of the two. If both manuals might be useful, you would prefer the cheaper one.\n\nFor each of the following questions that you would like to answer, decide which manual is more likely to help. Note: we will subtract 1 point for each incorrect answer. For an unanswered question, you will get +0 points.\n\n1. [2 points] The latency of a branch predictor misprediction.\n2. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The size of a physical memory page.\n3. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The memory-mapped locations of exception vectors.\n4. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The function of each bit in a programmable branch-predictor configuration register.\n5. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The bit-width of the interface between the CPU and the L1 cache.\n6. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The number of pipeline stages in the CPU.\n7. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The order in which loads and stores are executed by a multi-core CPU.\n8. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The memory addressing modes available for arithmetic operations.\n9. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The program counter width.\n10. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The number of cache sets at each level of the cache hierarchy.\n\nFinal Exam\n\nPage 7 of 24",
                    "md": "Table 1: Manual Costs\n\nUnfortunately, the manuals are extremely expensive, and you can only afford one of the two. If both manuals might be useful, you would prefer the cheaper one.\n\nFor each of the following questions that you would like to answer, decide which manual is more likely to help. Note: we will subtract 1 point for each incorrect answer. For an unanswered question, you will get +0 points.\n\n1. [2 points] The latency of a branch predictor misprediction.\n2. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The size of a physical memory page.\n3. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The memory-mapped locations of exception vectors.\n4. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The function of each bit in a programmable branch-predictor configuration register.\n5. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The bit-width of the interface between the CPU and the L1 cache.\n6. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The number of pipeline stages in the CPU.\n7. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The order in which loads and stores are executed by a multi-core CPU.\n8. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The memory addressing modes available for arithmetic operations.\n9. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The program counter width.\n10. - 1. the_isa.pdf\n- 2. the_microarchitecture.pdf\n\n[2 points] The number of cache sets at each level of the cache hierarchy.\n\nFinal Exam\n\nPage 7 of 24",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 67.62,
                        "w": 451.42,
                        "h": 727.05
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 9,
            "text": "Initials:                           Design of Digital Circuits                August 23rd, 2019\n5    Performance Evaluation              [20 points]\nYou are the leading engineer of a new processor. Both the design of the processor and the compiler for it\nare already done. Now, you need to decide if you will send the processor to manufacturing at its current\nstage or if you will delay the production to introduce last-minute improvements to the design. To make\nthe decision, you meet with your team to brainstorm about how to improve the design. Together, after\nprofiling the target applications for the processor, you come up with two options:\n   \u2022 Keep the current project. For version A of the processor, the clock frequency is 600 MHz, and\n     the following measurements are obtained:\n                     Instruction Class    CPI    Frequency of Occurrence\n                             A             2               40%\n                             B             3               25%\n                             C             3               25%\n                             D             7               10%\n   \u2022 Include optimizations to the design.    For version B of the processor, the clock frequency is\n     700 MHz.   The ISA for processor B includes three new types of instructions. Those three new\n     types of instructions increase the total number of executed instructions for processor B by 50%, in\n     comparison to processor A. The following measurements are obtained:\n                     Instruction Class    CPI    Frequency of Occurrence\n                             A             2               15%\n                             B             2               15%\n                             C             4               10%\n                             D             6               10%\n                             E             1               10%\n                             F             2               20%\n                             G             2               20%\n(a) [7 points] What is the CPI of each version? Show your work.\n    CP IA:\n        3\n    CP IB:\n        2.5\n        CP IA =   2 \u00d7  0.4 + 3 \u00d7   0.25 + 3 \u00d7   0.25 + 7 \u00d7  0.1 =  3\n        CP IB  = 2 \u00d7 0.15 + 2 \u00d7 0.15 + 4 \u00d7 0.1 + 6 \u00d7 0.1 + 1 \u00d7 0.1 + 2 \u00d7 0.2 + 2 \u00d7 0.2 = 2.5\n(b) [6 points] What are the MIPS (Million Instructions Per Second) of each version? Show your work.\nFinal Exam                                                                          Page 8 of 24",
            "md": "# Design of Digital Circuits\n\nAugust 23rd, 2019\n\n# 5 Performance Evaluation [20 points]\n\nYou are the leading engineer of a new processor. Both the design of the processor and the compiler for it are already done. Now, you need to decide if you will send the processor to manufacturing at its current stage or if you will delay the production to introduce last-minute improvements to the design. To make the decision, you meet with your team to brainstorm about how to improve the design. Together, after profiling the target applications for the processor, you come up with two options:\n\n- Keep the current project. For version A of the processor, the clock frequency is 600 MHz, and the following measurements are obtained:\n\n| Instruction Class | CPI | Frequency of Occurrence |\n| ----------------- | --- | ----------------------- |\n| A                 | 2   | 40%                     |\n| B                 | 3   | 25%                     |\n| C                 | 3   | 25%                     |\n| D                 | 7   | 10%                     |\n\n- Include optimizations to the design. For version B of the processor, the clock frequency is 700 MHz. The ISA for processor B includes three new types of instructions. Those three new types of instructions increase the total number of executed instructions for processor B by 50%, in comparison to processor A. The following measurements are obtained:\n\n| Instruction Class | CPI | Frequency of Occurrence |\n| ----------------- | --- | ----------------------- |\n| A                 | 2   | 15%                     |\n| B                 | 2   | 15%                     |\n| C                 | 4   | 10%                     |\n| D                 | 6   | 10%                     |\n| E                 | 1   | 10%                     |\n| F                 | 2   | 20%                     |\n| G                 | 2   | 20%                     |\n\n# (a) [7 points] What is the CPI of each version? Show your work.\n\nCP IA:\n\n3\n\nCP IB:\n\n2.5\n\nCP IA = 2 \u00d7 0.4 + 3 \u00d7 0.25 + 3 \u00d7 0.25 + 7 \u00d7 0.1 = 3\n\nCP IB = 2 \u00d7 0.15 + 2 \u00d7 0.15 + 4 \u00d7 0.1 + 6 \u00d7 0.1 + 1 \u00d7 0.1 + 2 \u00d7 0.2 + 2 \u00d7 0.2 = 2.5\n\n# (b) [6 points] What are the MIPS (Million Instructions Per Second) of each version? Show your work.\n\nFinal Exam Page 8 of 24",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits",
                    "md": "# Design of Digital Circuits",
                    "rows": null,
                    "bBox": {
                        "x": 208.76,
                        "y": 43.11,
                        "w": 144.17,
                        "h": 446.54
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "August 23rd, 2019",
                    "md": "August 23rd, 2019",
                    "rows": null,
                    "bBox": {
                        "x": 111.39,
                        "y": 43.11,
                        "w": 411.97,
                        "h": 624.3
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "5 Performance Evaluation [20 points]",
                    "md": "# 5 Performance Evaluation [20 points]",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 67.62,
                        "w": 247.55,
                        "h": 422.03
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "You are the leading engineer of a new processor. Both the design of the processor and the compiler for it are already done. Now, you need to decide if you will send the processor to manufacturing at its current stage or if you will delay the production to introduce last-minute improvements to the design. To make the decision, you meet with your team to brainstorm about how to improve the design. Together, after profiling the target applications for the processor, you come up with two options:\n\n- Keep the current project. For version A of the processor, the clock frequency is 600 MHz, and the following measurements are obtained:",
                    "md": "You are the leading engineer of a new processor. Both the design of the processor and the compiler for it are already done. Now, you need to decide if you will send the processor to manufacturing at its current stage or if you will delay the production to introduce last-minute improvements to the design. To make the decision, you meet with your team to brainstorm about how to improve the design. Together, after profiling the target applications for the processor, you come up with two options:\n\n- Keep the current project. For version A of the processor, the clock frequency is 600 MHz, and the following measurements are obtained:",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 99.8,
                        "w": 451.63,
                        "h": 389.85
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "| Instruction Class | CPI | Frequency of Occurrence |\n| ----------------- | --- | ----------------------- |\n| A                 | 2   | 40%                     |\n| B                 | 3   | 25%                     |\n| C                 | 3   | 25%                     |\n| D                 | 7   | 10%                     |",
                    "rows": [
                        [
                            "Instruction Class",
                            "CPI",
                            "Frequency of Occurrence"
                        ],
                        [
                            "A",
                            "2",
                            "40%"
                        ],
                        [
                            "B",
                            "3",
                            "25%"
                        ],
                        [
                            "C",
                            "3",
                            "25%"
                        ],
                        [
                            "D",
                            "7",
                            "10%"
                        ]
                    ],
                    "bBox": {
                        "x": 71.45,
                        "y": 43.11,
                        "w": 452.19,
                        "h": 751.56
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "- Include optimizations to the design. For version B of the processor, the clock frequency is 700 MHz. The ISA for processor B includes three new types of instructions. Those three new types of instructions increase the total number of executed instructions for processor B by 50%, in comparison to processor A. The following measurements are obtained:",
                    "md": "- Include optimizations to the design. For version B of the processor, the clock frequency is 700 MHz. The ISA for processor B includes three new types of instructions. Those three new types of instructions increase the total number of executed instructions for processor B by 50%, in comparison to processor A. The following measurements are obtained:",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 67.62,
                        "w": 451.58,
                        "h": 422.03
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "| Instruction Class | CPI | Frequency of Occurrence |\n| ----------------- | --- | ----------------------- |\n| A                 | 2   | 15%                     |\n| B                 | 2   | 15%                     |\n| C                 | 4   | 10%                     |\n| D                 | 6   | 10%                     |\n| E                 | 1   | 10%                     |\n| F                 | 2   | 20%                     |\n| G                 | 2   | 20%                     |",
                    "rows": [
                        [
                            "Instruction Class",
                            "CPI",
                            "Frequency of Occurrence"
                        ],
                        [
                            "A",
                            "2",
                            "15%"
                        ],
                        [
                            "B",
                            "2",
                            "15%"
                        ],
                        [
                            "C",
                            "4",
                            "10%"
                        ],
                        [
                            "D",
                            "6",
                            "10%"
                        ],
                        [
                            "E",
                            "1",
                            "10%"
                        ],
                        [
                            "F",
                            "2",
                            "20%"
                        ],
                        [
                            "G",
                            "2",
                            "20%"
                        ]
                    ],
                    "bBox": {
                        "x": 71.45,
                        "y": 43.11,
                        "w": 452.19,
                        "h": 751.56
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "(a) [7 points] What is the CPI of each version? Show your work.",
                    "md": "# (a) [7 points] What is the CPI of each version? Show your work.",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 203.35,
                        "w": 283.88,
                        "h": 314.37
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "CP IA:\n\n3\n\nCP IB:\n\n2.5\n\nCP IA = 2 \u00d7 0.4 + 3 \u00d7 0.25 + 3 \u00d7 0.25 + 7 \u00d7 0.1 = 3\n\nCP IB = 2 \u00d7 0.15 + 2 \u00d7 0.15 + 4 \u00d7 0.1 + 6 \u00d7 0.1 + 1 \u00d7 0.1 + 2 \u00d7 0.2 + 2 \u00d7 0.2 = 2.5",
                    "md": "CP IA:\n\n3\n\nCP IB:\n\n2.5\n\nCP IA = 2 \u00d7 0.4 + 3 \u00d7 0.25 + 3 \u00d7 0.25 + 7 \u00d7 0.1 = 3\n\nCP IB = 2 \u00d7 0.15 + 2 \u00d7 0.15 + 4 \u00d7 0.1 + 6 \u00d7 0.1 + 1 \u00d7 0.1 + 2 \u00d7 0.2 + 2 \u00d7 0.2 = 2.5",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 67.62,
                        "w": 429.61,
                        "h": 611.75
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "(b) [6 points] What are the MIPS (Million Instructions Per Second) of each version? Show your work.",
                    "md": "# (b) [6 points] What are the MIPS (Million Instructions Per Second) of each version? Show your work.",
                    "rows": null,
                    "bBox": {
                        "x": 71.45,
                        "y": 220.31,
                        "w": 447.39,
                        "h": 522.73
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Final Exam Page 8 of 24",
                    "md": "Final Exam Page 8 of 24",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 220.31,
                        "w": 451.32,
                        "h": 574.36
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 10,
            "text": "Initials:                              Design of Digital Circuits                    August 23rd, 2019\n    M IP SA:\n         200\n    M IP SB:\n         280\n         M IP SA =    600M Hz = 200\n                        3\u2217106\n         M IP SB =    700M Hz = 280\n                       2.5\u2217106\n(c) [7 points] Considering your team is aiming to release to the market the processor that gives better\n    performance when executing the target application, which processor version will you choose as the\n    final design? Show your work.\n         Processor A.\n         Explanation:\n         We calculate the execution time for each processor, T ime = Ninstr. \u00d7 CP I \u00d7 clockf 1\n         Since the compiler for processor B generates 50% more instructions than the      requency\n                                                                                      compiler for\n         processor A, the total execution time for processor B is larger than the total execution\n         time for processor A.\n         T imeA = Ninstr. \u00d7     3 \u00d7     1  6\n                                     600\u221710\n         T imeB =    1.5Ninstr. \u00d7  2.5 \u00d7     1  6\n                                          700\u221710\nFinal Exam                                                                                 Page 9 of 24",
            "md": "# Design of Digital Circuits\n\nAugust 23rd, 2019\n\n| Initials: | M IP SA:  | 200           |\n| --------- | --------- | ------------- |\n|           | M IP SB:  | 280           |\n|           | M IP SA = | 600M Hz = 200 |\n|           |           | 3\u2217106         |\n|           | M IP SB = | 700M Hz = 280 |\n|           |           | 2.5\u2217106       |\n\n# (c) [7 points]\n\nConsidering your team is aiming to release to the market the processor that gives better performance when executing the target application, which processor version will you choose as the final design? Show your work.\n\nProcessor A.\n\nExplanation:\n\nWe calculate the execution time for each processor, T ime = Ninstr. \u00d7 CP I \u00d7 clockf requency\n\nSince the compiler for processor B generates 50% more instructions than the compiler for processor A, the total execution time for processor B is larger than the total execution time for processor A.\n\nT imeA = Ninstr. \u00d7 3 \u00d7 106 / (600 \u00d7 106)\n\nT imeB = 1.5Ninstr. \u00d7 2.5 \u00d7 106 / (700 \u00d7 106)\n\nFinal Exam\n\nPage 9 of 24",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits",
                    "md": "# Design of Digital Circuits",
                    "rows": null,
                    "bBox": {
                        "x": 241.96,
                        "y": 43.11,
                        "w": 110.97,
                        "h": 10.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "August 23rd, 2019",
                    "md": "August 23rd, 2019",
                    "rows": null,
                    "bBox": {
                        "x": 246.43,
                        "y": 43.11,
                        "w": 276.93,
                        "h": 597.6
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "| Initials: | M IP SA:  | 200           |\n| --------- | --------- | ------------- |\n|           | M IP SB:  | 280           |\n|           | M IP SA = | 600M Hz = 200 |\n|           |           | 3\u2217106         |\n|           | M IP SB = | 700M Hz = 280 |\n|           |           | 2.5\u2217106       |",
                    "rows": [
                        [
                            "Initials:",
                            "M IP SA:",
                            "200"
                        ],
                        [
                            "",
                            "M IP SB:",
                            "280"
                        ],
                        [
                            "",
                            "M IP SA =",
                            "600M Hz = 200"
                        ],
                        [
                            "",
                            "",
                            "3\u2217106"
                        ],
                        [
                            "",
                            "M IP SB =",
                            "700M Hz = 280"
                        ],
                        [
                            "",
                            "",
                            "2.5\u2217106"
                        ]
                    ],
                    "bBox": {
                        "x": 72.0,
                        "y": 43.11,
                        "w": 451.44,
                        "h": 751.56
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "(c) [7 points]",
                    "md": "# (c) [7 points]",
                    "rows": null,
                    "bBox": {
                        "x": 0.0,
                        "y": 0.0,
                        "w": 595.28,
                        "h": 841.89
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Considering your team is aiming to release to the market the processor that gives better performance when executing the target application, which processor version will you choose as the final design? Show your work.\n\nProcessor A.\n\nExplanation:\n\nWe calculate the execution time for each processor, T ime = Ninstr. \u00d7 CP I \u00d7 clockf requency\n\nSince the compiler for processor B generates 50% more instructions than the compiler for processor A, the total execution time for processor B is larger than the total execution time for processor A.\n\nT imeA = Ninstr. \u00d7 3 \u00d7 106 / (600 \u00d7 106)\n\nT imeB = 1.5Ninstr. \u00d7 2.5 \u00d7 106 / (700 \u00d7 106)\n\nFinal Exam\n\nPage 9 of 24",
                    "md": "Considering your team is aiming to release to the market the processor that gives better performance when executing the target application, which processor version will you choose as the final design? Show your work.\n\nProcessor A.\n\nExplanation:\n\nWe calculate the execution time for each processor, T ime = Ninstr. \u00d7 CP I \u00d7 clockf requency\n\nSince the compiler for processor B generates 50% more instructions than the compiler for processor A, the total execution time for processor B is larger than the total execution time for processor A.\n\nT imeA = Ninstr. \u00d7 3 \u00d7 106 / (600 \u00d7 106)\n\nT imeB = 1.5Ninstr. \u00d7 2.5 \u00d7 106 / (700 \u00d7 106)\n\nFinal Exam\n\nPage 9 of 24",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 426.96,
                        "w": 451.44,
                        "h": 367.71
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 11,
            "text": "Initials:                             Design of Digital Circuits                  August 23rd, 2019\n6    Pipeline (Reverse Engineering)                   [40 points]\nThe following piece of code runs on a pipelined microprocessor as shown in the table (F: Fetch, D:\nDecode, E: Execute, M: Memory, W: Write back). Instructions are in the form \u201cInstruction Destination,\nSource1, Source2.\u201d For example, \u201cADD A, B, C\u201d means A \u2190 B + C.\n     Cycles            1    2   3    4    5    6    7    8    9    10   11   12   13    14   15   16   17  18\n 0   MUL R5, R6, R7    F   D    E1   E2   E3   E4   M    W\n 1   ADD R4, R6, R7        F    D    E1   E2   E3   -    M    W\n 2   ADD R5, R5, R6             F    D    -    -    E1   E2   E3   M    W\n 3   MUL R4, R7, R7                  F    -    -    D    E1   E2   E3   E4   M    W\n 4   ADD R6, R7, R5                                 F    D    -    E1   E2   E3   M    W\n 5   ADD R3, R0, R6                                      F    -    D    -    -     E1  E2   E3    M    W\n 6   ADD R7, R1, R4                                                F    -    -     D   E1   E2    E3   M   W\nUse this information to reverse engineer the architecture of this microprocessor to answer the following\nquestions. Answer the questions as precise as possible with the provided information. If the provided\ninformation is not sufficient to answer a question, answer \u201cUnknown\u201d and explain your reasoning clearly.\n(a) [5 points] How many cycles does it take for an adder and for a multiplier to calculate a result?\n         3 cycles for adder (E1, E2, E3) and 4 cycles for multiplier (E1, E2, E3, E4).\n(b) [5 points] What is the minimum number of register file read/write ports that this architecture im-\n    plements? Explain.\n         The register file has two read ports and one write port.\n(c) [5 points] Can we reduce the execution time of this code by enabling more read/write ports in the\n    register file? Explain.\n         It is not possible to reduce stall cycles of the given code by enabling more register file\n         ports.\n(d) [5 points] Does this architecture implement any data forwarding? If so, how is data forwarding done\n    between pipeline stages? Explain.\n         There is data forwarding from the M stage to E1, as we observe that the instruction 2\n         starts using R5 at the clk cycle 7, which is one clk cycle after the instruction 0 finishes\n         calculating its result in the execution unit.\n         Similarly, as another proof of this data forwarding, we observe that the instruction 4\n         starts using R5 at the clk cycle 10, which is one clk cycle after the instruction 2 finishes\n         calculating its result in the execution unit.\n         Any other data forwarding is unknown with the given information.\nFinal Exam                                                                             Page 10 of 24",
            "md": "# Design of Digital Circuits\n\n# August 23rd, 2019\n\n# 6 Pipeline (Reverse Engineering) [40 points]\n\nThe following piece of code runs on a pipelined microprocessor as shown in the table (F: Fetch, D: Decode, E: Execute, M: Memory, W: Write back). Instructions are in the form \u201cInstruction Destination, Source1, Source2.\u201d For example, \u201cADD A, B, C\u201d means A \u2190 B + C.\n\n| Cycles | 1              | 2 | 3 | 4  | 5  | 6  | 7  | 8  | 9  | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 |\n| ------ | -------------- | - | - | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- |\n| 0      | MUL R5, R6, R7 | F | D | E1 | E2 | E3 | E4 | M  | W  |    |    |    |    |    |    |    |    |    |\n| 1      | ADD R4, R6, R7 | F | D | E1 | E2 | E3 | -  | M  | W  |    |    |    |    |    |    |    |    |    |\n| 2      | ADD R5, R5, R6 | - | F | D  | -  | -  | E1 | E2 | E3 | M  | W  |    |    |    |    |    |    |    |\n| 3      | MUL R4, R7, R7 | - | - | F  | -  | -  | D  | E1 | E2 | E3 | E4 | M  | W  |    |    |    |    |    |\n| 4      | ADD R6, R7, R5 |   | - | -  | -  | F  | D  | -  | E1 | E2 | E3 | M  | W  |    |    |    |    |    |\n| 5      | ADD R3, R0, R6 |   | - | -  | F  | -  | D  | -  | -  | E1 | E2 | E3 | M  | W  |    |    |    |    |\n| 6      | ADD R7, R1, R4 |   |   | -  | -  | F  | -  | -  | D  | E1 | E2 | E3 | M  | W  |    |    |    |    |\n\nUse this information to reverse engineer the architecture of this microprocessor to answer the following questions. Answer the questions as precise as possible with the provided information. If the provided information is not sufficient to answer a question, answer \u201cUnknown\u201d and explain your reasoning clearly.\n\n1. (a) [5 points] How many cycles does it take for an adder and for a multiplier to calculate a result?\n\n3 cycles for adder (E1, E2, E3) and 4 cycles for multiplier (E1, E2, E3, E4).\n2. (b) [5 points] What is the minimum number of register file read/write ports that this architecture implements? Explain.\n\nThe register file has two read ports and one write port.\n3. (c) [5 points] Can we reduce the execution time of this code by enabling more read/write ports in the register file? Explain.\n\nIt is not possible to reduce stall cycles of the given code by enabling more register file ports.\n4. (d) [5 points] Does this architecture implement any data forwarding? If so, how is data forwarding done between pipeline stages? Explain.\n\nThere is data forwarding from the M stage to E1, as we observe that the instruction 2 starts using R5 at the clk cycle 7, which is one clk cycle after the instruction 0 finishes calculating its result in the execution unit.\n\nSimilarly, as another proof of this data forwarding, we observe that the instruction 4 starts using R5 at the clk cycle 10, which is one clk cycle after the instruction 2 finishes calculating its result in the execution unit.\n\nAny other data forwarding is unknown with the given information.\n\nFinal Exam Page 10 of 24",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits",
                    "md": "# Design of Digital Circuits",
                    "rows": null,
                    "bBox": {
                        "x": 176.9,
                        "y": 43.11,
                        "w": 274.19,
                        "h": 184.97
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "August 23rd, 2019",
                    "md": "# August 23rd, 2019",
                    "rows": null,
                    "bBox": {
                        "x": 77.98,
                        "y": 43.11,
                        "w": 445.38,
                        "h": 184.97
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "6 Pipeline (Reverse Engineering) [40 points]",
                    "md": "# 6 Pipeline (Reverse Engineering) [40 points]",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 68.3,
                        "w": 296.11,
                        "h": 159.78
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "The following piece of code runs on a pipelined microprocessor as shown in the table (F: Fetch, D: Decode, E: Execute, M: Memory, W: Write back). Instructions are in the form \u201cInstruction Destination, Source1, Source2.\u201d For example, \u201cADD A, B, C\u201d means A \u2190 B + C.",
                    "md": "The following piece of code runs on a pipelined microprocessor as shown in the table (F: Fetch, D: Decode, E: Execute, M: Memory, W: Write back). Instructions are in the form \u201cInstruction Destination, Source1, Source2.\u201d For example, \u201cADD A, B, C\u201d means A \u2190 B + C.",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 100.48,
                        "w": 491.92,
                        "h": 127.6
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "| Cycles | 1              | 2 | 3 | 4  | 5  | 6  | 7  | 8  | 9  | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 |\n| ------ | -------------- | - | - | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- |\n| 0      | MUL R5, R6, R7 | F | D | E1 | E2 | E3 | E4 | M  | W  |    |    |    |    |    |    |    |    |    |\n| 1      | ADD R4, R6, R7 | F | D | E1 | E2 | E3 | -  | M  | W  |    |    |    |    |    |    |    |    |    |\n| 2      | ADD R5, R5, R6 | - | F | D  | -  | -  | E1 | E2 | E3 | M  | W  |    |    |    |    |    |    |    |\n| 3      | MUL R4, R7, R7 | - | - | F  | -  | -  | D  | E1 | E2 | E3 | E4 | M  | W  |    |    |    |    |    |\n| 4      | ADD R6, R7, R5 |   | - | -  | -  | F  | D  | -  | E1 | E2 | E3 | M  | W  |    |    |    |    |    |\n| 5      | ADD R3, R0, R6 |   | - | -  | F  | -  | D  | -  | -  | E1 | E2 | E3 | M  | W  |    |    |    |    |\n| 6      | ADD R7, R1, R4 |   |   | -  | -  | F  | -  | -  | D  | E1 | E2 | E3 | M  | W  |    |    |    |    |",
                    "rows": [
                        [
                            "Cycles",
                            "1",
                            "2",
                            "3",
                            "4",
                            "5",
                            "6",
                            "7",
                            "8",
                            "9",
                            "10",
                            "11",
                            "12",
                            "13",
                            "14",
                            "15",
                            "16",
                            "17",
                            "18"
                        ],
                        [
                            "0",
                            "MUL R5, R6, R7",
                            "F",
                            "D",
                            "E1",
                            "E2",
                            "E3",
                            "E4",
                            "M",
                            "W",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "1",
                            "ADD R4, R6, R7",
                            "F",
                            "D",
                            "E1",
                            "E2",
                            "E3",
                            "-",
                            "M",
                            "W",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "2",
                            "ADD R5, R5, R6",
                            "-",
                            "F",
                            "D",
                            "-",
                            "-",
                            "E1",
                            "E2",
                            "E3",
                            "M",
                            "W",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "3",
                            "MUL R4, R7, R7",
                            "-",
                            "-",
                            "F",
                            "-",
                            "-",
                            "D",
                            "E1",
                            "E2",
                            "E3",
                            "E4",
                            "M",
                            "W",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "4",
                            "ADD R6, R7, R5",
                            "",
                            "-",
                            "-",
                            "-",
                            "F",
                            "D",
                            "-",
                            "E1",
                            "E2",
                            "E3",
                            "M",
                            "W",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "5",
                            "ADD R3, R0, R6",
                            "",
                            "-",
                            "-",
                            "F",
                            "-",
                            "D",
                            "-",
                            "-",
                            "E1",
                            "E2",
                            "E3",
                            "M",
                            "W",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "6",
                            "ADD R7, R1, R4",
                            "",
                            "",
                            "-",
                            "-",
                            "F",
                            "-",
                            "-",
                            "D",
                            "E1",
                            "E2",
                            "E3",
                            "M",
                            "W",
                            "",
                            "",
                            "",
                            ""
                        ]
                    ],
                    "bBox": {
                        "x": 71.45,
                        "y": 43.11,
                        "w": 492.59,
                        "h": 751.56
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Use this information to reverse engineer the architecture of this microprocessor to answer the following questions. Answer the questions as precise as possible with the provided information. If the provided information is not sufficient to answer a question, answer \u201cUnknown\u201d and explain your reasoning clearly.\n\n1. (a) [5 points] How many cycles does it take for an adder and for a multiplier to calculate a result?\n\n3 cycles for adder (E1, E2, E3) and 4 cycles for multiplier (E1, E2, E3, E4).\n2. (b) [5 points] What is the minimum number of register file read/write ports that this architecture implements? Explain.\n\nThe register file has two read ports and one write port.\n3. (c) [5 points] Can we reduce the execution time of this code by enabling more read/write ports in the register file? Explain.\n\nIt is not possible to reduce stall cycles of the given code by enabling more register file ports.\n4. (d) [5 points] Does this architecture implement any data forwarding? If so, how is data forwarding done between pipeline stages? Explain.\n\nThere is data forwarding from the M stage to E1, as we observe that the instruction 2 starts using R5 at the clk cycle 7, which is one clk cycle after the instruction 0 finishes calculating its result in the execution unit.\n\nSimilarly, as another proof of this data forwarding, we observe that the instruction 4 starts using R5 at the clk cycle 10, which is one clk cycle after the instruction 2 finishes calculating its result in the execution unit.\n\nAny other data forwarding is unknown with the given information.\n\nFinal Exam Page 10 of 24",
                    "md": "Use this information to reverse engineer the architecture of this microprocessor to answer the following questions. Answer the questions as precise as possible with the provided information. If the provided information is not sufficient to answer a question, answer \u201cUnknown\u201d and explain your reasoning clearly.\n\n1. (a) [5 points] How many cycles does it take for an adder and for a multiplier to calculate a result?\n\n3 cycles for adder (E1, E2, E3) and 4 cycles for multiplier (E1, E2, E3, E4).\n2. (b) [5 points] What is the minimum number of register file read/write ports that this architecture implements? Explain.\n\nThe register file has two read ports and one write port.\n3. (c) [5 points] Can we reduce the execution time of this code by enabling more read/write ports in the register file? Explain.\n\nIt is not possible to reduce stall cycles of the given code by enabling more register file ports.\n4. (d) [5 points] Does this architecture implement any data forwarding? If so, how is data forwarding done between pipeline stages? Explain.\n\nThere is data forwarding from the M stage to E1, as we observe that the instruction 2 starts using R5 at the clk cycle 7, which is one clk cycle after the instruction 0 finishes calculating its result in the execution unit.\n\nSimilarly, as another proof of this data forwarding, we observe that the instruction 4 starts using R5 at the clk cycle 10, which is one clk cycle after the instruction 2 finishes calculating its result in the execution unit.\n\nAny other data forwarding is unknown with the given information.\n\nFinal Exam Page 10 of 24",
                    "rows": null,
                    "bBox": {
                        "x": 71.45,
                        "y": 141.97,
                        "w": 492.47,
                        "h": 652.7
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 12,
            "text": "Initials:                              Design of Digital Circuits                    August 23rd, 2019\n(e) [5 points] Is it possible to run this code faster by adding more data forwarding paths? If it is, how?\n    Explain.\n         Not possible.\n         All instructions that stall due to data dependency are already using the best possible data\n         forwarding.  There is no stall cycles that can be eliminated by enabling another form of\n         data forwarding.\n(f) [5 points] Is there internal forwarding in the register file? If there is not, how would the execution\n    time of the same program change by enabling internal forwarding in the register file? Explain.\n         There already is internal forwarding in the register file, as instruction 6 can finish the\n         decode stage by fetching the value of R4 from the register file in the same cycle that R4 is\n         written (cycle 13).\nFinal Exam                                                                                Page 11 of 24",
            "md": "# Design of Digital Circuits\n\nAugust 23rd, 2019\n\n# (e) [5 points]\n\nIs it possible to run this code faster by adding more data forwarding paths? If it is, how? Explain.\n\nNot possible.\n\nAll instructions that stall due to data dependency are already using the best possible data forwarding. There is no stall cycles that can be eliminated by enabling another form of data forwarding.\n\n# (f) [5 points]\n\nIs there internal forwarding in the register file? If there is not, how would the execution time of the same program change by enabling internal forwarding in the register file? Explain.\n\nThere already is internal forwarding in the register file, as instruction 6 can finish the decode stage by fetching the value of R4 from the register file in the same cycle that R4 is written (cycle 13).\n\nFinal Exam\n\nPage 11 of 24",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits",
                    "md": "# Design of Digital Circuits",
                    "rows": null,
                    "bBox": {
                        "x": 241.96,
                        "y": 43.11,
                        "w": 110.97,
                        "h": 10.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "August 23rd, 2019",
                    "md": "August 23rd, 2019",
                    "rows": null,
                    "bBox": {
                        "x": 443.23,
                        "y": 43.11,
                        "w": 80.13,
                        "h": 10.0
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "(e) [5 points]",
                    "md": "# (e) [5 points]",
                    "rows": null,
                    "bBox": {
                        "x": 0.0,
                        "y": 0.0,
                        "w": 595.28,
                        "h": 841.89
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Is it possible to run this code faster by adding more data forwarding paths? If it is, how? Explain.\n\nNot possible.\n\nAll instructions that stall due to data dependency are already using the best possible data forwarding. There is no stall cycles that can be eliminated by enabling another form of data forwarding.",
                    "md": "Is it possible to run this code faster by adding more data forwarding paths? If it is, how? Explain.\n\nNot possible.\n\nAll instructions that stall due to data dependency are already using the best possible data forwarding. There is no stall cycles that can be eliminated by enabling another form of data forwarding.",
                    "rows": null,
                    "bBox": {
                        "x": 89.71,
                        "y": 83.96,
                        "w": 411.87,
                        "h": 194.27
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "(f) [5 points]",
                    "md": "# (f) [5 points]",
                    "rows": null,
                    "bBox": {
                        "x": 0.0,
                        "y": 0.0,
                        "w": 595.28,
                        "h": 841.89
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Is there internal forwarding in the register file? If there is not, how would the execution time of the same program change by enabling internal forwarding in the register file? Explain.\n\nThere already is internal forwarding in the register file, as instruction 6 can finish the decode stage by fetching the value of R4 from the register file in the same cycle that R4 is written (cycle 13).\n\nFinal Exam\n\nPage 11 of 24",
                    "md": "Is there internal forwarding in the register file? If there is not, how would the execution time of the same program change by enabling internal forwarding in the register file? Explain.\n\nThere already is internal forwarding in the register file, as instruction 6 can finish the decode stage by fetching the value of R4 from the register file in the same cycle that R4 is written (cycle 13).\n\nFinal Exam\n\nPage 11 of 24",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 83.96,
                        "w": 451.32,
                        "h": 710.71
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 13,
            "text": "Initials:                             Design of Digital Circuits                  August 23rd, 2019\n(g) [10 points] Optimize the assembly code in order to reduce the number of stall cycles. You are allowed\n    to reorder, add, or remove ADD and MUL instructions. You are expected to achieve the minimum\n    possible execution time. Make sure that the register values that the optimized code generates at\n    the end of its execution are identical to the register values that the original code generates at the\n    end of its execution. Justify each individual change you make. Show the execution timeline of each\n    instruction and what stage it is in the table below. (Notice that the table below consists of two parts:\n    the first ten cycles at the top, and the next ten cycles at the bottom.)\n           \u2022  Instruction 1 is useless due to write-after-write, remove it.\n           \u2022  Instruction 3 stalls for decode logic, move it up.\n           \u2022  Instruction 6 does not have read-after-write dependency and can be executed before\n              instr. 5. However, it cannot execute before instruction 4 as it would change the value\n              of R7.\n         New total execution time is 17 cycles instead of 18.\n          Instr.   Instructions                                      Cycles\n          No                                   1     2    3     4    5    6     7    8    9     10\n          0        MUL R5, R6, R7              F     D    E1    E2   E3   E4    M    W\n          3        MUL R4, R7, R7                    F    D     E1   E2   E3    E4   M    W\n          2        ADD R5, R5, R6                         F     D    -    -     E1   E2   E3    M\n          4        ADD R6, R7, R5                               F    -    -     D    -    -     E1\n          6        ADD R7, R1, R4                                               F    -    -     D\n          5        ADD R3, R0, R6                                                               F\n                                               11    12   13   14    15   16    17   18   19    20\n          0        MUL R5, R6, R7\n          3        MUL R4, R7, R7\n          2        ADD R5, R5, R6              W\n          4        ADD R6, R7, R5              E2    E3   M     W\n          6        ADD R7, R1, R4              E1    E2   E3    M    W\n          5        ADD R3, R0, R6              D     -    E1   E2    E3   M    W\nFinal Exam                                                                             Page 12 of 24",
            "md": "# Design of Digital Circuits\n\nAugust 23rd, 2019\n\n# (g) [10 points]\n\nOptimize the assembly code in order to reduce the number of stall cycles. You are allowed to reorder, add, or remove ADD and MUL instructions. You are expected to achieve the minimum possible execution time. Make sure that the register values that the optimized code generates at the end of its execution are identical to the register values that the original code generates at the end of its execution. Justify each individual change you make. Show the execution timeline of each instruction and what stage it is in the table below. (Notice that the table below consists of two parts: the first ten cycles at the top, and the next ten cycles at the bottom.)\n\n- Instruction 1 is useless due to write-after-write, remove it.\n- Instruction 3 stalls for decode logic, move it up.\n- Instruction 6 does not have read-after-write dependency and can be executed before instr. 5. However, it cannot execute before instruction 4 as it would change the value of R7.\n\nNew total execution time is 17 cycles instead of 18.\n\n| Instr. No | Instructions   | Cycles | 1 | 2  | 3  | 4  | 5  | 6  | 7  | 8  | 9 | 10 |\n| --------- | -------------- | ------ | - | -- | -- | -- | -- | -- | -- | -- | - | -- |\n| 0         | MUL R5, R6, R7 | F      | D | E1 | E2 | E3 | E4 | M  | W  |    |   |    |\n| 3         | MUL R4, R7, R7 |        | F | D  | E1 | E2 | E3 | E4 | M  | W  |   |    |\n| 2         | ADD R5, R5, R6 |        |   | F  | D  | -  | -  | E1 | E2 | E3 | M |    |\n| 4         | ADD R6, R7, R5 |        |   | F  | -  | -  | D  | -  | -  | E1 |   |    |\n| 6         | ADD R7, R1, R4 |        |   |    |    | F  | -  | -  | D  |    |   |    |\n| 5         | ADD R3, R0, R6 |        |   |    |    |    |    | F  |    |    |   |    |\n\n| Instr. No | Instructions   | Cycles | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 |\n| --------- | -------------- | ------ | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- |\n| 0         | MUL R5, R6, R7 |        |    |    |    |    |    |    |    |    |    |    |\n| 3         | MUL R4, R7, R7 |        |    |    |    |    |    |    |    |    |    |    |\n| 2         | ADD R5, R5, R6 | W      |    |    |    |    |    |    |    |    |    |    |\n| 4         | ADD R6, R7, R5 | E2     | E3 | M  | W  |    |    |    |    |    |    |    |\n| 6         | ADD R7, R1, R4 | E1     | E2 | E3 | M  | W  |    |    |    |    |    |    |\n| 5         | ADD R3, R0, R6 | D      | -  | E1 | E2 | E3 | M  | W  |    |    |    |    |\n\nFinal Exam\n\nPage 12 of 24",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits",
                    "md": "# Design of Digital Circuits",
                    "rows": null,
                    "bBox": {
                        "x": 117.76,
                        "y": 43.11,
                        "w": 393.53,
                        "h": 571.14
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "August 23rd, 2019",
                    "md": "August 23rd, 2019",
                    "rows": null,
                    "bBox": {
                        "x": 117.76,
                        "y": 43.11,
                        "w": 405.59,
                        "h": 571.14
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "(g) [10 points]",
                    "md": "# (g) [10 points]",
                    "rows": null,
                    "bBox": {
                        "x": 117.76,
                        "y": 324.5,
                        "w": 394.35,
                        "h": 203.08
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Optimize the assembly code in order to reduce the number of stall cycles. You are allowed to reorder, add, or remove ADD and MUL instructions. You are expected to achieve the minimum possible execution time. Make sure that the register values that the optimized code generates at the end of its execution are identical to the register values that the original code generates at the end of its execution. Justify each individual change you make. Show the execution timeline of each instruction and what stage it is in the table below. (Notice that the table below consists of two parts: the first ten cycles at the top, and the next ten cycles at the bottom.)\n\n- Instruction 1 is useless due to write-after-write, remove it.\n- Instruction 3 stalls for decode logic, move it up.\n- Instruction 6 does not have read-after-write dependency and can be executed before instr. 5. However, it cannot execute before instruction 4 as it would change the value of R7.\n\nNew total execution time is 17 cycles instead of 18.",
                    "md": "Optimize the assembly code in order to reduce the number of stall cycles. You are allowed to reorder, add, or remove ADD and MUL instructions. You are expected to achieve the minimum possible execution time. Make sure that the register values that the optimized code generates at the end of its execution are identical to the register values that the original code generates at the end of its execution. Justify each individual change you make. Show the execution timeline of each instruction and what stage it is in the table below. (Notice that the table below consists of two parts: the first ten cycles at the top, and the next ten cycles at the bottom.)\n\n- Instruction 1 is useless due to write-after-write, remove it.\n- Instruction 3 stalls for decode logic, move it up.\n- Instruction 6 does not have read-after-write dependency and can be executed before instr. 5. However, it cannot execute before instruction 4 as it would change the value of R7.\n\nNew total execution time is 17 cycles instead of 18.",
                    "rows": null,
                    "bBox": {
                        "x": 89.71,
                        "y": 83.96,
                        "w": 433.74,
                        "h": 530.29
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "| Instr. No | Instructions   | Cycles | 1 | 2  | 3  | 4  | 5  | 6  | 7  | 8  | 9 | 10 |\n| --------- | -------------- | ------ | - | -- | -- | -- | -- | -- | -- | -- | - | -- |\n| 0         | MUL R5, R6, R7 | F      | D | E1 | E2 | E3 | E4 | M  | W  |    |   |    |\n| 3         | MUL R4, R7, R7 |        | F | D  | E1 | E2 | E3 | E4 | M  | W  |   |    |\n| 2         | ADD R5, R5, R6 |        |   | F  | D  | -  | -  | E1 | E2 | E3 | M |    |\n| 4         | ADD R6, R7, R5 |        |   | F  | -  | -  | D  | -  | -  | E1 |   |    |\n| 6         | ADD R7, R1, R4 |        |   |    |    | F  | -  | -  | D  |    |   |    |\n| 5         | ADD R3, R0, R6 |        |   |    |    |    |    | F  |    |    |   |    |",
                    "rows": [
                        [
                            "Instr. No",
                            "Instructions",
                            "Cycles",
                            "1",
                            "2",
                            "3",
                            "4",
                            "5",
                            "6",
                            "7",
                            "8",
                            "9",
                            "10"
                        ],
                        [
                            "0",
                            "MUL R5, R6, R7",
                            "F",
                            "D",
                            "E1",
                            "E2",
                            "E3",
                            "E4",
                            "M",
                            "W",
                            "",
                            "",
                            ""
                        ],
                        [
                            "3",
                            "MUL R4, R7, R7",
                            "",
                            "F",
                            "D",
                            "E1",
                            "E2",
                            "E3",
                            "E4",
                            "M",
                            "W",
                            "",
                            ""
                        ],
                        [
                            "2",
                            "ADD R5, R5, R6",
                            "",
                            "",
                            "F",
                            "D",
                            "-",
                            "-",
                            "E1",
                            "E2",
                            "E3",
                            "M",
                            ""
                        ],
                        [
                            "4",
                            "ADD R6, R7, R5",
                            "",
                            "",
                            "F",
                            "-",
                            "-",
                            "D",
                            "-",
                            "-",
                            "E1",
                            "",
                            ""
                        ],
                        [
                            "6",
                            "ADD R7, R1, R4",
                            "",
                            "",
                            "",
                            "",
                            "F",
                            "-",
                            "-",
                            "D",
                            "",
                            "",
                            ""
                        ],
                        [
                            "5",
                            "ADD R3, R0, R6",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "F",
                            "",
                            "",
                            "",
                            ""
                        ]
                    ],
                    "bBox": {
                        "x": 72.0,
                        "y": 43.11,
                        "w": 451.44,
                        "h": 751.56
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "| Instr. No | Instructions   | Cycles | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 |\n| --------- | -------------- | ------ | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- |\n| 0         | MUL R5, R6, R7 |        |    |    |    |    |    |    |    |    |    |    |\n| 3         | MUL R4, R7, R7 |        |    |    |    |    |    |    |    |    |    |    |\n| 2         | ADD R5, R5, R6 | W      |    |    |    |    |    |    |    |    |    |    |\n| 4         | ADD R6, R7, R5 | E2     | E3 | M  | W  |    |    |    |    |    |    |    |\n| 6         | ADD R7, R1, R4 | E1     | E2 | E3 | M  | W  |    |    |    |    |    |    |\n| 5         | ADD R3, R0, R6 | D      | -  | E1 | E2 | E3 | M  | W  |    |    |    |    |",
                    "rows": [
                        [
                            "Instr. No",
                            "Instructions",
                            "Cycles",
                            "11",
                            "12",
                            "13",
                            "14",
                            "15",
                            "16",
                            "17",
                            "18",
                            "19",
                            "20"
                        ],
                        [
                            "0",
                            "MUL R5, R6, R7",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "3",
                            "MUL R4, R7, R7",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "2",
                            "ADD R5, R5, R6",
                            "W",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "4",
                            "ADD R6, R7, R5",
                            "E2",
                            "E3",
                            "M",
                            "W",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "6",
                            "ADD R7, R1, R4",
                            "E1",
                            "E2",
                            "E3",
                            "M",
                            "W",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "5",
                            "ADD R3, R0, R6",
                            "D",
                            "-",
                            "E1",
                            "E2",
                            "E3",
                            "M",
                            "W",
                            "",
                            "",
                            "",
                            ""
                        ]
                    ],
                    "bBox": {
                        "x": 72.0,
                        "y": 43.11,
                        "w": 451.44,
                        "h": 751.56
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Final Exam\n\nPage 12 of 24",
                    "md": "Final Exam\n\nPage 12 of 24",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 324.5,
                        "w": 451.32,
                        "h": 470.17
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 14,
            "text": "Initials:                              Design of Digital Circuits                    August 23rd, 2019\n7     Tomasulo\u2019s Algorithm                [36 points]\nIn this problem, we consider an in-order fetch, out-of-order dispatch, and out-of-order retirement execu-\ntion engine that employs Tomasulo\u2019s algorithm. This engine behaves as follows:\n    \u2022 The engine has four main pipeline stages: Fetch (F), Decode (D), Execute (E), and Write-back\n      (W).\n    \u2022 The engine can fetch FW     instructions per cycle, decode DW   instructions per cycle, and write\n      back the result of RW instructions per cycle.\n    \u2022 The engine has two execution units:   1) an integer ALU   for executing integer instructions (i.e.,\n      addition and multiplication) and 2) a memory unit  for executing load/store instructions.\n    \u2022 Each execution unit has an R-entry reservation station.\n    \u2022 An instruction always allocates the first available entry of the reservation station (in top-to-bottom\n      order) of the corresponding execution unit.\nThe reservation stations are all initally empty.  The processor fetches and executes   six instructions.\nTable 2 shows the six instructions and their execution diagram.\nUsing the information provided above and in Table 2 (see the next page), fill in the blanks below with the\nconfiguration of the out-of-order microarchitecture. Write \u201cUnknown\u201d if the corresponding configuration\ncannot be determined using the information provided in the question.\n               The latency of the ALU and memory unit instructions:        ALU - 2 cycles, MU - 10 cycles\n                  In which pipeline stage is an instruction dispatched?           Decode (D) stage\n                    Number of entries of each reservation station (R):            Two entries each\n                                                   Fetch width (FW):                     2\n                                                 Decode width (DW):                      2\n                                                  Retire width (RW):                  Unknown\n                                        Is the integer ALU pipelined?                 Unknown\n                                        Is the memory unit pipelined?                   Yes\n  If applicable, between which stages is data forwarding implemented?            No data forwarding\nFinal Exam                                                                                Page 13 of 24",
            "md": "# Design of Digital Circuits\n\n# August 23rd, 2019\n\n# 7 Tomasulo\u2019s Algorithm [36 points]\n\nIn this problem, we consider an in-order fetch, out-of-order dispatch, and out-of-order retirement execution engine that employs Tomasulo\u2019s algorithm. This engine behaves as follows:\n\n- The engine has four main pipeline stages: Fetch (F), Decode (D), Execute (E), and Write-back (W).\n- The engine can fetch FW instructions per cycle, decode DW instructions per cycle, and write back the result of RW instructions per cycle.\n- The engine has two execution units: 1) an integer ALU for executing integer instructions (i.e., addition and multiplication) and 2) a memory unit for executing load/store instructions.\n- Each execution unit has an R-entry reservation station.\n- An instruction always allocates the first available entry of the reservation station (in top-to-bottom order) of the corresponding execution unit.\n\nThe reservation stations are all initially empty. The processor fetches and executes six instructions. Table 2 shows the six instructions and their execution diagram. Using the information provided above and in Table 2 (see the next page), fill in the blanks below with the configuration of the out-of-order microarchitecture. Write \u201cUnknown\u201d if the corresponding configuration cannot be determined using the information provided in the question.\n\n| The latency of the ALU and memory unit instructions:                | ALU - 2 cycles, MU - 10 cycles |\n| ------------------------------------------------------------------- | ------------------------------ |\n| In which pipeline stage is an instruction dispatched?               | Decode (D) stage               |\n| Number of entries of each reservation station (R):                  | Two entries each               |\n| Fetch width (FW):                                                   | 2                              |\n| Decode width (DW):                                                  | 2                              |\n| Retire width (RW):                                                  | Unknown                        |\n| Is the integer ALU pipelined?                                       | Unknown                        |\n| Is the memory unit pipelined?                                       | Yes                            |\n| If applicable, between which stages is data forwarding implemented? | No data forwarding             |\n\nFinal Exam\n\nPage 13 of 24",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits",
                    "md": "# Design of Digital Circuits",
                    "rows": null,
                    "bBox": {
                        "x": 241.96,
                        "y": 43.11,
                        "w": 110.97,
                        "h": 10.0
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "August 23rd, 2019",
                    "md": "# August 23rd, 2019",
                    "rows": null,
                    "bBox": {
                        "x": 443.23,
                        "y": 43.11,
                        "w": 80.13,
                        "h": 380.59
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "7 Tomasulo\u2019s Algorithm [36 points]",
                    "md": "# 7 Tomasulo\u2019s Algorithm [36 points]",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 67.62,
                        "w": 233.99,
                        "h": 14.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "In this problem, we consider an in-order fetch, out-of-order dispatch, and out-of-order retirement execution engine that employs Tomasulo\u2019s algorithm. This engine behaves as follows:\n\n- The engine has four main pipeline stages: Fetch (F), Decode (D), Execute (E), and Write-back (W).\n- The engine can fetch FW instructions per cycle, decode DW instructions per cycle, and write back the result of RW instructions per cycle.\n- The engine has two execution units: 1) an integer ALU for executing integer instructions (i.e., addition and multiplication) and 2) a memory unit for executing load/store instructions.\n- Each execution unit has an R-entry reservation station.\n- An instruction always allocates the first available entry of the reservation station (in top-to-bottom order) of the corresponding execution unit.\n\nThe reservation stations are all initially empty. The processor fetches and executes six instructions. Table 2 shows the six instructions and their execution diagram. Using the information provided above and in Table 2 (see the next page), fill in the blanks below with the configuration of the out-of-order microarchitecture. Write \u201cUnknown\u201d if the corresponding configuration cannot be determined using the information provided in the question.",
                    "md": "In this problem, we consider an in-order fetch, out-of-order dispatch, and out-of-order retirement execution engine that employs Tomasulo\u2019s algorithm. This engine behaves as follows:\n\n- The engine has four main pipeline stages: Fetch (F), Decode (D), Execute (E), and Write-back (W).\n- The engine can fetch FW instructions per cycle, decode DW instructions per cycle, and write back the result of RW instructions per cycle.\n- The engine has two execution units: 1) an integer ALU for executing integer instructions (i.e., addition and multiplication) and 2) a memory unit for executing load/store instructions.\n- Each execution unit has an R-entry reservation station.\n- An instruction always allocates the first available entry of the reservation station (in top-to-bottom order) of the corresponding execution unit.\n\nThe reservation stations are all initially empty. The processor fetches and executes six instructions. Table 2 shows the six instructions and their execution diagram. Using the information provided above and in Table 2 (see the next page), fill in the blanks below with the configuration of the out-of-order microarchitecture. Write \u201cUnknown\u201d if the corresponding configuration cannot be determined using the information provided in the question.",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 67.62,
                        "w": 451.46,
                        "h": 387.16
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "| The latency of the ALU and memory unit instructions:                | ALU - 2 cycles, MU - 10 cycles |\n| ------------------------------------------------------------------- | ------------------------------ |\n| In which pipeline stage is an instruction dispatched?               | Decode (D) stage               |\n| Number of entries of each reservation station (R):                  | Two entries each               |\n| Fetch width (FW):                                                   | 2                              |\n| Decode width (DW):                                                  | 2                              |\n| Retire width (RW):                                                  | Unknown                        |\n| Is the integer ALU pipelined?                                       | Unknown                        |\n| Is the memory unit pipelined?                                       | Yes                            |\n| If applicable, between which stages is data forwarding implemented? | No data forwarding             |",
                    "rows": [
                        [
                            "The latency of the ALU and memory unit instructions:",
                            "ALU - 2 cycles, MU - 10 cycles"
                        ],
                        [
                            "In which pipeline stage is an instruction dispatched?",
                            "Decode (D) stage"
                        ],
                        [
                            "Number of entries of each reservation station (R):",
                            "Two entries each"
                        ],
                        [
                            "Fetch width (FW):",
                            "2"
                        ],
                        [
                            "Decode width (DW):",
                            "2"
                        ],
                        [
                            "Retire width (RW):",
                            "Unknown"
                        ],
                        [
                            "Is the integer ALU pipelined?",
                            "Unknown"
                        ],
                        [
                            "Is the memory unit pipelined?",
                            "Yes"
                        ],
                        [
                            "If applicable, between which stages is data forwarding implemented?",
                            "No data forwarding"
                        ]
                    ],
                    "bBox": {
                        "x": 72.0,
                        "y": 43.11,
                        "w": 463.84,
                        "h": 751.56
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Final Exam\n\nPage 13 of 24",
                    "md": "Final Exam\n\nPage 13 of 24",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 398.16,
                        "w": 451.32,
                        "h": 396.51
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 15,
            "text": "Initials:\nFinal Exam\n      Instruction/Cycle:   1   2   3   4    5   6    7    8   9   10  11   12  13   14   15   16  17   18   19  20   21  22   23  24   25  26   27  28   29  30   31   32   33\n                                          Design of Digital Circuits                         August 23rd, 2019\n                                                                    W\n                                                                    E10\n                                                                    E9\n                                                                    E8\n                                                                    E7\n                                                                    E6\n                                                                    E5\n                                                                    E4\n                                                                    E3\n                                                                    E2\n                                                                    E1\n                                                               W    -\n                                                               E2   -  instructions.\n                                                               E1   -\n                                                          W    -    -\n                                                          E10  -    -  six\n                                                          E9   -    D  the\n                                                W         E8   -    -  of\n                                                E10       E7   -    -  diagram\n                                                E9        E6   -    -\n                                                E8        E5   -    -  Execution\n                                                E7        E4   -    -\n                                                E6        E3   -    -  2:\n                                                E5        E2   -    -  Table\n                                                E4        E1   -    -\n                                                E3   W    -    -    -\n                                                E2   E2   -    -    -\n                                                E1   E1   -    D    -\n                                           W    -    -    -    -    -\n                                           E2   -    -    -    -    -\n                                           E1   -    D    D    F    F\n                                           D    D    F    F\n                                           F    F\n                                           R1        #4        R3\n                                           R0,       R1,       R2,\n                                           \u2190    [R1] \u2190    [R1] \u2190    R4\n                                           R1   \u2190    R1   \u2190    R4   \u2190\n                                                R2   ADDI           [R0]\n                                           ADD LD         R3   MUL\n                                                          LD        ST\n                                           1:   2:   3:   4:   5:   6:\n                                                                                                  Page 14 of 24",
            "md": "# Final Exam\n\n# Design of Digital Circuits\n\nAugust 23rd, 2019\n\n| Instruction/Cycle: | 1     | 2     | 3     | 4             | 5  | 6   | 7  | 8  | 9  | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 |\n| ------------------ | ----- | ----- | ----- | ------------- | -- | --- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- |\n| W                  | E10   | E9    | E8    | E7            | E6 | E5  | E4 | E3 | E2 | E1 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| W                  | -     | E2    | -     | instructions. | E1 | -   |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| W                  | -     | -     | E10   | -             | -  | six |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E9                 | -     | D     | the   |               |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| W                  | E8    | -     | -     | of            |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E10                | E7    | -     | -     | diagram       |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E9                 | E6    | -     | -     |               |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E8                 | E5    | -     | -     | Execution     |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E7                 | E4    | -     | -     |               |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E6                 | E3    | -     | -     | 2:            |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E5                 | E2    | -     | -     | Table         |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E4                 | E1    | -     | -     |               |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E3                 | W     | -     | -     | -             |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E2                 | E2    | -     | -     |               |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E1                 | E1    | -     | D     | -             |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| W                  | -     | -     | -     | -             |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E2                 | -     | -     | -     | -             |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E1                 | -     | D     | D     | F             | F  |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| D                  | D     | F     | F     |               |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| F                  | F     |       |       |               |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| R1                 | #4    | R3    |       |               |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| R0,                | R1,   | R2,   |       |               |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| \u2190                  | \\[R1] | \u2190     | \\[R1] | \u2190             | R4 |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| R1                 | \u2190     | R1    | \u2190     | R4            | \u2190  |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| R2                 | ADDI  | \\[R0] |       |               |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| ADD                | LD    | R3    | MUL   |               |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| LD                 | ST    |       |       |               |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| 1:                 | 2:    | 3:    | 4:    | 5:            | 6: |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n\nPage 14 of 24",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Final Exam",
                    "md": "# Final Exam",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 784.67,
                        "w": 269.26,
                        "h": 2643.68
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits",
                    "md": "# Design of Digital Circuits",
                    "rows": null,
                    "bBox": {
                        "x": 241.96,
                        "y": 2806.91,
                        "w": 126.79,
                        "h": 621.43
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "August 23rd, 2019",
                    "md": "August 23rd, 2019",
                    "rows": null,
                    "bBox": {
                        "x": 180.0,
                        "y": 1869.37,
                        "w": 401.0,
                        "h": 1628.56
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "| Instruction/Cycle: | 1     | 2     | 3     | 4             | 5  | 6   | 7  | 8  | 9  | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 |\n| ------------------ | ----- | ----- | ----- | ------------- | -- | --- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- |\n| W                  | E10   | E9    | E8    | E7            | E6 | E5  | E4 | E3 | E2 | E1 |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| W                  | -     | E2    | -     | instructions. | E1 | -   |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| W                  | -     | -     | E10   | -             | -  | six |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E9                 | -     | D     | the   |               |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| W                  | E8    | -     | -     | of            |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E10                | E7    | -     | -     | diagram       |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E9                 | E6    | -     | -     |               |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E8                 | E5    | -     | -     | Execution     |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E7                 | E4    | -     | -     |               |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E6                 | E3    | -     | -     | 2:            |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E5                 | E2    | -     | -     | Table         |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E4                 | E1    | -     | -     |               |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E3                 | W     | -     | -     | -             |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E2                 | E2    | -     | -     |               |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E1                 | E1    | -     | D     | -             |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| W                  | -     | -     | -     | -             |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E2                 | -     | -     | -     | -             |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| E1                 | -     | D     | D     | F             | F  |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| D                  | D     | F     | F     |               |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| F                  | F     |       |       |               |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| R1                 | #4    | R3    |       |               |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| R0,                | R1,   | R2,   |       |               |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| \u2190                  | \\[R1] | \u2190     | \\[R1] | \u2190             | R4 |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| R1                 | \u2190     | R1    | \u2190     | R4            | \u2190  |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| R2                 | ADDI  | \\[R0] |       |               |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| ADD                | LD    | R3    | MUL   |               |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| LD                 | ST    |       |       |               |    |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| 1:                 | 2:    | 3:    | 4:    | 5:            | 6: |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |",
                    "rows": [
                        [
                            "Instruction/Cycle:",
                            "1",
                            "2",
                            "3",
                            "4",
                            "5",
                            "6",
                            "7",
                            "8",
                            "9",
                            "10",
                            "11",
                            "12",
                            "13",
                            "14",
                            "15",
                            "16",
                            "17",
                            "18",
                            "19",
                            "20",
                            "21",
                            "22",
                            "23",
                            "24",
                            "25",
                            "26",
                            "27",
                            "28",
                            "29",
                            "30",
                            "31",
                            "32",
                            "33"
                        ],
                        [
                            "W",
                            "E10",
                            "E9",
                            "E8",
                            "E7",
                            "E6",
                            "E5",
                            "E4",
                            "E3",
                            "E2",
                            "E1",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "W",
                            "-",
                            "E2",
                            "-",
                            "instructions.",
                            "E1",
                            "-",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "W",
                            "-",
                            "-",
                            "E10",
                            "-",
                            "-",
                            "six",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "E9",
                            "-",
                            "D",
                            "the",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "W",
                            "E8",
                            "-",
                            "-",
                            "of",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "E10",
                            "E7",
                            "-",
                            "-",
                            "diagram",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "E9",
                            "E6",
                            "-",
                            "-",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "E8",
                            "E5",
                            "-",
                            "-",
                            "Execution",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "E7",
                            "E4",
                            "-",
                            "-",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "E6",
                            "E3",
                            "-",
                            "-",
                            "2:",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "E5",
                            "E2",
                            "-",
                            "-",
                            "Table",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "E4",
                            "E1",
                            "-",
                            "-",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "E3",
                            "W",
                            "-",
                            "-",
                            "-",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "E2",
                            "E2",
                            "-",
                            "-",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "E1",
                            "E1",
                            "-",
                            "D",
                            "-",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "W",
                            "-",
                            "-",
                            "-",
                            "-",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "E2",
                            "-",
                            "-",
                            "-",
                            "-",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "E1",
                            "-",
                            "D",
                            "D",
                            "F",
                            "F",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "D",
                            "D",
                            "F",
                            "F",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "F",
                            "F",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "R1",
                            "#4",
                            "R3",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "R0,",
                            "R1,",
                            "R2,",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "\u2190",
                            "[R1]",
                            "\u2190",
                            "[R1]",
                            "\u2190",
                            "R4",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "R1",
                            "\u2190",
                            "R1",
                            "\u2190",
                            "R4",
                            "\u2190",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "R2",
                            "ADDI",
                            "[R0]",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "ADD",
                            "LD",
                            "R3",
                            "MUL",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "LD",
                            "ST",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "1:",
                            "2:",
                            "3:",
                            "4:",
                            "5:",
                            "6:",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    ],
                    "bBox": {
                        "x": 72.0,
                        "y": 43.11,
                        "w": 693.0,
                        "h": 3515.37
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Page 14 of 24",
                    "md": "Page 14 of 24",
                    "rows": null,
                    "bBox": {
                        "x": 180.0,
                        "y": 1869.37,
                        "w": 419.0,
                        "h": 1689.1
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 16,
            "text": "Initials:                                                Design of Digital Circuits  August 23rd, 2019\n8    Systolic Arrays           [30 points]\nA systolic array consists of 3x4 Processing Elements (PEs), interconnected as shown in Figure 1. The\ninputs of the systolic array are labeled as H0, H1, H2 and V0,V1,V2,V3. Figure 2 shows the PE logic,\nwhich performs a multiply and accumulate operation (MAC), and it saves the result in an internal register\n(reg). Figure 2 also shows how each PE propagates its inputs. We make the following assumptions:\n   \u2022 The latency of each MAC is one cycle.\n   \u2022 The propagation of the values from                  i0 to o0, and from i1 to o1, takes one cycle.\n   \u2022 The initial value of all registers is zero.\n                     \u2022 You can input a value more than once in the systolic array.\n            V0         V1                          V2     V3                 Processing Element (PE)\n   H0      PE00      PE01                         PE02   PE03                        i1\n                                                                       i       o0 = i0  reg o\n   H1      PE10      PE11                         PE12   PE13                0  o1 = i1  0\n                                                                               reg = i0*i1+ reg\n  H2       PE20      PE21                         PE22   PE23                        o1\n                Figure 1: PE array                                     Figure 2: Processing Element (PE)\nYour goal is to use this systolic array to perform the convolution of a 3x3 image (matrix I) with three\n2x2 filters (matrices F, G, and H), to obtain three outputs (matrices O, U, and E):\n                           I00                    I01    I02     F00  F01    O00  O01\n                           I10                    I11    I12 ~   F10  F11 =  O10  O11\n                           I20                    I21    I22\n                           I00                    I01   I02     G00    G01     U00  U01\n                           I10                    I11   I12 ~   G10    G11 =   U10  U11\n                           I20                    I21   I22\n                           I00                    I01  I02    H00     H01      E00   E01\n                           I10                    I11  I12 ~  H10     H11 =    E10   E11\n                           I20                    I21  I22\nAs an example, the convolution of the matrix I with the filter F is computed as follows:\n               \u2022 O00 = I00 \u2217 F00 + I01 \u2217 F01 + I10 \u2217 F10 + I11 \u2217 F11\n               \u2022 O01 = I01 \u2217 F00 + I02 \u2217 F01 + I11 \u2217 F10 + I12 \u2217 F11\n               \u2022 O10 = I10 \u2217 F00 + I11 \u2217 F01 + I20 \u2217 F10 + I21 \u2217 F11\n               \u2022 O11 = I11 \u2217 F00 + I12 \u2217 F01 + I21 \u2217 F10 + I22 \u2217 F11\nFinal Exam                                                                                Page 15 of 24",
            "md": "# Design of Digital Circuits\n\nAugust 23rd, 2019\n\n# 8 Systolic Arrays [30 points]\n\nA systolic array consists of 3x4 Processing Elements (PEs), interconnected as shown in Figure 1. The inputs of the systolic array are labeled as H0, H1, H2 and V0, V1, V2, V3. Figure 2 shows the PE logic, which performs a multiply and accumulate operation (MAC), and it saves the result in an internal register (reg). Figure 2 also shows how each PE propagates its inputs. We make the following assumptions:\n\n- The latency of each MAC is one cycle.\n- The propagation of the values from i0 to o0, and from i1 to o1, takes one cycle.\n- The initial value of all registers is zero.\n- You can input a value more than once in the systolic array.\n\n| V0 | V1   |      | V2   | V3   | Processing Element (PE) |\n| -- | ---- | ---- | ---- | ---- | ----------------------- |\n| H0 | PE00 | PE01 | PE02 | PE03 | i1                      |\n| H1 | PE10 | PE11 | PE12 | PE13 | 0                       |\n| H2 | PE20 | PE21 | PE22 | PE23 | o1                      |\n\nFigure 1: PE array\n\nFigure 2: Processing Element (PE)\n\nYour goal is to use this systolic array to perform the convolution of a 3x3 image (matrix I) with three 2x2 filters (matrices F, G, and H), to obtain three outputs (matrices O, U, and E):\n\n| I00 | I01 | I02 | F00 | F01 | O00 | O01 |\n| --- | --- | --- | --- | --- | --- | --- |\n| I10 | I11 | I12 | F10 | F11 | O10 | O11 |\n| I20 | I21 | I22 |     |     |     |     |\n\n| I00 | I01 | I02 | G00 | G01 | U00 | U01 |\n| --- | --- | --- | --- | --- | --- | --- |\n| I10 | I11 | I12 | G10 | G11 | U10 | U11 |\n| I20 | I21 | I22 |     |     |     |     |\n\n| I00 | I01 | I02 | H00 | H01 | E00 | E01 |\n| --- | --- | --- | --- | --- | --- | --- |\n| I10 | I11 | I12 | H10 | H11 | E10 | E11 |\n| I20 | I21 | I22 |     |     |     |     |\n\nAs an example, the convolution of the matrix I with the filter F is computed as follows:\n\n- O00 = I00 \u2217 F00 + I01 \u2217 F01 + I10 \u2217 F10 + I11 \u2217 F11\n- O01 = I01 \u2217 F00 + I02 \u2217 F01 + I11 \u2217 F10 + I12 \u2217 F11\n- O10 = I10 \u2217 F00 + I11 \u2217 F01 + I20 \u2217 F10 + I21 \u2217 F11\n- O11 = I11 \u2217 F00 + I12 \u2217 F01 + I21 \u2217 F10 + I22 \u2217 F11\n\nFinal Exam\n\nPage 15 of 24",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits",
                    "md": "# Design of Digital Circuits",
                    "rows": null,
                    "bBox": {
                        "x": 241.96,
                        "y": 43.11,
                        "w": 215.76,
                        "h": 253.48
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "August 23rd, 2019",
                    "md": "August 23rd, 2019",
                    "rows": null,
                    "bBox": {
                        "x": 358.76,
                        "y": 43.11,
                        "w": 164.59,
                        "h": 255.94
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "8 Systolic Arrays [30 points]",
                    "md": "# 8 Systolic Arrays [30 points]",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 67.62,
                        "w": 389.9,
                        "h": 231.44
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "A systolic array consists of 3x4 Processing Elements (PEs), interconnected as shown in Figure 1. The inputs of the systolic array are labeled as H0, H1, H2 and V0, V1, V2, V3. Figure 2 shows the PE logic, which performs a multiply and accumulate operation (MAC), and it saves the result in an internal register (reg). Figure 2 also shows how each PE propagates its inputs. We make the following assumptions:\n\n- The latency of each MAC is one cycle.\n- The propagation of the values from i0 to o0, and from i1 to o1, takes one cycle.\n- The initial value of all registers is zero.\n- You can input a value more than once in the systolic array.",
                    "md": "A systolic array consists of 3x4 Processing Elements (PEs), interconnected as shown in Figure 1. The inputs of the systolic array are labeled as H0, H1, H2 and V0, V1, V2, V3. Figure 2 shows the PE logic, which performs a multiply and accumulate operation (MAC), and it saves the result in an internal register (reg). Figure 2 also shows how each PE propagates its inputs. We make the following assumptions:\n\n- The latency of each MAC is one cycle.\n- The propagation of the values from i0 to o0, and from i1 to o1, takes one cycle.\n- The initial value of all registers is zero.\n- You can input a value more than once in the systolic array.",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 99.8,
                        "w": 451.59,
                        "h": 238.2
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "| V0 | V1   |      | V2   | V3   | Processing Element (PE) |\n| -- | ---- | ---- | ---- | ---- | ----------------------- |\n| H0 | PE00 | PE01 | PE02 | PE03 | i1                      |\n| H1 | PE10 | PE11 | PE12 | PE13 | 0                       |\n| H2 | PE20 | PE21 | PE22 | PE23 | o1                      |",
                    "rows": [
                        [
                            "V0",
                            "V1",
                            "",
                            "V2",
                            "V3",
                            "Processing Element (PE)"
                        ],
                        [
                            "H0",
                            "PE00",
                            "PE01",
                            "PE02",
                            "PE03",
                            "i1"
                        ],
                        [
                            "H1",
                            "PE10",
                            "PE11",
                            "PE12",
                            "PE13",
                            "0"
                        ],
                        [
                            "H2",
                            "PE20",
                            "PE21",
                            "PE22",
                            "PE23",
                            "o1"
                        ]
                    ],
                    "bBox": {
                        "x": 72.0,
                        "y": 43.11,
                        "w": 451.59,
                        "h": 751.56
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Figure 1: PE array\n\nFigure 2: Processing Element (PE)\n\nYour goal is to use this systolic array to perform the convolution of a 3x3 image (matrix I) with three 2x2 filters (matrices F, G, and H), to obtain three outputs (matrices O, U, and E):",
                    "md": "Figure 1: PE array\n\nFigure 2: Processing Element (PE)\n\nYour goal is to use this systolic array to perform the convolution of a 3x3 image (matrix I) with three 2x2 filters (matrices F, G, and H), to obtain three outputs (matrices O, U, and E):",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 236.21,
                        "w": 451.11,
                        "h": 162.03
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "| I00 | I01 | I02 | F00 | F01 | O00 | O01 |\n| --- | --- | --- | --- | --- | --- | --- |\n| I10 | I11 | I12 | F10 | F11 | O10 | O11 |\n| I20 | I21 | I22 |     |     |     |     |",
                    "rows": [
                        [
                            "I00",
                            "I01",
                            "I02",
                            "F00",
                            "F01",
                            "O00",
                            "O01"
                        ],
                        [
                            "I10",
                            "I11",
                            "I12",
                            "F10",
                            "F11",
                            "O10",
                            "O11"
                        ],
                        [
                            "I20",
                            "I21",
                            "I22",
                            "",
                            "",
                            "",
                            ""
                        ]
                    ],
                    "bBox": {
                        "x": 72.0,
                        "y": 43.11,
                        "w": 451.59,
                        "h": 751.56
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "| I00 | I01 | I02 | G00 | G01 | U00 | U01 |\n| --- | --- | --- | --- | --- | --- | --- |\n| I10 | I11 | I12 | G10 | G11 | U10 | U11 |\n| I20 | I21 | I22 |     |     |     |     |",
                    "rows": [
                        [
                            "I00",
                            "I01",
                            "I02",
                            "G00",
                            "G01",
                            "U00",
                            "U01"
                        ],
                        [
                            "I10",
                            "I11",
                            "I12",
                            "G10",
                            "G11",
                            "U10",
                            "U11"
                        ],
                        [
                            "I20",
                            "I21",
                            "I22",
                            "",
                            "",
                            "",
                            ""
                        ]
                    ],
                    "bBox": {
                        "x": 72.0,
                        "y": 43.11,
                        "w": 451.59,
                        "h": 751.56
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "| I00 | I01 | I02 | H00 | H01 | E00 | E01 |\n| --- | --- | --- | --- | --- | --- | --- |\n| I10 | I11 | I12 | H10 | H11 | E10 | E11 |\n| I20 | I21 | I22 |     |     |     |     |",
                    "rows": [
                        [
                            "I00",
                            "I01",
                            "I02",
                            "H00",
                            "H01",
                            "E00",
                            "E01"
                        ],
                        [
                            "I10",
                            "I11",
                            "I12",
                            "H10",
                            "H11",
                            "E10",
                            "E11"
                        ],
                        [
                            "I20",
                            "I21",
                            "I22",
                            "",
                            "",
                            "",
                            ""
                        ]
                    ],
                    "bBox": {
                        "x": 72.0,
                        "y": 43.11,
                        "w": 451.59,
                        "h": 751.56
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "As an example, the convolution of the matrix I with the filter F is computed as follows:\n\n- O00 = I00 \u2217 F00 + I01 \u2217 F01 + I10 \u2217 F10 + I11 \u2217 F11\n- O01 = I01 \u2217 F00 + I02 \u2217 F01 + I11 \u2217 F10 + I12 \u2217 F11\n- O10 = I10 \u2217 F00 + I11 \u2217 F01 + I20 \u2217 F10 + I21 \u2217 F11\n- O11 = I11 \u2217 F00 + I12 \u2217 F01 + I21 \u2217 F10 + I22 \u2217 F11\n\nFinal Exam\n\nPage 15 of 24",
                    "md": "As an example, the convolution of the matrix I with the filter F is computed as follows:\n\n- O00 = I00 \u2217 F00 + I01 \u2217 F01 + I10 \u2217 F10 + I11 \u2217 F11\n- O01 = I01 \u2217 F00 + I02 \u2217 F01 + I11 \u2217 F10 + I12 \u2217 F11\n- O10 = I10 \u2217 F00 + I11 \u2217 F01 + I20 \u2217 F10 + I21 \u2217 F11\n- O11 = I11 \u2217 F00 + I12 \u2217 F01 + I21 \u2217 F10 + I22 \u2217 F11\n\nFinal Exam\n\nPage 15 of 24",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 259.26,
                        "w": 451.32,
                        "h": 535.41
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 17,
            "text": "Initials:                              Design of Digital Circuits                    August 23rd, 2019\nYou should compute the three convolutions in the minimum possible amount of cycles. Fill the following\ntable with:\n  1. The input values (matrices I, F, G, and H) in the correct input ports of the systolic array (the\n     values can be repeated).\n  2. The output values and the corresponding PE where the outputs (matrices O, U, and E) are gen-\n     erated.\nFill the gaps only with relevant information.\ncycle H0 H1 H2       V0 V1 V2 V3      P E00 P E01 P E02 P E03 P E10 P E11 P E12 P E13 P E20 P E21 P E22 P E23\n  0    F00           I00\n  1    F01 G00       I01  I01\n  2    F10 G01 H00   I10  I02  I10\n  3    F11 G10 H01   I11  I11  I11  I11  O00\n  4         G11 H10       I12  I20  I12      O01                U00\n  5             H11            I21  I21            O10                U01                E00\n  6                                 I22                   O11               U10                E01\n  7                                                                               U11                E10\n  8                                                                                                        E11\n  9\n  10\n  11\n  12\n  13\n  14\n  15\nFinal Exam                                                                                Page 16 of 24",
            "md": "# Design of Digital Circuits\n\nAugust 23rd, 2019\n\nYou should compute the three convolutions in the minimum possible amount of cycles. Fill the following table with:\n\n1. The input values (matrices I, F, G, and H) in the correct input ports of the systolic array (the values can be repeated).\n2. The output values and the corresponding PE where the outputs (matrices O, U, and E) are generated.\n\nFill the gaps only with relevant information.\n\n| cycle | H0  | H1  | H2  | V0  | V1  | V2  | V3  | P   | E00 | E01 | E02 | E03 | P | E10 | E11 | E12 | E13 | P | E20 | E21 | E22 | E23 |\n| ----- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | - | --- | --- | --- | --- | - | --- | --- | --- | --- |\n| 0     | F00 |     |     | I00 |     |     |     |     |     |     |     |     |   |     |     |     |     |   |     |     |     |     |\n| 1     | F01 | G00 |     | I01 | I01 |     |     |     |     |     |     |     |   |     |     |     |     |   |     |     |     |     |\n| 2     | F10 | G01 | H00 | I10 | I02 | I10 |     |     |     |     |     |     |   |     |     |     |     |   |     |     |     |     |\n| 3     | F11 | G10 | H01 | I11 | I11 | I11 | I11 | O00 |     |     |     |     |   |     |     |     |     |   |     |     |     |     |\n| 4     |     | G11 | H10 | I12 | I20 | I12 |     | O01 |     | U00 |     |     |   |     |     |     |     |   |     |     |     |     |\n| 5     |     |     | H11 | I21 | I21 |     |     | O10 |     | U01 |     |     |   |     | E00 |     |     |   |     |     |     |     |\n| 6     |     |     |     | I22 |     |     |     | O11 |     | U10 |     |     |   |     | E01 |     |     |   |     |     |     |     |\n| 7     |     |     |     |     |     |     |     |     |     | U11 |     |     |   |     | E10 |     |     |   |     |     |     |     |\n| 8     |     |     |     |     |     |     |     |     |     |     |     |     |   |     | E11 |     |     |   |     |     |     |     |\n|       |     |     |     | 9   |     |     |     |     |     |     |     |     |   |     |     |     |     |   |     |     |     |     |\n|       |     | 10  |     |     |     |     |     |     |     |     |     |     |   |     |     |     |     |   |     |     |     |     |\n|       |     | 11  |     |     |     |     |     |     |     |     |     |     |   |     |     |     |     |   |     |     |     |     |\n|       |     | 12  |     |     |     |     |     |     |     |     |     |     |   |     |     |     |     |   |     |     |     |     |\n|       |     |     | 13  |     |     |     |     |     |     |     |     |     |   |     |     |     |     |   |     |     |     |     |\n| 14    |     |     |     |     |     |     |     |     |     |     |     |     |   |     |     |     |     |   |     |     |     |     |\n| 15    |     |     |     |     |     |     |     |     |     |     |     |     |   |     |     |     |     |   |     |     |     |     |\n\nFinal Exam\n\nPage 16 of 24",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits",
                    "md": "# Design of Digital Circuits",
                    "rows": null,
                    "bBox": {
                        "x": 241.96,
                        "y": 43.11,
                        "w": 110.97,
                        "h": 10.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "August 23rd, 2019\n\nYou should compute the three convolutions in the minimum possible amount of cycles. Fill the following table with:\n\n1. The input values (matrices I, F, G, and H) in the correct input ports of the systolic array (the values can be repeated).\n2. The output values and the corresponding PE where the outputs (matrices O, U, and E) are generated.\n\nFill the gaps only with relevant information.",
                    "md": "August 23rd, 2019\n\nYou should compute the three convolutions in the minimum possible amount of cycles. Fill the following table with:\n\n1. The input values (matrices I, F, G, and H) in the correct input ports of the systolic array (the values can be repeated).\n2. The output values and the corresponding PE where the outputs (matrices O, U, and E) are generated.\n\nFill the gaps only with relevant information.",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 43.11,
                        "w": 451.57,
                        "h": 277.14
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "| cycle | H0  | H1  | H2  | V0  | V1  | V2  | V3  | P   | E00 | E01 | E02 | E03 | P | E10 | E11 | E12 | E13 | P | E20 | E21 | E22 | E23 |\n| ----- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | - | --- | --- | --- | --- | - | --- | --- | --- | --- |\n| 0     | F00 |     |     | I00 |     |     |     |     |     |     |     |     |   |     |     |     |     |   |     |     |     |     |\n| 1     | F01 | G00 |     | I01 | I01 |     |     |     |     |     |     |     |   |     |     |     |     |   |     |     |     |     |\n| 2     | F10 | G01 | H00 | I10 | I02 | I10 |     |     |     |     |     |     |   |     |     |     |     |   |     |     |     |     |\n| 3     | F11 | G10 | H01 | I11 | I11 | I11 | I11 | O00 |     |     |     |     |   |     |     |     |     |   |     |     |     |     |\n| 4     |     | G11 | H10 | I12 | I20 | I12 |     | O01 |     | U00 |     |     |   |     |     |     |     |   |     |     |     |     |\n| 5     |     |     | H11 | I21 | I21 |     |     | O10 |     | U01 |     |     |   |     | E00 |     |     |   |     |     |     |     |\n| 6     |     |     |     | I22 |     |     |     | O11 |     | U10 |     |     |   |     | E01 |     |     |   |     |     |     |     |\n| 7     |     |     |     |     |     |     |     |     |     | U11 |     |     |   |     | E10 |     |     |   |     |     |     |     |\n| 8     |     |     |     |     |     |     |     |     |     |     |     |     |   |     | E11 |     |     |   |     |     |     |     |\n|       |     |     |     | 9   |     |     |     |     |     |     |     |     |   |     |     |     |     |   |     |     |     |     |\n|       |     | 10  |     |     |     |     |     |     |     |     |     |     |   |     |     |     |     |   |     |     |     |     |\n|       |     | 11  |     |     |     |     |     |     |     |     |     |     |   |     |     |     |     |   |     |     |     |     |\n|       |     | 12  |     |     |     |     |     |     |     |     |     |     |   |     |     |     |     |   |     |     |     |     |\n|       |     |     | 13  |     |     |     |     |     |     |     |     |     |   |     |     |     |     |   |     |     |     |     |\n| 14    |     |     |     |     |     |     |     |     |     |     |     |     |   |     |     |     |     |   |     |     |     |     |\n| 15    |     |     |     |     |     |     |     |     |     |     |     |     |   |     |     |     |     |   |     |     |     |     |",
                    "rows": [
                        [
                            "cycle",
                            "H0",
                            "H1",
                            "H2",
                            "V0",
                            "V1",
                            "V2",
                            "V3",
                            "P",
                            "E00",
                            "E01",
                            "E02",
                            "E03",
                            "P",
                            "E10",
                            "E11",
                            "E12",
                            "E13",
                            "P",
                            "E20",
                            "E21",
                            "E22",
                            "E23"
                        ],
                        [
                            "0",
                            "F00",
                            "",
                            "",
                            "I00",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "1",
                            "F01",
                            "G00",
                            "",
                            "I01",
                            "I01",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "2",
                            "F10",
                            "G01",
                            "H00",
                            "I10",
                            "I02",
                            "I10",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "3",
                            "F11",
                            "G10",
                            "H01",
                            "I11",
                            "I11",
                            "I11",
                            "I11",
                            "O00",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "4",
                            "",
                            "G11",
                            "H10",
                            "I12",
                            "I20",
                            "I12",
                            "",
                            "O01",
                            "",
                            "U00",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "5",
                            "",
                            "",
                            "H11",
                            "I21",
                            "I21",
                            "",
                            "",
                            "O10",
                            "",
                            "U01",
                            "",
                            "",
                            "",
                            "",
                            "E00",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "6",
                            "",
                            "",
                            "",
                            "I22",
                            "",
                            "",
                            "",
                            "O11",
                            "",
                            "U10",
                            "",
                            "",
                            "",
                            "",
                            "E01",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "7",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "U11",
                            "",
                            "",
                            "",
                            "",
                            "E10",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "8",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "E11",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "",
                            "",
                            "",
                            "",
                            "9",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "",
                            "",
                            "10",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "",
                            "",
                            "11",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "",
                            "",
                            "12",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "",
                            "",
                            "",
                            "13",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "14",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "15",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    ],
                    "bBox": {
                        "x": 72.0,
                        "y": 43.11,
                        "w": 485.93,
                        "h": 751.56
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Final Exam\n\nPage 16 of 24",
                    "md": "Final Exam\n\nPage 16 of 24",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 211.42,
                        "w": 451.32,
                        "h": 583.25
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 18,
            "text": "Initials:                            Design of Digital Circuits                  August 23rd, 2019\n9    GPUs and SIMD              [35 points]\nWe define the SIMD utilization of a program that runs on a GPU as the fraction of SIMD lanes that are\nkept busy with active threads during the run of a program. As we saw in lecture and practice exercises,\nthe SIMD utilization of a program is computed across the complete run of the program.\nThe following code segment is run on a GPU. Each thread executes a single iteration of the shown\nloop. Assume that the data values of the arrays A and B are already in vector registers so there are no\nloads and stores in this program. (Hint: Notice that there are 4 instructions in each iteration.) A warp\nin the GPU consists of 32 threads, and there are 32 SIMD lanes in the GPU.\nfor (i = 0; i < 1026; i++) {\n     if (A[i] < 33) {               // Instruction 1\n                B[i] = A[i] << 1;   // Instruction 2\n     }\n     if (A[i] > 33) {               // Instruction 3\n                B[i] = A[i] >> 1;   // Instruction 4\n     }\n}\nPlease answer the following five questions.\n(a) [2 points] How many warps does it take to execute this program?\n        33 warps.\n        Explanation:\n        The number of warps is calculated as:\n        #W arps = d #T otal_threadse,\n                      #W arp_size\n        where\n        #T otal_threads = 1026 = 210 + 2  (i.e., one thread per loop iteration),\n        and\n        #W arp_size = 32 = 25 (given).\n        Thus, the number of warps needed to run this program is:\n        #W arps = d 2\u00b9\u2070+2 e = 25 + 1 = 33.\n                       25\n(b) [10 points] What is the maximum possible SIMD utilization of this program? Show your work. (Hint:\n    The warp scheduler does not issue instructions where no threads are active).\n         3076 = 769 .\n          ~~3136</s>  <s>784~~  \n        Explanation:\n        The maximum SIMD utilization is achieved when all threads of the complete warps follow\n        the same execution path and execute Instruction 2 or Instruction 4 (A[i] > 33\n        or A[i] <   33), and the two active threads of the last warp do not execute Instruction\n        2 or Instruction 4 (A[i] =       33).\n        The maximum SIMD utilization sums to 1026+32\u00d732+1026 = 3076 .\n                                                 1056+1024+1056    ~~3136~~  \nFinal Exam                                                                            Page 17 of 24",
            "md": "# Design of Digital Circuits\n\nAugust 23rd, 2019\n\n# 9 GPUs and SIMD\n\n[35 points]\n\nWe define the SIMD utilization of a program that runs on a GPU as the fraction of SIMD lanes that are kept busy with active threads during the run of a program. As we saw in lecture and practice exercises, the SIMD utilization of a program is computed across the complete run of the program.\n\nThe following code segment is run on a GPU. Each thread executes a single iteration of the shown loop. Assume that the data values of the arrays A and B are already in vector registers so there are no loads and stores in this program. (Hint: Notice that there are 4 instructions in each iteration.) A warp in the GPU consists of 32 threads, and there are 32 SIMD lanes in the GPU.\n\nfor (i = 0; i < 1026; i++) {\nif (A[i] < 33) {               // Instruction 1\nB[i] = A[i] << 1;   // Instruction 2\n}\nif (A[i] > 33) {               // Instruction 3\nB[i] = A[i] >> 1;   // Instruction 4\n}\n}\n\nPlease answer the following five questions.\n\n# (a) [2 points] How many warps does it take to execute this program?\n\n33 warps.\n\nExplanation:\n\nThe number of warps is calculated as:\n\n#W arps = d #T otal_threadse, #W arp_size\n\nwhere\n\n#T otal_threads = 1026 = 210 + 2 (i.e., one thread per loop iteration),\n\nand\n\n#W arp_size = 32 = 25 (given).\n\nThus, the number of warps needed to run this program is:\n\n#W arps = d 2\u00b9\u2070+2 e = 25 + 1 = 33.\n\n# (b) [10 points] What is the maximum possible SIMD utilization of this program? Show your work. (Hint: The warp scheduler does not issue instructions where no threads are active)\n\n3076 = 769.\n\n~~3136 784~~\n\nExplanation:\n\nThe maximum SIMD utilization is achieved when all threads of the complete warps follow the same execution path and execute Instruction 2 or Instruction 4 (A[i] > 33 or A[i] < 33), and the two active threads of the last warp do not execute Instruction 2 or Instruction 4 (A[i] = 33).\n\nThe maximum SIMD utilization sums to 1026+32\u00d732+1026 = 3076.\n\n1056+1024+1056 ~~3136~~\n\nFinal Exam Page 17 of 24",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits",
                    "md": "# Design of Digital Circuits",
                    "rows": null,
                    "bBox": {
                        "x": 241.96,
                        "y": 43.11,
                        "w": 110.97,
                        "h": 10.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "August 23rd, 2019",
                    "md": "August 23rd, 2019",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 43.11,
                        "w": 451.36,
                        "h": 38.51
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "9 GPUs and SIMD",
                    "md": "# 9 GPUs and SIMD",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 67.62,
                        "w": 143.13,
                        "h": 389.94
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "[35 points]\n\nWe define the SIMD utilization of a program that runs on a GPU as the fraction of SIMD lanes that are kept busy with active threads during the run of a program. As we saw in lecture and practice exercises, the SIMD utilization of a program is computed across the complete run of the program.\n\nThe following code segment is run on a GPU. Each thread executes a single iteration of the shown loop. Assume that the data values of the arrays A and B are already in vector registers so there are no loads and stores in this program. (Hint: Notice that there are 4 instructions in each iteration.) A warp in the GPU consists of 32 threads, and there are 32 SIMD lanes in the GPU.\n\nfor (i = 0; i < 1026; i++) {\nif (A[i] < 33) {               // Instruction 1\nB[i] = A[i] << 1;   // Instruction 2\n}\nif (A[i] > 33) {               // Instruction 3\nB[i] = A[i] >> 1;   // Instruction 4\n}\n}\n\nPlease answer the following five questions.",
                    "md": "[35 points]\n\nWe define the SIMD utilization of a program that runs on a GPU as the fraction of SIMD lanes that are kept busy with active threads during the run of a program. As we saw in lecture and practice exercises, the SIMD utilization of a program is computed across the complete run of the program.\n\nThe following code segment is run on a GPU. Each thread executes a single iteration of the shown loop. Assume that the data values of the arrays A and B are already in vector registers so there are no loads and stores in this program. (Hint: Notice that there are 4 instructions in each iteration.) A warp in the GPU consists of 32 threads, and there are 32 SIMD lanes in the GPU.\n\nfor (i = 0; i < 1026; i++) {\nif (A[i] < 33) {               // Instruction 1\nB[i] = A[i] << 1;   // Instruction 2\n}\nif (A[i] > 33) {               // Instruction 3\nB[i] = A[i] >> 1;   // Instruction 4\n}\n}\n\nPlease answer the following five questions.",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 70.85,
                        "w": 451.76,
                        "h": 386.7
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "(a) [2 points] How many warps does it take to execute this program?",
                    "md": "# (a) [2 points] How many warps does it take to execute this program?",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 314.99,
                        "w": 302.15,
                        "h": 10.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "33 warps.\n\nExplanation:\n\nThe number of warps is calculated as:",
                    "md": "33 warps.\n\nExplanation:\n\nThe number of warps is calculated as:",
                    "rows": null,
                    "bBox": {
                        "x": 111.39,
                        "y": 339.96,
                        "w": 165.71,
                        "h": 289.9
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "W arps = d T otal_threadse, W arp_size",
                    "md": "#W arps = d #T otal_threadse, #W arp_size",
                    "rows": null,
                    "bBox": {
                        "x": 0.0,
                        "y": 0.0,
                        "w": 595.28,
                        "h": 841.89
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "where",
                    "md": "where",
                    "rows": null,
                    "bBox": {
                        "x": 111.39,
                        "y": 411.69,
                        "w": 25.0,
                        "h": 10.0
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "T otal_threads = 1026 = 210 + 2 (i.e., one thread per loop iteration),",
                    "md": "#T otal_threads = 1026 = 210 + 2 (i.e., one thread per loop iteration),",
                    "rows": null,
                    "bBox": {
                        "x": 265.77,
                        "y": 423.65,
                        "w": 155.83,
                        "h": 10.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "and",
                    "md": "and",
                    "rows": null,
                    "bBox": {
                        "x": 111.39,
                        "y": 447.56,
                        "w": 16.0,
                        "h": 10.0
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "W arp_size = 32 = 25 (given).",
                    "md": "#W arp_size = 32 = 25 (given).",
                    "rows": null,
                    "bBox": {
                        "x": 175.85,
                        "y": 502.92,
                        "w": 6.97,
                        "h": 7.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Thus, the number of warps needed to run this program is:",
                    "md": "Thus, the number of warps needed to run this program is:",
                    "rows": null,
                    "bBox": {
                        "x": 111.39,
                        "y": 483.42,
                        "w": 253.33,
                        "h": 10.0
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "W arps = d 2\u00b9\u2070+2 e = 25 + 1 = 33.",
                    "md": "#W arps = d 2\u00b9\u2070+2 e = 25 + 1 = 33.",
                    "rows": null,
                    "bBox": {
                        "x": 175.85,
                        "y": 502.92,
                        "w": 6.97,
                        "h": 7.0
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "(b) [10 points] What is the maximum possible SIMD utilization of this program? Show your work. (Hint: The warp scheduler does not issue instructions where no threads are active)",
                    "md": "# (b) [10 points] What is the maximum possible SIMD utilization of this program? Show your work. (Hint: The warp scheduler does not issue instructions where no threads are active)",
                    "rows": null,
                    "bBox": {
                        "x": 71.45,
                        "y": 411.69,
                        "w": 451.82,
                        "h": 122.8
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "3076 = 769.\n\n~~3136 784~~\n\nExplanation:\n\nThe maximum SIMD utilization is achieved when all threads of the complete warps follow the same execution path and execute Instruction 2 or Instruction 4 (A[i] > 33 or A[i] < 33), and the two active threads of the last warp do not execute Instruction 2 or Instruction 4 (A[i] = 33).\n\nThe maximum SIMD utilization sums to 1026+32\u00d732+1026 = 3076.\n\n1056+1024+1056 ~~3136~~\n\nFinal Exam Page 17 of 24",
                    "md": "3076 = 769.\n\n~~3136 784~~\n\nExplanation:\n\nThe maximum SIMD utilization is achieved when all threads of the complete warps follow the same execution path and execute Instruction 2 or Instruction 4 (A[i] > 33 or A[i] < 33), and the two active threads of the last warp do not execute Instruction 2 or Instruction 4 (A[i] = 33).\n\nThe maximum SIMD utilization sums to 1026+32\u00d732+1026 = 3076.\n\n1056+1024+1056 ~~3136~~\n\nFinal Exam Page 17 of 24",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 67.62,
                        "w": 451.32,
                        "h": 727.05
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 19,
            "text": " Initials:                              Design of Digital Circuits                    August 23rd, 2019\n (c) [5 points] Please describe what needs to be true about array A to reach the maximum possible SIMD\n     utilization asked in part (b). (Please cover all cases in your answer.)\n          For every 32 consecutive elements of A out of the first 1024 elements, every element should\n          be lower than 33 (if(A[i] <      33)), or greater than 33 (if(A[i] > 33)).       The last\n          two elements should be equal to 33. (NOTE: The solution is correct if the three cases are\n          given.)\n(d) [13 points] What is the minimum possible SIMD utilization of this program? Show your work.\n           353 .\n            ~~704~~  \n          Explanation:\n          Instruction 1 is executed by every active thread ( 1026    utilization).\n          The minimum SIMD utilization of Instruction 2           ~~1056~~  \n                                                                occurs if only one thread per warp\n          executes it.\n          Instruction 3 is again executed by every active thread ( 1026    utilization).\n          Finally, the minimum SIMD utilization of Instruction 4        ~~1056~~  \n                                                                       occurs if only one thread per\n          warp executes it.\n          The minimum SIMD utilization sums to 1026+1\u00d733+1026+1\u00d733 = 353 .\n                                                    1056+1056+1056+1056     ~~704~~  \n (e) [5 points] Please describe what needs to be true about array A to reach the minimum possible SIMD\n     utilization asked in part (d). (Please cover all cases in your answer.)\n          For every 32 consecutive elements among the first 1024 elements of A, one element should\n          be lower than 33 (if(A[i] <     33)), one element should be greater than 33 (if(A[i]\n          > 33)), and the remaining 30 elements should be equal to 33.\n          For the last 2 elements of A, one element should be lower than 33 (if(A[i] < 33)), and\n          the other element should be greater than 33 (if(A[i] > 33)).\n Final Exam                                                                                Page 18 of 24",
            "md": "# Design of Digital Circuits\n\nAugust 23rd, 2019\n\n# (c) [5 points]\n\nPlease describe what needs to be true about array A to reach the maximum possible SIMD utilization asked in part (b). (Please cover all cases in your answer.)\n\nFor every 32 consecutive elements of A out of the first 1024 elements, every element should be lower than 33 (if(A[i] &lt; 33)), or greater than 33 (if(A[i] &gt; 33)). The last two elements should be equal to 33. (NOTE: The solution is correct if the three cases are given.)\n\n# (d) [13 points]\n\nWhat is the minimum possible SIMD utilization of this program? Show your work.\n\n353 .\n\n~~704~~\n\nExplanation:\n\nInstruction 1 is executed by every active thread (1026 utilization). The minimum SIMD utilization of Instruction 2 ~~1056 occurs if only one thread per warp executes it. Instruction 3 is again executed by every active thread (1026 utilization). Finally, the minimum SIMD utilization of Instruction 4 1056~~ occurs if only one thread per warp executes it.\n\nThe minimum SIMD utilization sums to 1026 + 1 \u00d7 33 + 1026 + 1 \u00d7 33 = 353 .\n\n1056 + 1056 + 1056 + 1056 ~~704~~\n\n# (e) [5 points]\n\nPlease describe what needs to be true about array A to reach the minimum possible SIMD utilization asked in part (d). (Please cover all cases in your answer.)\n\nFor every 32 consecutive elements among the first 1024 elements of A, one element should be lower than 33 (if(A[i] &lt; 33)), one element should be greater than 33 (if(A[i] &gt; 33)), and the remaining 30 elements should be equal to 33. For the last 2 elements of A, one element should be lower than 33 (if(A[i] &lt; 33)), and the other element should be greater than 33 (if(A[i] &gt; 33)).\n\nFinal Exam\n\nPage 18 of 24",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits",
                    "md": "# Design of Digital Circuits",
                    "rows": null,
                    "bBox": {
                        "x": 241.96,
                        "y": 43.11,
                        "w": 110.97,
                        "h": 10.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "August 23rd, 2019",
                    "md": "August 23rd, 2019",
                    "rows": null,
                    "bBox": {
                        "x": 443.23,
                        "y": 43.11,
                        "w": 80.13,
                        "h": 10.0
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "(c) [5 points]",
                    "md": "# (c) [5 points]",
                    "rows": null,
                    "bBox": {
                        "x": 0.0,
                        "y": 0.0,
                        "w": 595.28,
                        "h": 841.89
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Please describe what needs to be true about array A to reach the maximum possible SIMD utilization asked in part (b). (Please cover all cases in your answer.)\n\nFor every 32 consecutive elements of A out of the first 1024 elements, every element should be lower than 33 (if(A[i] &lt; 33)), or greater than 33 (if(A[i] &gt; 33)). The last two elements should be equal to 33. (NOTE: The solution is correct if the three cases are given.)",
                    "md": "Please describe what needs to be true about array A to reach the maximum possible SIMD utilization asked in part (b). (Please cover all cases in your answer.)\n\nFor every 32 consecutive elements of A out of the first 1024 elements, every element should be lower than 33 (if(A[i] &lt; 33)), or greater than 33 (if(A[i] &gt; 33)). The last two elements should be equal to 33. (NOTE: The solution is correct if the three cases are given.)",
                    "rows": null,
                    "bBox": {
                        "x": 89.71,
                        "y": 83.96,
                        "w": 412.34,
                        "h": 129.4
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "(d) [13 points]",
                    "md": "# (d) [13 points]",
                    "rows": null,
                    "bBox": {
                        "x": 0.0,
                        "y": 0.0,
                        "w": 595.28,
                        "h": 841.89
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "What is the minimum possible SIMD utilization of this program? Show your work.\n\n353 .\n\n~~704~~\n\nExplanation:\n\nInstruction 1 is executed by every active thread (1026 utilization). The minimum SIMD utilization of Instruction 2 ~~1056 occurs if only one thread per warp executes it. Instruction 3 is again executed by every active thread (1026 utilization). Finally, the minimum SIMD utilization of Instruction 4 1056~~ occurs if only one thread per warp executes it.\n\nThe minimum SIMD utilization sums to 1026 + 1 \u00d7 33 + 1026 + 1 \u00d7 33 = 353 .\n\n1056 + 1056 + 1056 + 1056 ~~704~~",
                    "md": "What is the minimum possible SIMD utilization of this program? Show your work.\n\n353 .\n\n~~704~~\n\nExplanation:\n\nInstruction 1 is executed by every active thread (1026 utilization). The minimum SIMD utilization of Instruction 2 ~~1056 occurs if only one thread per warp executes it. Instruction 3 is again executed by every active thread (1026 utilization). Finally, the minimum SIMD utilization of Instruction 4 1056~~ occurs if only one thread per warp executes it.\n\nThe minimum SIMD utilization sums to 1026 + 1 \u00d7 33 + 1026 + 1 \u00d7 33 = 353 .\n\n1056 + 1056 + 1056 + 1056 ~~704~~",
                    "rows": null,
                    "bBox": {
                        "x": 111.39,
                        "y": 339.09,
                        "w": 390.07,
                        "h": 133.91
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "(e) [5 points]",
                    "md": "# (e) [5 points]",
                    "rows": null,
                    "bBox": {
                        "x": 0.0,
                        "y": 0.0,
                        "w": 595.28,
                        "h": 841.89
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Please describe what needs to be true about array A to reach the minimum possible SIMD utilization asked in part (d). (Please cover all cases in your answer.)\n\nFor every 32 consecutive elements among the first 1024 elements of A, one element should be lower than 33 (if(A[i] &lt; 33)), one element should be greater than 33 (if(A[i] &gt; 33)), and the remaining 30 elements should be equal to 33. For the last 2 elements of A, one element should be lower than 33 (if(A[i] &lt; 33)), and the other element should be greater than 33 (if(A[i] &gt; 33)).\n\nFinal Exam\n\nPage 18 of 24",
                    "md": "Please describe what needs to be true about array A to reach the minimum possible SIMD utilization asked in part (d). (Please cover all cases in your answer.)\n\nFor every 32 consecutive elements among the first 1024 elements of A, one element should be lower than 33 (if(A[i] &lt; 33)), one element should be greater than 33 (if(A[i] &gt; 33)), and the remaining 30 elements should be equal to 33. For the last 2 elements of A, one element should be lower than 33 (if(A[i] &lt; 33)), and the other element should be greater than 33 (if(A[i] &gt; 33)).\n\nFinal Exam\n\nPage 18 of 24",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 179.44,
                        "w": 451.32,
                        "h": 615.23
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 20,
            "text": "Initials:                             Design of Digital Circuits                  August 23rd, 2019\n10     Reverse Engineering Caches                  [40 points]\nYou are trying to reverse-engineer the characteristics of a cache in a system, so that you can design\na more efficient, machine-specific implementation of an algorithm you are working on.  To do so, you\nhave come up with three sequences of memory accesses to various bytes in the system in an attempt to\ndetermine the following four cache characteristics:\n   \u2022 Cache block size (8, 16, 32, 64, or 128 B).\n   \u2022 Cache associativity (1-, 2-, 4-, or 8-way).\n   \u2022 Cache size (4 or 8 KB).\n   \u2022 Cache replacement policy (LRU or FIFO).\nThe only statistic that you can collect on this system is cache hit rate after performing each sequence of\nmemory accesses. Here is what you observe:\n            Sequence          Addresses Accessed (Oldest \u2192 Youngest)            Hit Rate\n               1.      31      8192   63    16384    4096   8192   64   16384   3/8\n               2.      32768   0      129   1024     3072   8192                0\n               3.      0       4       8    4096     64     128                 1\nAssume that the cache is initially empty at the beginning of the first sequence, but not at the beginning\nof the second and third sequences. The sequences are executed back-to-back, i.e., no other accesses take\nplace in between the three sequences. Thus, at the beginning of the second (third) sequence, the\ncontents are the same as at the end of the first (second) sequence.\nBased on what you observe, what are the following characteristics of the cache? Explain to get points.\nIf a characteristic cannot be known, then write \"Unknown\" and explain.\n(a) [10 points] Cache block size (8, 16, 32, 64, or 128 B)?\n         64 B.\n         Explanation:\n         Cache hit rate is 3/8 in sequence 1. This means that there are 3 hits. As two of them\n         should be the second accesses to 8192 and 16384, the other hit is the access to 63. With a\n         cache block of 64 B, the access to address 64 results in a miss.\nFinal Exam                                                                             Page 19 of 24",
            "md": "# Design of Digital Circuits\n\n# August 23rd, 2019\n\n# 10 Reverse Engineering Caches [40 points]\n\nYou are trying to reverse-engineer the characteristics of a cache in a system, so that you can design a more efficient, machine-specific implementation of an algorithm you are working on. To do so, you have come up with three sequences of memory accesses to various bytes in the system in an attempt to determine the following four cache characteristics:\n\n- Cache block size (8, 16, 32, 64, or 128 B).\n- Cache associativity (1-, 2-, 4-, or 8-way).\n- Cache size (4 or 8 KB).\n- Cache replacement policy (LRU or FIFO).\n\nThe only statistic that you can collect on this system is cache hit rate after performing each sequence of memory accesses. Here is what you observe:\n\n| Sequence | Addresses Accessed (Oldest \u2192 Youngest)     | Hit Rate |\n| -------- | ------------------------------------------ | -------- |\n| 1.       | 31, 8192, 63, 16384, 4096, 8192, 64, 16384 | 3/8      |\n| 2.       | 32768, 0, 129, 1024, 3072, 8192            | 0        |\n| 3.       | 0, 4, 8, 4096, 64, 128                     | 1        |\n\nAssume that the cache is initially empty at the beginning of the first sequence, but not at the beginning of the second and third sequences. The sequences are executed back-to-back, i.e., no other accesses take place in between the three sequences. Thus, at the beginning of the second (third) sequence, the contents are the same as at the end of the first (second) sequence.\n\nBased on what you observe, what are the following characteristics of the cache? Explain to get points. If a characteristic cannot be known, then write \"Unknown\" and explain.\n\n(a) [10 points] Cache block size (8, 16, 32, 64, or 128 B)?\n\n64 B.\n\nExplanation:\n\nCache hit rate is 3/8 in sequence 1. This means that there are 3 hits. As two of them should be the second accesses to 8192 and 16384, the other hit is the access to 63. With a cache block of 64 B, the access to address 64 results in a miss.\n\nFinal Exam\n\nPage 19 of 24",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits",
                    "md": "# Design of Digital Circuits",
                    "rows": null,
                    "bBox": {
                        "x": 241.96,
                        "y": 43.11,
                        "w": 110.97,
                        "h": 10.0
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "August 23rd, 2019",
                    "md": "# August 23rd, 2019",
                    "rows": null,
                    "bBox": {
                        "x": 176.88,
                        "y": 43.11,
                        "w": 346.48,
                        "h": 265.9
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "10 Reverse Engineering Caches [40 points]",
                    "md": "# 10 Reverse Engineering Caches [40 points]",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 67.62,
                        "w": 364.88,
                        "h": 241.39
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "You are trying to reverse-engineer the characteristics of a cache in a system, so that you can design a more efficient, machine-specific implementation of an algorithm you are working on. To do so, you have come up with three sequences of memory accesses to various bytes in the system in an attempt to determine the following four cache characteristics:\n\n- Cache block size (8, 16, 32, 64, or 128 B).\n- Cache associativity (1-, 2-, 4-, or 8-way).\n- Cache size (4 or 8 KB).\n- Cache replacement policy (LRU or FIFO).\n\nThe only statistic that you can collect on this system is cache hit rate after performing each sequence of memory accesses. Here is what you observe:",
                    "md": "You are trying to reverse-engineer the characteristics of a cache in a system, so that you can design a more efficient, machine-specific implementation of an algorithm you are working on. To do so, you have come up with three sequences of memory accesses to various bytes in the system in an attempt to determine the following four cache characteristics:\n\n- Cache block size (8, 16, 32, 64, or 128 B).\n- Cache associativity (1-, 2-, 4-, or 8-way).\n- Cache size (4 or 8 KB).\n- Cache replacement policy (LRU or FIFO).\n\nThe only statistic that you can collect on this system is cache hit rate after performing each sequence of memory accesses. Here is what you observe:",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 99.8,
                        "w": 451.42,
                        "h": 209.21
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "| Sequence | Addresses Accessed (Oldest \u2192 Youngest)     | Hit Rate |\n| -------- | ------------------------------------------ | -------- |\n| 1.       | 31, 8192, 63, 16384, 4096, 8192, 64, 16384 | 3/8      |\n| 2.       | 32768, 0, 129, 1024, 3072, 8192            | 0        |\n| 3.       | 0, 4, 8, 4096, 64, 128                     | 1        |",
                    "rows": [
                        [
                            "Sequence",
                            "Addresses Accessed (Oldest \u2192 Youngest)",
                            "Hit Rate"
                        ],
                        [
                            "1.",
                            "31, 8192, 63, 16384, 4096, 8192, 64, 16384",
                            "3/8"
                        ],
                        [
                            "2.",
                            "32768, 0, 129, 1024, 3072, 8192",
                            "0"
                        ],
                        [
                            "3.",
                            "0, 4, 8, 4096, 64, 128",
                            "1"
                        ]
                    ],
                    "bBox": {
                        "x": 72.0,
                        "y": 43.11,
                        "w": 451.42,
                        "h": 751.56
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Assume that the cache is initially empty at the beginning of the first sequence, but not at the beginning of the second and third sequences. The sequences are executed back-to-back, i.e., no other accesses take place in between the three sequences. Thus, at the beginning of the second (third) sequence, the contents are the same as at the end of the first (second) sequence.\n\nBased on what you observe, what are the following characteristics of the cache? Explain to get points. If a characteristic cannot be known, then write \"Unknown\" and explain.\n\n(a) [10 points] Cache block size (8, 16, 32, 64, or 128 B)?\n\n64 B.\n\nExplanation:\n\nCache hit rate is 3/8 in sequence 1. This means that there are 3 hits. As two of them should be the second accesses to 8192 and 16384, the other hit is the access to 63. With a cache block of 64 B, the access to address 64 results in a miss.\n\nFinal Exam\n\nPage 19 of 24",
                    "md": "Assume that the cache is initially empty at the beginning of the first sequence, but not at the beginning of the second and third sequences. The sequences are executed back-to-back, i.e., no other accesses take place in between the three sequences. Thus, at the beginning of the second (third) sequence, the contents are the same as at the end of the first (second) sequence.\n\nBased on what you observe, what are the following characteristics of the cache? Explain to get points. If a characteristic cannot be known, then write \"Unknown\" and explain.\n\n(a) [10 points] Cache block size (8, 16, 32, 64, or 128 B)?\n\n64 B.\n\nExplanation:\n\nCache hit rate is 3/8 in sequence 1. This means that there are 3 hits. As two of them should be the second accesses to 8192 and 16384, the other hit is the access to 63. With a cache block of 64 B, the access to address 64 results in a miss.\n\nFinal Exam\n\nPage 19 of 24",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 67.62,
                        "w": 451.32,
                        "h": 727.05
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 21,
            "text": "Initials:                             Design of Digital Circuits                    August 23rd, 2019\n(b) [10 points] Cache associativity (1-, 2-, 4-, or 8-way)?\n         4-way.\n         Explanation:\n         We already know that the cache block size is 64 B. Thus, there are 6 offset bits.\n         Regardless of cache size or associativity, addresses 0, 8192, 16384, and 32768 map to the\n         same set. Thus, the cache cannot be 1-way, because we would not see hits on 8192 and\n         16384 in sequence 1.\n         If the cache were 2-way, 4096 would also map to the same set as 0, 8192, 16384, and\n         32768. This would make impossible a cache hit on 8192 in sequence 1.\n         If the cache were 8-way, 0, 1024, 3072, 4096, 8192, 16384, and 32768 would all map to set\n         0. With 8 ways, address 0 would not be replaced, so it would hit in sequence 2.\n         Therefore, the cache is 4-way associative.\n(c) [10 points] Cache size (4 or 8 KB)?\n         8 KB.\n         Explanation:\n         We know that the cache is 4-way associative.     In the beginning of sequence 2, 32768\n         replaces 0 (regardless of the replacement policy).\n         The fact that 8192 misses in sequence 2 can be explained by two possible cases:\n         1. If the replacement policy is FIFO, the access to 0 in sequence 2 replaces 8192. Thus,\n            the cache size can be either 4 or 8 KB.\n         2. If the replacement policy is LRU, the access to 0 in sequence 2 replaces 4096. If the\n            cache size is 4 KB, 1024 and 3072 map to the same set as 0 and 8192, and 1024 replaces\n            8192.\n         Since there is a hit on 4096 in sequence 3, the size should be 8 KB. Otherwise, 3072 would\n         have replaced 4096.\n(d) [10 points] Cache replacement policy (LRU or FIFO)?\n         FIFO.\n         Explanation:\n         As explained above, if the cache size is 8 KB, only FIFO can make address 0 replace\n         address 8192 in sequence 2.\nFinal Exam                                                                              Page 20 of 24",
            "md": "# Design of Digital Circuits\n\nDate: August 23rd, 2019\n\n# (b) [10 points] Cache associativity (1-, 2-, 4-, or 8-way)?\n\n4-way.\n\n# Explanation:\n\nWe already know that the cache block size is 64 B. Thus, there are 6 offset bits. Regardless of cache size or associativity, addresses 0, 8192, 16384, and 32768 map to the same set. Thus, the cache cannot be 1-way, because we would not see hits on 8192 and 16384 in sequence 1.\n\nIf the cache were 2-way, 4096 would also map to the same set as 0, 8192, 16384, and 32768. This would make impossible a cache hit on 8192 in sequence 1.\n\nIf the cache were 8-way, 0, 1024, 3072, 4096, 8192, 16384, and 32768 would all map to set 0. With 8 ways, address 0 would not be replaced, so it would hit in sequence 2. Therefore, the cache is 4-way associative.\n\n# (c) [10 points] Cache size (4 or 8 KB)?\n\n8 KB.\n\n# Explanation:\n\nWe know that the cache is 4-way associative. In the beginning of sequence 2, 32768 replaces 0 (regardless of the replacement policy). The fact that 8192 misses in sequence 2 can be explained by two possible cases:\n\n1. If the replacement policy is FIFO, the access to 0 in sequence 2 replaces 8192. Thus, the cache size can be either 4 or 8 KB.\n2. If the replacement policy is LRU, the access to 0 in sequence 2 replaces 4096. If the cache size is 4 KB, 1024 and 3072 map to the same set as 0 and 8192, and 1024 replaces 8192.\n\nSince there is a hit on 4096 in sequence 3, the size should be 8 KB. Otherwise, 3072 would have replaced 4096.\n\n# (d) [10 points] Cache replacement policy (LRU or FIFO)?\n\nFIFO.\n\n# Explanation:\n\nAs explained above, if the cache size is 8 KB, only FIFO can make address 0 replace address 8192 in sequence 2.\n\nFinal Exam\n\nPage 20 of 24",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits",
                    "md": "# Design of Digital Circuits",
                    "rows": null,
                    "bBox": {
                        "x": 241.96,
                        "y": 43.11,
                        "w": 110.97,
                        "h": 10.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Date: August 23rd, 2019",
                    "md": "Date: August 23rd, 2019",
                    "rows": null,
                    "bBox": {
                        "x": 443.23,
                        "y": 43.11,
                        "w": 80.13,
                        "h": 10.0
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "(b) [10 points] Cache associativity (1-, 2-, 4-, or 8-way)?",
                    "md": "# (b) [10 points] Cache associativity (1-, 2-, 4-, or 8-way)?",
                    "rows": null,
                    "bBox": {
                        "x": 71.45,
                        "y": 72.0,
                        "w": 246.96,
                        "h": 10.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "4-way.",
                    "md": "4-way.",
                    "rows": null,
                    "bBox": {
                        "x": 111.39,
                        "y": 113.72,
                        "w": 27.0,
                        "h": 10.0
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Explanation:",
                    "md": "# Explanation:",
                    "rows": null,
                    "bBox": {
                        "x": 111.39,
                        "y": 137.63,
                        "w": 64.0,
                        "h": 514.93
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "We already know that the cache block size is 64 B. Thus, there are 6 offset bits. Regardless of cache size or associativity, addresses 0, 8192, 16384, and 32768 map to the same set. Thus, the cache cannot be 1-way, because we would not see hits on 8192 and 16384 in sequence 1.\n\nIf the cache were 2-way, 4096 would also map to the same set as 0, 8192, 16384, and 32768. This would make impossible a cache hit on 8192 in sequence 1.\n\nIf the cache were 8-way, 0, 1024, 3072, 4096, 8192, 16384, and 32768 would all map to set 0. With 8 ways, address 0 would not be replaced, so it would hit in sequence 2. Therefore, the cache is 4-way associative.",
                    "md": "We already know that the cache block size is 64 B. Thus, there are 6 offset bits. Regardless of cache size or associativity, addresses 0, 8192, 16384, and 32768 map to the same set. Thus, the cache cannot be 1-way, because we would not see hits on 8192 and 16384 in sequence 1.\n\nIf the cache were 2-way, 4096 would also map to the same set as 0, 8192, 16384, and 32768. This would make impossible a cache hit on 8192 in sequence 1.\n\nIf the cache were 8-way, 0, 1024, 3072, 4096, 8192, 16384, and 32768 would all map to set 0. With 8 ways, address 0 would not be replaced, so it would hit in sequence 2. Therefore, the cache is 4-way associative.",
                    "rows": null,
                    "bBox": {
                        "x": 111.39,
                        "y": 149.59,
                        "w": 390.38,
                        "h": 332.31
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "(c) [10 points] Cache size (4 or 8 KB)?",
                    "md": "# (c) [10 points] Cache size (4 or 8 KB)?",
                    "rows": null,
                    "bBox": {
                        "x": 72.55,
                        "y": 336.29,
                        "w": 168.39,
                        "h": 10.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "8 KB.",
                    "md": "8 KB.",
                    "rows": null,
                    "bBox": {
                        "x": 111.39,
                        "y": 364.3,
                        "w": 26.3,
                        "h": 10.0
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Explanation:",
                    "md": "# Explanation:",
                    "rows": null,
                    "bBox": {
                        "x": 111.39,
                        "y": 137.63,
                        "w": 64.0,
                        "h": 514.93
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "We know that the cache is 4-way associative. In the beginning of sequence 2, 32768 replaces 0 (regardless of the replacement policy). The fact that 8192 misses in sequence 2 can be explained by two possible cases:\n\n1. If the replacement policy is FIFO, the access to 0 in sequence 2 replaces 8192. Thus, the cache size can be either 4 or 8 KB.\n2. If the replacement policy is LRU, the access to 0 in sequence 2 replaces 4096. If the cache size is 4 KB, 1024 and 3072 map to the same set as 0 and 8192, and 1024 replaces 8192.\n\nSince there is a hit on 4096 in sequence 3, the size should be 8 KB. Otherwise, 3072 would have replaced 4096.",
                    "md": "We know that the cache is 4-way associative. In the beginning of sequence 2, 32768 replaces 0 (regardless of the replacement policy). The fact that 8192 misses in sequence 2 can be explained by two possible cases:\n\n1. If the replacement policy is FIFO, the access to 0 in sequence 2 replaces 8192. Thus, the cache size can be either 4 or 8 KB.\n2. If the replacement policy is LRU, the access to 0 in sequence 2 replaces 4096. If the cache size is 4 KB, 1024 and 3072 map to the same set as 0 and 8192, and 1024 replaces 8192.\n\nSince there is a hit on 4096 in sequence 3, the size should be 8 KB. Otherwise, 3072 would have replaced 4096.",
                    "rows": null,
                    "bBox": {
                        "x": 111.39,
                        "y": 364.3,
                        "w": 390.53,
                        "h": 177.37
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "(d) [10 points] Cache replacement policy (LRU or FIFO)?",
                    "md": "# (d) [10 points] Cache replacement policy (LRU or FIFO)?",
                    "rows": null,
                    "bBox": {
                        "x": 71.45,
                        "y": 560.74,
                        "w": 254.73,
                        "h": 10.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "FIFO.",
                    "md": "FIFO.",
                    "rows": null,
                    "bBox": {
                        "x": 111.39,
                        "y": 618.65,
                        "w": 27.0,
                        "h": 10.0
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Explanation:",
                    "md": "# Explanation:",
                    "rows": null,
                    "bBox": {
                        "x": 111.39,
                        "y": 137.63,
                        "w": 64.0,
                        "h": 514.93
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "As explained above, if the cache size is 8 KB, only FIFO can make address 0 replace address 8192 in sequence 2.\n\nFinal Exam\n\nPage 20 of 24",
                    "md": "As explained above, if the cache size is 8 KB, only FIFO can make address 0 replace address 8192 in sequence 2.\n\nFinal Exam\n\nPage 20 of 24",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 471.9,
                        "w": 451.32,
                        "h": 322.77
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 22,
            "text": "Initials:                              Design of Digital Circuits                    August 23rd, 2019\n11      Dataflow       [30 points]\n    \u2022 We define the switch node in Figure 3 to have 2 inputs (I, Ctrl) and 1 output (O). The Ctrl input\n      always enters perpendicularly to the switch node. If the Ctrl input has a True token (i.e., a token\n      with a value of 1), the O wire propagates the value on the I   wire. Else, the 2 input tokens (I,\n      Ctrl) are consumed, and no token is generated at the output (O).\n    \u2022 We define the inverter node in Figure 4 to have 1 input (I) and 1 output (O). The node negates\n      the input token (i.e., O = !I).\n    \u2022 We define the TF node in Figure 5 to have 3 inputs (IF , IT , Ctrl) and 1 output (O). When Ctrl\n      is set to True, O takes IT . When Ctrl is set to False, O takes IF .\n    \u2022 The \u2265 node outputs True only when the left input is greater than or equal to the right input.\n    \u2022 The +1 node outputs the input plus one.\n    \u2022 The + node outputs the sum of the two inputs.\n    \u2022 A node generates an output token when tokens exist at every      input, O\n                                                                              and  all input tokens are\n                                                                                                O\n      consumed.                                                                       Ctrl\n    \u2022 Where a single wire splits into multiple wires, the token travelling on the wire is replicated to all\n      wires.\n         O              I                                                     O        F      IF  I\n                                                                                       T      IT\n                                I              O\n                Ctrl                                                                 Ctrl   I\n      Figure 3: Switch Node             Figure 4: Inverter Node              Figure 5: TF Node\nConsider the dataflow graph on the following page. Numbers in dashed boxes represent tokens       Ctrl\n                                                                                              (with the\nvalue indicated by the number) in the initial state. The X and Y inputs automatically produce tokens as\nsoon as the previous token on the wire is consumed. The order of these tokens follows the   O\n                                                                                         pattern (note,\nthe following are all single digit values spaced appropriately for the reader to easily notice the pattern):\n                                         X: 0 01 011 0111 01111\n                                         Y: 1 22 333 4444 55555\nConsider the dataflow graph on the following page.      Please clearly describe the sequence of tokens\ngenerated at the output (OUT).\n     1, 4, 9, 16, 25\nFinal Exam                                                                                Page 21 of 24",
            "md": "# Design of Digital Circuits\n\n# Dataflow\n\n[30 points]\n\n- We define the switch node in Figure 3 to have 2 inputs (I, Ctrl) and 1 output (O). The Ctrl input always enters perpendicularly to the switch node. If the Ctrl input has a True token (i.e., a token with a value of 1), the O wire propagates the value on the I wire. Else, the 2 input tokens (I, Ctrl) are consumed, and no token is generated at the output (O).\n- We define the inverter node in Figure 4 to have 1 input (I) and 1 output (O). The node negates the input token (i.e., O = !I).\n- We define the TF node in Figure 5 to have 3 inputs (IF, IT, Ctrl) and 1 output (O). When Ctrl is set to True, O takes IT. When Ctrl is set to False, O takes IF.\n- The \u2265 node outputs True only when the left input is greater than or equal to the right input.\n- The +1 node outputs the input plus one.\n- The + node outputs the sum of the two inputs.\n- A node generates an output token when tokens exist at every input, and all input tokens are consumed.\n- Where a single wire splits into multiple wires, the token travelling on the wire is replicated to all wires.\n\nConsider the dataflow graph on the following page. Numbers in dashed boxes represent tokens (with the value indicated by the number) in the initial state. The X and Y inputs automatically produce tokens as soon as the previous token on the wire is consumed. The order of these tokens follows the pattern (note, the following are all single digit values spaced appropriately for the reader to easily notice the pattern):\n\nX: 0 01 011 0111 01111\n\nY: 1 22 333 4444 55555\n\nConsider the dataflow graph on the following page. Please clearly describe the sequence of tokens generated at the output (OUT).\n\n1, 4, 9, 16, 25\n\nFinal Exam\n\nPage 21 of 24",
            "images": [
                {
                    "name": "img_p21_1.png",
                    "height": 421.0,
                    "width": 730.0,
                    "x": 416.32017192,
                    "y": 254.08630743999998,
                    "original_width": 730,
                    "original_height": 421,
                    "type": null
                }
            ],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits",
                    "md": "# Design of Digital Circuits",
                    "rows": null,
                    "bBox": {
                        "x": 109.04,
                        "y": 43.11,
                        "w": 387.96,
                        "h": 398.42
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Dataflow",
                    "md": "# Dataflow",
                    "rows": null,
                    "bBox": {
                        "x": 103.56,
                        "y": 67.62,
                        "w": 393.44,
                        "h": 373.91
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "[30 points]\n\n- We define the switch node in Figure 3 to have 2 inputs (I, Ctrl) and 1 output (O). The Ctrl input always enters perpendicularly to the switch node. If the Ctrl input has a True token (i.e., a token with a value of 1), the O wire propagates the value on the I wire. Else, the 2 input tokens (I, Ctrl) are consumed, and no token is generated at the output (O).\n- We define the inverter node in Figure 4 to have 1 input (I) and 1 output (O). The node negates the input token (i.e., O = !I).\n- We define the TF node in Figure 5 to have 3 inputs (IF, IT, Ctrl) and 1 output (O). When Ctrl is set to True, O takes IT. When Ctrl is set to False, O takes IF.\n- The \u2265 node outputs True only when the left input is greater than or equal to the right input.\n- The +1 node outputs the input plus one.\n- The + node outputs the sum of the two inputs.\n- A node generates an output token when tokens exist at every input, and all input tokens are consumed.\n- Where a single wire splits into multiple wires, the token travelling on the wire is replicated to all wires.\n\nConsider the dataflow graph on the following page. Numbers in dashed boxes represent tokens (with the value indicated by the number) in the initial state. The X and Y inputs automatically produce tokens as soon as the previous token on the wire is consumed. The order of these tokens follows the pattern (note, the following are all single digit values spaced appropriately for the reader to easily notice the pattern):\n\nX: 0 01 011 0111 01111\n\nY: 1 22 333 4444 55555\n\nConsider the dataflow graph on the following page. Please clearly describe the sequence of tokens generated at the output (OUT).\n\n1, 4, 9, 16, 25\n\nFinal Exam\n\nPage 21 of 24",
                    "md": "[30 points]\n\n- We define the switch node in Figure 3 to have 2 inputs (I, Ctrl) and 1 output (O). The Ctrl input always enters perpendicularly to the switch node. If the Ctrl input has a True token (i.e., a token with a value of 1), the O wire propagates the value on the I wire. Else, the 2 input tokens (I, Ctrl) are consumed, and no token is generated at the output (O).\n- We define the inverter node in Figure 4 to have 1 input (I) and 1 output (O). The node negates the input token (i.e., O = !I).\n- We define the TF node in Figure 5 to have 3 inputs (IF, IT, Ctrl) and 1 output (O). When Ctrl is set to True, O takes IT. When Ctrl is set to False, O takes IF.\n- The \u2265 node outputs True only when the left input is greater than or equal to the right input.\n- The +1 node outputs the input plus one.\n- The + node outputs the sum of the two inputs.\n- A node generates an output token when tokens exist at every input, and all input tokens are consumed.\n- Where a single wire splits into multiple wires, the token travelling on the wire is replicated to all wires.\n\nConsider the dataflow graph on the following page. Numbers in dashed boxes represent tokens (with the value indicated by the number) in the initial state. The X and Y inputs automatically produce tokens as soon as the previous token on the wire is consumed. The order of these tokens follows the pattern (note, the following are all single digit values spaced appropriately for the reader to easily notice the pattern):\n\nX: 0 01 011 0111 01111\n\nY: 1 22 333 4444 55555\n\nConsider the dataflow graph on the following page. Please clearly describe the sequence of tokens generated at the output (OUT).\n\n1, 4, 9, 16, 25\n\nFinal Exam\n\nPage 21 of 24",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 67.62,
                        "w": 451.64,
                        "h": 727.05
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 23,
            "text": "Initials:                         Design of Digital Circuits               August 23rd, 2019\n                                    +1                       0         >         Y\n                                           0         F  T\n                                                                   1     0\n                                                                       T F        X\n                                     >\n OUT                                 +                                            Y\n                                         0\n                                    F  T\n                                       0\n                                                                  X: 0 01 011 0111 01111 \u2026.\nFinal Exam                                                                     Page 22 of 24",
            "md": "# Design of Digital Circuits\n\nAugust 23rd, 2019\n\n| Initials: | +1  |   | 0 | >  | Y |    |     |      |       |    |\n| --------- | --- | - | - | -- | - | -- | --- | ---- | ----- | -- |\n|           | 0   | F | T |    |   |    |     |      |       |    |\n|           | 1   | 0 |   | T  | F | X  |     |      |       |    |\n| >         | OUT |   | + |    | Y |    |     |      |       |    |\n|           | 0   | F | T | 0  |   |    |     |      |       |    |\n|           |     |   |   | X: | 0 | 01 | 011 | 0111 | 01111 | \u2026. |\n\nFinal Exam\n\nPage 22 of 24",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits",
                    "md": "# Design of Digital Circuits",
                    "rows": null,
                    "bBox": {
                        "x": 241.96,
                        "y": 43.11,
                        "w": 199.81,
                        "h": 280.31
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "August 23rd, 2019",
                    "md": "August 23rd, 2019",
                    "rows": null,
                    "bBox": {
                        "x": 262.83,
                        "y": 43.11,
                        "w": 260.53,
                        "h": 309.45
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "| Initials: | +1  |   | 0 | >  | Y |    |     |      |       |    |\n| --------- | --- | - | - | -- | - | -- | --- | ---- | ----- | -- |\n|           | 0   | F | T |    |   |    |     |      |       |    |\n|           | 1   | 0 |   | T  | F | X  |     |      |       |    |\n| >         | OUT |   | + |    | Y |    |     |      |       |    |\n|           | 0   | F | T | 0  |   |    |     |      |       |    |\n|           |     |   |   | X: | 0 | 01 | 011 | 0111 | 01111 | \u2026. |",
                    "rows": [
                        [
                            "Initials:",
                            "+1",
                            "",
                            "0",
                            ">",
                            "Y",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "",
                            "0",
                            "F",
                            "T",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "",
                            "1",
                            "0",
                            "",
                            "T",
                            "F",
                            "X",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            ">",
                            "OUT",
                            "",
                            "+",
                            "",
                            "Y",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "",
                            "0",
                            "F",
                            "T",
                            "0",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "",
                            "",
                            "",
                            "",
                            "X:",
                            "0",
                            "01",
                            "011",
                            "0111",
                            "01111",
                            "\u2026."
                        ]
                    ],
                    "bBox": {
                        "x": 72.0,
                        "y": 43.11,
                        "w": 451.36,
                        "h": 751.56
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Final Exam\n\nPage 22 of 24",
                    "md": "Final Exam\n\nPage 22 of 24",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 107.51,
                        "w": 451.32,
                        "h": 687.16
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 24,
            "text": "Initials:                             Design of Digital Circuits                  August 23rd, 2019\n12     BONUS: Branch Prediction                    [30 points]\nAssume a machine with a two-bit global history register (GHR) shared by all branches, which starts with\nNot Taken, Not Taken (2\u2019b00).   Each pattern history table entry (PHTE) contains a 2-bit saturating\ncounter. The saturating counter values are as follows:\n2\u2019b00 - Strongly Not Taken\n2\u2019b01 - Weakly Not Taken\n2\u2019b10 - Weakly Taken\n2\u2019b11 - Strongly Taken\nAssume the following piece of code runs on this machine. The code has two branches (labeled B1 and\nB2). When we say that a branch is taken, we mean that the code inside the curly brackets is executed.\nFor the following questions, assume that this is the only block of code that will ever be run, and the\nloop-condition branch (B1) is resolved first in the iteration before the if-condition branch (B2).\n for (int i = 0; i < 1000000; i++) { /* B1 */\n                                                 /* TAKEN PATH for B1 */\n      if (i % 3 == 0) {                          /* B2 */\n            j[i] = k[i] -1;                      /* TAKEN PATH for B2 */\n      }\n }\n(a) [20 points] Is it possible to observe that the branch predictor mispredicts 100% of the times in the\n    first 5 iterations of the loop? If yes, fill in the table below with all possible initial values each entry\n    can take. We represent Not Taken with N, and Taken with T.\n                                           Table 3: PHT\n                                        PHT Entry     Value\n                                            TT          01\n                                            TN          00\n                                            NT          01\n                                            NN       00 or 01\n    Show your work here.\n         Yes, it is possible.\n         The pattern after 5 iterations: TTTNTNTTTN.\n         In order to be more clear, we add indices to each branch outcome in the pattern above, to\n         represent their positions in the pattern: T1 T2 T3 N4 T5 N6 T7 T8 T9 N10\n           \u2022 For GHR=NN, the only observed branch is T1. Therefore, the PHTE for NN has to\n              be either 00 or 01 so that the branch predictor mispredicts the taken branch.\n           \u2022 For GHR=TT, the observed branches are T3 N4 T9 N10. The PHTE for TT has to\n              be initialized to 01 in order to cause the predictor to always mispredict. This way,\n              each N and T moves the saturating counter to their respective direction. This will\n              cause misprediction for the next branch which is always in the opposite direction.\n           \u2022  For GHR=TN, the observed branches are T5 T7. Thus, the initial PHTE value for\n              TN has to be 00 to mispredict both taken branches.\n           \u2022 For GHR=NT, the observed branches are T2 N6 T8. Similar to the TT entry, NT\u2019s\n              PHTE has to be initialized 01.\nFinal Exam                                                                             Page 23 of 24",
            "md": "# Design of Digital Circuits\n\nAugust 23rd, 2019\n\n# 12 BONUS: Branch Prediction\n\n[30 points]\n\nAssume a machine with a two-bit global history register (GHR) shared by all branches, which starts with Not Taken, Not Taken (2\u2019b00). Each pattern history table entry (PHTE) contains a 2-bit saturating counter. The saturating counter values are as follows:\n\n- 2\u2019b00 - Strongly Not Taken\n- 2\u2019b01 - Weakly Not Taken\n- 2\u2019b10 - Weakly Taken\n- 2\u2019b11 - Strongly Taken\n\nAssume the following piece of code runs on this machine. The code has two branches (labeled B1 and B2). When we say that a branch is taken, we mean that the code inside the curly brackets is executed. For the following questions, assume that this is the only block of code that will ever be run, and the loop-condition branch (B1) is resolved first in the iteration before the if-condition branch (B2).\n\nfor (int i = 0; i &lt; 1000000; i++) { /* B1 */\n/* TAKEN PATH for B1 */\nif (i % 3 == 0) { /* B2 */\nj[i] = k[i] -1; /* TAKEN PATH for B2 */\n}\n}\n\n# (a) [20 points]\n\nIs it possible to observe that the branch predictor mispredicts 100% of the times in the first 5 iterations of the loop? If yes, fill in the table below with all possible initial values each entry can take. We represent Not Taken with N, and Taken with T.\n\n# Table 3: PHT\n\n| PHT Entry | Value    |\n| --------- | -------- |\n| TT        | 01       |\n| TN        | 00       |\n| NT        | 01       |\n| NN        | 00 or 01 |\n\nShow your work here.\n\nYes, it is possible.\n\nThe pattern after 5 iterations: TTTNTNTTTN. In order to be more clear, we add indices to each branch outcome in the pattern above, to represent their positions in the pattern: T1 T2 T3 N4 T5 N6 T7 T8 T9 N10\n\n- For GHR=NN, the only observed branch is T1. Therefore, the PHTE for NN has to be either 00 or 01 so that the branch predictor mispredicts the taken branch.\n- For GHR=TT, the observed branches are T3 N4 T9 N10. The PHTE for TT has to be initialized to 01 in order to cause the predictor to always mispredict. This way, each N and T moves the saturating counter to their respective direction. This will cause misprediction for the next branch which is always in the opposite direction.\n- For GHR=TN, the observed branches are T5 T7. Thus, the initial PHTE value for TN has to be 00 to mispredict both taken branches.\n- For GHR=NT, the observed branches are T2 N6 T8. Similar to the TT entry, NT\u2019s PHTE has to be initialized 01.\n\nFinal Exam\n\nPage 23 of 24",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits",
                    "md": "# Design of Digital Circuits",
                    "rows": null,
                    "bBox": {
                        "x": 241.96,
                        "y": 43.11,
                        "w": 110.97,
                        "h": 10.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "August 23rd, 2019",
                    "md": "August 23rd, 2019",
                    "rows": null,
                    "bBox": {
                        "x": 323.75,
                        "y": 43.11,
                        "w": 199.61,
                        "h": 403.92
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "12 BONUS: Branch Prediction",
                    "md": "# 12 BONUS: Branch Prediction",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 67.62,
                        "w": 224.35,
                        "h": 14.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "[30 points]\n\nAssume a machine with a two-bit global history register (GHR) shared by all branches, which starts with Not Taken, Not Taken (2\u2019b00). Each pattern history table entry (PHTE) contains a 2-bit saturating counter. The saturating counter values are as follows:\n\n- 2\u2019b00 - Strongly Not Taken\n- 2\u2019b01 - Weakly Not Taken\n- 2\u2019b10 - Weakly Taken\n- 2\u2019b11 - Strongly Taken\n\nAssume the following piece of code runs on this machine. The code has two branches (labeled B1 and B2). When we say that a branch is taken, we mean that the code inside the curly brackets is executed. For the following questions, assume that this is the only block of code that will ever be run, and the loop-condition branch (B1) is resolved first in the iteration before the if-condition branch (B2).\n\nfor (int i = 0; i &lt; 1000000; i++) { /* B1 */\n/* TAKEN PATH for B1 */\nif (i % 3 == 0) { /* B2 */\nj[i] = k[i] -1; /* TAKEN PATH for B2 */\n}\n}",
                    "md": "[30 points]\n\nAssume a machine with a two-bit global history register (GHR) shared by all branches, which starts with Not Taken, Not Taken (2\u2019b00). Each pattern history table entry (PHTE) contains a 2-bit saturating counter. The saturating counter values are as follows:\n\n- 2\u2019b00 - Strongly Not Taken\n- 2\u2019b01 - Weakly Not Taken\n- 2\u2019b10 - Weakly Taken\n- 2\u2019b11 - Strongly Taken\n\nAssume the following piece of code runs on this machine. The code has two branches (labeled B1 and B2). When we say that a branch is taken, we mean that the code inside the curly brackets is executed. For the following questions, assume that this is the only block of code that will ever be run, and the loop-condition branch (B1) is resolved first in the iteration before the if-condition branch (B2).\n\nfor (int i = 0; i &lt; 1000000; i++) { /* B1 */\n/* TAKEN PATH for B1 */\nif (i % 3 == 0) { /* B2 */\nj[i] = k[i] -1; /* TAKEN PATH for B2 */\n}\n}",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 70.85,
                        "w": 451.6,
                        "h": 376.17
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "(a) [20 points]",
                    "md": "# (a) [20 points]",
                    "rows": null,
                    "bBox": {
                        "x": 266.41,
                        "y": 437.03,
                        "w": 15.0,
                        "h": 10.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Is it possible to observe that the branch predictor mispredicts 100% of the times in the first 5 iterations of the loop? If yes, fill in the table below with all possible initial values each entry can take. We represent Not Taken with N, and Taken with T.",
                    "md": "Is it possible to observe that the branch predictor mispredicts 100% of the times in the first 5 iterations of the loop? If yes, fill in the table below with all possible initial values each entry can take. We represent Not Taken with N, and Taken with T.",
                    "rows": null,
                    "bBox": {
                        "x": 89.71,
                        "y": 338.9,
                        "w": 433.86,
                        "h": 108.13
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Table 3: PHT",
                    "md": "# Table 3: PHT",
                    "rows": null,
                    "bBox": {
                        "x": 267.13,
                        "y": 373.12,
                        "w": 60.56,
                        "h": 10.0
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "| PHT Entry | Value    |\n| --------- | -------- |\n| TT        | 01       |\n| TN        | 00       |\n| NT        | 01       |\n| NN        | 00 or 01 |",
                    "rows": [
                        [
                            "PHT Entry",
                            "Value"
                        ],
                        [
                            "TT",
                            "01"
                        ],
                        [
                            "TN",
                            "00"
                        ],
                        [
                            "NT",
                            "01"
                        ],
                        [
                            "NN",
                            "00 or 01"
                        ]
                    ],
                    "bBox": {
                        "x": 72.0,
                        "y": 43.11,
                        "w": 451.6,
                        "h": 638.75
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Show your work here.\n\nYes, it is possible.\n\nThe pattern after 5 iterations: TTTNTNTTTN. In order to be more clear, we add indices to each branch outcome in the pattern above, to represent their positions in the pattern: T1 T2 T3 N4 T5 N6 T7 T8 T9 N10\n\n- For GHR=NN, the only observed branch is T1. Therefore, the PHTE for NN has to be either 00 or 01 so that the branch predictor mispredicts the taken branch.\n- For GHR=TT, the observed branches are T3 N4 T9 N10. The PHTE for TT has to be initialized to 01 in order to cause the predictor to always mispredict. This way, each N and T moves the saturating counter to their respective direction. This will cause misprediction for the next branch which is always in the opposite direction.\n- For GHR=TN, the observed branches are T5 T7. Thus, the initial PHTE value for TN has to be 00 to mispredict both taken branches.\n- For GHR=NT, the observed branches are T2 N6 T8. Similar to the TT entry, NT\u2019s PHTE has to be initialized 01.\n\nFinal Exam\n\nPage 23 of 24",
                    "md": "Show your work here.\n\nYes, it is possible.\n\nThe pattern after 5 iterations: TTTNTNTTTN. In order to be more clear, we add indices to each branch outcome in the pattern above, to represent their positions in the pattern: T1 T2 T3 N4 T5 N6 T7 T8 T9 N10\n\n- For GHR=NN, the only observed branch is T1. Therefore, the PHTE for NN has to be either 00 or 01 so that the branch predictor mispredicts the taken branch.\n- For GHR=TT, the observed branches are T3 N4 T9 N10. The PHTE for TT has to be initialized to 01 in order to cause the predictor to always mispredict. This way, each N and T moves the saturating counter to their respective direction. This will cause misprediction for the next branch which is always in the opposite direction.\n- For GHR=TN, the observed branches are T5 T7. Thus, the initial PHTE value for TN has to be 00 to mispredict both taken branches.\n- For GHR=NT, the observed branches are T2 N6 T8. Similar to the TT entry, NT\u2019s PHTE has to be initialized 01.\n\nFinal Exam\n\nPage 23 of 24",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 395.43,
                        "w": 451.32,
                        "h": 399.24
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 25,
            "text": "Initials:                                    Design of Digital Circuits              August 23rd, 2019\n         (b) [10 points] At steady-state, we observe the following pattern which repeats over time: TTTNTN,\n    with T representing Taken, and N representing Not Taken.      When GHR pattern equals to NT or\n    TT, the predictor will observe that the branch outcome will be either T or N. Therefore, no matter\n    what the initial values for these two entries are in the pattern history table (PHT), only one of\n    the branches can be predicted correctly. Thus prediction accuracy will never reach 100%. Explain\n    how using local history registers instead of the global history register will help bring the prediction\n    accuracy up to 100% during the steady state, by showing what each PHTE will saturate to.\n         For the outer loop, we will keep observing all Ts, and the counters will be set to 2\u2019b11 for\n         TT and lead to 100% accuracy for this branch.\n         The second branch will keep observing this repeated pattern: TNN. So entry TN will be\n         saturated to 2\u2019b00, entry NN will saturate to 2\u2019b11, and entry NT will saturate to 2\u2019b00.\nFinal Exam                                                                                Page 24 of 24",
            "md": "# Design of Digital Circuits\n\nAugust 23rd, 2019\n\n# (b) [10 points]\n\nAt steady-state, we observe the following pattern which repeats over time: TTTNTN, with T representing Taken, and N representing Not Taken. When GHR pattern equals to NT or TT, the predictor will observe that the branch outcome will be either T or N. Therefore, no matter what the initial values for these two entries are in the pattern history table (PHT), only one of the branches can be predicted correctly. Thus prediction accuracy will never reach 100%. Explain how using local history registers instead of the global history register will help bring the prediction accuracy up to 100% during the steady state, by showing what each PHTE will saturate to.\n\nFor the outer loop, we will keep observing all Ts, and the counters will be set to 2\u2019b11 for TT and lead to 100% accuracy for this branch.\n\nThe second branch will keep observing this repeated pattern: TNN. So entry TN will be saturated to 2\u2019b00, entry NN will saturate to 2\u2019b11, and entry NT will saturate to 2\u2019b00.\n\nFinal Exam\n\nPage 24 of 24",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Design of Digital Circuits",
                    "md": "# Design of Digital Circuits",
                    "rows": null,
                    "bBox": {
                        "x": 241.96,
                        "y": 43.11,
                        "w": 110.97,
                        "h": 10.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "August 23rd, 2019",
                    "md": "August 23rd, 2019",
                    "rows": null,
                    "bBox": {
                        "x": 443.23,
                        "y": 43.11,
                        "w": 80.13,
                        "h": 10.0
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "(b) [10 points]",
                    "md": "# (b) [10 points]",
                    "rows": null,
                    "bBox": {
                        "x": 0.0,
                        "y": 0.0,
                        "w": 595.28,
                        "h": 841.89
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "At steady-state, we observe the following pattern which repeats over time: TTTNTN, with T representing Taken, and N representing Not Taken. When GHR pattern equals to NT or TT, the predictor will observe that the branch outcome will be either T or N. Therefore, no matter what the initial values for these two entries are in the pattern history table (PHT), only one of the branches can be predicted correctly. Thus prediction accuracy will never reach 100%. Explain how using local history registers instead of the global history register will help bring the prediction accuracy up to 100% during the steady state, by showing what each PHTE will saturate to.\n\nFor the outer loop, we will keep observing all Ts, and the counters will be set to 2\u2019b11 for TT and lead to 100% accuracy for this branch.\n\nThe second branch will keep observing this repeated pattern: TNN. So entry TN will be saturated to 2\u2019b00, entry NN will saturate to 2\u2019b11, and entry NT will saturate to 2\u2019b00.\n\nFinal Exam\n\nPage 24 of 24",
                    "md": "At steady-state, we observe the following pattern which repeats over time: TTTNTN, with T representing Taken, and N representing Not Taken. When GHR pattern equals to NT or TT, the predictor will observe that the branch outcome will be either T or N. Therefore, no matter what the initial values for these two entries are in the pattern history table (PHT), only one of the branches can be predicted correctly. Thus prediction accuracy will never reach 100%. Explain how using local history registers instead of the global history register will help bring the prediction accuracy up to 100% during the steady state, by showing what each PHTE will saturate to.\n\nFor the outer loop, we will keep observing all Ts, and the counters will be set to 2\u2019b11 for TT and lead to 100% accuracy for this branch.\n\nThe second branch will keep observing this repeated pattern: TNN. So entry TN will be saturated to 2\u2019b00, entry NN will saturate to 2\u2019b11, and entry NT will saturate to 2\u2019b00.\n\nFinal Exam\n\nPage 24 of 24",
                    "rows": null,
                    "bBox": {
                        "x": 72.0,
                        "y": 83.96,
                        "w": 451.66,
                        "h": 710.71
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.276,
            "height": 841.89,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        }
    ],
    "job_metadata": {
        "job_pages": 0,
        "job_auto_mode_triggered_pages": 0,
        "job_is_cache_hit": true
    },
    "file_name": "OnurETHZ_exams/digitaltechnik-s19-en-sol.pdf",
    "job_id": "e4b5e690-2888-4865-9fb7-50b75e6cff4f",
    "is_done": false,
    "error": null
}