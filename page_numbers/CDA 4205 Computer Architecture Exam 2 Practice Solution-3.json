{
    "pages": [
        {
            "page": 1,
            "text": "Q1. Single-Cycle MIPS Processor\nWe wish to add the instruction jalr (jump and link register) to the single-cycle datapath.\nThe jump and link register instruction is described below:\n    jalr rd, rs # rd = pc + 4 , pc = rs\n         op\u2076 = 0   rs\u2075     0      rd\u2075      0     Funct\u2076 = 0x9\na)  Add any necessary datapath and control signals and draw the result datapath. You\n    should only add wires, gates, muxes to the datapath; do not modify the main functional\n    units (the memory, register file, and ALU) themselves. Try to keep your diagram neat!\n                               ExOp                     esui:\n                         Imm` 6  Extend\n                Address       Registers                Data\n                  nsttucjon       3                   Memory\n                                                     Aodress\n                Instruction\n                 Memory                              Data_\n                                             ALUCI\n       PcSrc     Imnzc\n                Rea                 tunc     ALU\n      Control                                       Contro\n     Branch Jump   ExtOp  Op RegDs: RegWrte   ALUSrc ALUOp  MemWrite  MemtoReg\n                                 Control Unit\nThe necessary changes to the datapath and control:\nFor  the  datapath, we  need  a  bigger 4input  multiplexer  at  the\ninput of  the PC. The first  input is used  to increment the  PC. The\nsecond  input is used  for taken  branches, where  the branch  target\nis  PCrelative. The  third input  is used  to jump  register,  where\nthe input  to the PC comes from  a generalpurpose register,  and the\nfourth input is used for jump instructions.\nFor  the  implementation   of  the  JALR  instruction:   to  jump  to\nregister  \u2018Rs\u2019, we need  to add a  path from  the output of  register\nRs  (first ALU input) back  to the PC  multiplexer input. PC  control\nunit  needs to  be updated  by adding  an input  control signal  JReg\n(Jump  Register) to  select PC  according  to the  value   of register\nRs. JReg  is generated by  the ALU control unit,  since   JALR is a R\n                                  1",
            "md": "# Q1. Single-Cycle MIPS Processor\n\nWe wish to add the instruction jalr (jump and link register) to the single-cycle datapath. The jump and link register instruction is described below:\n\njalr rd, rs # rd = pc + 4 , pc = rs\n\nop6 = 0   rs5     0      rd5      0     Funct6 = 0x9\n\n# a) Add any necessary datapath and control signals and draw the result datapath.\n\nYou should only add wires, gates, muxes to the datapath; do not modify the main functional units (the memory, register file, and ALU) themselves. Try to keep your diagram neat!\n\nExOp                     esui:\nImm` 6  Extend\nAddress       Registers                Data\nnsttucjon       3                   Memory\nAodress\nInstruction\nMemory                              Data_\nALUCI\nPcSrc     Imnzc\nRea                 tunc     ALU\nControl                                       Contro\nBranch Jump   ExtOp  Op RegDs: RegWrte   ALUSrc ALUOp  MemWrite  MemtoReg\nControl Unit\n\n# The necessary changes to the datapath and control:\n\nFor the datapath, we need a bigger 4-input multiplexer at the input of the PC. The first input is used to increment the PC. The second input is used for taken branches, where the branch target is PC-relative. The third input is used to jump register, where the input to the PC comes from a general-purpose register, and the fourth input is used for jump instructions.\n\nFor the implementation of the JALR instruction: to jump to register \u2018Rs\u2019, we need to add a path from the output of register Rs (first ALU input) back to the PC multiplexer input. PC control unit needs to be updated by adding an input control signal JReg (Jump Register) to select PC according to the value of register Rs. JReg is generated by the ALU control unit, since JALR is a R.",
            "images": [
                {
                    "name": "img_p0_1.png",
                    "height": 381.0,
                    "width": 624.0,
                    "x": 74.7,
                    "y": 233.29999999999995,
                    "original_width": 624,
                    "original_height": 381,
                    "type": null
                }
            ],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Q1. Single-Cycle MIPS Processor",
                    "md": "# Q1. Single-Cycle MIPS Processor",
                    "rows": null,
                    "bBox": {
                        "x": 56.8,
                        "y": 79.7,
                        "w": 474.06,
                        "h": 713.6
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "We wish to add the instruction jalr (jump and link register) to the single-cycle datapath. The jump and link register instruction is described below:\n\njalr rd, rs # rd = pc + 4 , pc = rs\n\nop6 = 0   rs5     0      rd5      0     Funct6 = 0x9",
                    "md": "We wish to add the instruction jalr (jump and link register) to the single-cycle datapath. The jump and link register instruction is described below:\n\njalr rd, rs # rd = pc + 4 , pc = rs\n\nop6 = 0   rs5     0      rd5      0     Funct6 = 0x9",
                    "rows": null,
                    "bBox": {
                        "x": 56.8,
                        "y": 103.1,
                        "w": 481.94,
                        "h": 653.0
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "a) Add any necessary datapath and control signals and draw the result datapath.",
                    "md": "# a) Add any necessary datapath and control signals and draw the result datapath.",
                    "rows": null,
                    "bBox": {
                        "x": 56.8,
                        "y": 182.1,
                        "w": 481.86,
                        "h": 574.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "You should only add wires, gates, muxes to the datapath; do not modify the main functional units (the memory, register file, and ALU) themselves. Try to keep your diagram neat!\n\nExOp                     esui:\nImm` 6  Extend\nAddress       Registers                Data\nnsttucjon       3                   Memory\nAodress\nInstruction\nMemory                              Data_\nALUCI\nPcSrc     Imnzc\nRea                 tunc     ALU\nControl                                       Contro\nBranch Jump   ExtOp  Op RegDs: RegWrte   ALUSrc ALUOp  MemWrite  MemtoReg\nControl Unit",
                    "md": "You should only add wires, gates, muxes to the datapath; do not modify the main functional units (the memory, register file, and ALU) themselves. Try to keep your diagram neat!\n\nExOp                     esui:\nImm` 6  Extend\nAddress       Registers                Data\nnsttucjon       3                   Memory\nAodress\nInstruction\nMemory                              Data_\nALUCI\nPcSrc     Imnzc\nRea                 tunc     ALU\nControl                                       Contro\nBranch Jump   ExtOp  Op RegDs: RegWrte   ALUSrc ALUOp  MemWrite  MemtoReg\nControl Unit",
                    "rows": null,
                    "bBox": {
                        "x": 56.8,
                        "y": 200.0,
                        "w": 481.94,
                        "h": 556.1
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "The necessary changes to the datapath and control:",
                    "md": "# The necessary changes to the datapath and control:",
                    "rows": null,
                    "bBox": {
                        "x": 56.8,
                        "y": 321.0,
                        "w": 481.86,
                        "h": 435.1
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "For the datapath, we need a bigger 4-input multiplexer at the input of the PC. The first input is used to increment the PC. The second input is used for taken branches, where the branch target is PC-relative. The third input is used to jump register, where the input to the PC comes from a general-purpose register, and the fourth input is used for jump instructions.\n\nFor the implementation of the JALR instruction: to jump to register \u2018Rs\u2019, we need to add a path from the output of register Rs (first ALU input) back to the PC multiplexer input. PC control unit needs to be updated by adding an input control signal JReg (Jump Register) to select PC according to the value of register Rs. JReg is generated by the ALU control unit, since JALR is a R.",
                    "md": "For the datapath, we need a bigger 4-input multiplexer at the input of the PC. The first input is used to increment the PC. The second input is used for taken branches, where the branch target is PC-relative. The third input is used to jump register, where the input to the PC comes from a general-purpose register, and the fourth input is used for jump instructions.\n\nFor the implementation of the JALR instruction: to jump to register \u2018Rs\u2019, we need to add a path from the output of register Rs (first ALU input) back to the PC multiplexer input. PC control unit needs to be updated by adding an input control signal JReg (Jump Register) to select PC according to the value of register Rs. JReg is generated by the ALU control unit, since JALR is a R.",
                    "rows": null,
                    "bBox": {
                        "x": 56.8,
                        "y": 321.0,
                        "w": 481.94,
                        "h": 435.1
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.0,
            "height": 842.0,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 2,
            "text": "    type instruction  and JReg depends  on the function        field  only.  When\n    JReg  is    equal to \u20181\u2019,  PCSrc  (PC  control     unit       output  control\n    signal)  will be  '10' to select the  value        of register Rs as  input\n    to  PC.\n    Also, we  need to store PC+4 in  register Rd.      To accomplish      this, we\n    need another  multiplexer to select  between       the incremented     PC, the\n    ALU  result and   data memory out,  to be  placed  on         BusW. Also, we\n    need  to add a    path from the output of the      incremented    PC  to   the\n    input  of   this  new multiplexer.  A  control     signal     \u2018RA\u2019    (Return\n    Address)  is needed  to select  between  the       incremented    PC  and  the\n    ALU result.  The  MemtoReg multiplexer selects     between    the output of\n    the \u2018RA\u2019 multiplexer and the Data Memory output to place on BusW.\n    b)  Show the values of the control signals to control the execution of the jalr instruction. If\n        you need add a new control signal, please add it along with its value to the table below.\n        Use the following table for ALUCtrl.\n                      ALU function    4-bit ALU Control\n                       AND                 0001\n                       OR                  0010\n                       XOR                  0011\n                       ADD                 0100\n                       SUB                 0101\n                       SLT                 0110\n    The main  control signals for the  JALR instruction        are the same    for\n    other  Rtype instructions,  such  as ADD  and      SUB.    The ALU Control\n    signals  for the  JALR  instruction  require       JReg =     1, RA = 0    and\n    ALUCtrl  is a  don't care.  These control  signals         are shown  in   the\n    table below:\nRegDs  RegWrit  ExtO  ALUSr MemRead MemWrite MemtoReg  ALUCtr  J  Be  Bn  R  JRe\nt      e        p     c                                l          q   e   A  g\nRd =     1      X     X        0       0        0      XXXX    0  0   0   0  1\n 1\n    Q2. Processor Performance\n    Suppose we add the multiply and divide instructions. The operation times are as follows:\n    Instruction memory access time = 190 ps,  Data memory access time = 190 ps,\n    Register file read access time = 150 ps,  Register file write access = 150 ps\n    ALU delay for basic instructions = 190 ps,  ALU delay for multiply or divide = 550 ps\n    Ignore the other delays in the multiplexers, control unit, sign-extension, etc.\n                                      2",
            "md": "\n# Q1. JALR Instruction Control Signals\n\nType instruction and JReg depends on the function field only. When JReg is equal to \u20181\u2019, PCSrc (PC control unit output control signal) will be '10' to select the value of register Rs as input to PC.\n\nAlso, we need to store PC+4 in register Rd. To accomplish this, we need another multiplexer to select between the incremented PC, the ALU result and data memory out, to be placed on BusW. Also, we need to add a path from the output of the incremented PC to the input of this new multiplexer. A control signal \u2018RA\u2019 (Return Address) is needed to select between the incremented PC and the ALU result. The MemtoReg multiplexer selects between the output of the \u2018RA\u2019 multiplexer and the Data Memory output to place on BusW.\n\n# b) Control Signals for JALR Instruction\n\nShow the values of the control signals to control the execution of the jalr instruction. If you need to add a new control signal, please add it along with its value to the table below. Use the following table for ALUCtrl.\n\n| ALU function | 4-bit ALU Control |\n| ------------ | ----------------- |\n| AND          | 0001              |\n| OR           | 0010              |\n| XOR          | 0011              |\n| ADD          | 0100              |\n| SUB          | 0101              |\n| SLT          | 0110              |\n\nThe main control signals for the JALR instruction are the same for other Rtype instructions, such as ADD and SUB. The ALU Control signals for the JALR instruction require JReg = 1, RA = 0 and ALUCtrl is a don't care. These control signals are shown in the table below:\n\n| RegDs | RegWrit | ExtO | ALUSr | MemRead | MemWrite | MemtoReg | ALUCtr | J | Be | Bn | R | JReg |\n| ----- | ------- | ---- | ----- | ------- | -------- | -------- | ------ | - | -- | -- | - | ---- |\n| 1     | X       | X    | 0     | 0       | 0        | XXXX     | 0      | 0 | 0  | 0  | 1 | 1    |\n\n# Q2. Processor Performance\n\nSuppose we add the multiply and divide instructions. The operation times are as follows:\n\n- Instruction memory access time = 190 ps\n- Data memory access time = 190 ps\n- Register file read access time = 150 ps\n- Register file write access = 150 ps\n- ALU delay for basic instructions = 190 ps\n- ALU delay for multiply or divide = 550 ps\n\nIgnore the other delays in the multiplexers, control unit, sign-extension, etc.\n\n",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Q1. JALR Instruction Control Signals",
                    "md": "# Q1. JALR Instruction Control Signals",
                    "rows": null,
                    "bBox": {
                        "x": 28.2,
                        "y": 79.2,
                        "w": 509.76,
                        "h": 544.5
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Type instruction and JReg depends on the function field only. When JReg is equal to \u20181\u2019, PCSrc (PC control unit output control signal) will be '10' to select the value of register Rs as input to PC.\n\nAlso, we need to store PC+4 in register Rd. To accomplish this, we need another multiplexer to select between the incremented PC, the ALU result and data memory out, to be placed on BusW. Also, we need to add a path from the output of the incremented PC to the input of this new multiplexer. A control signal \u2018RA\u2019 (Return Address) is needed to select between the incremented PC and the ALU result. The MemtoReg multiplexer selects between the output of the \u2018RA\u2019 multiplexer and the Data Memory output to place on BusW.",
                    "md": "Type instruction and JReg depends on the function field only. When JReg is equal to \u20181\u2019, PCSrc (PC control unit output control signal) will be '10' to select the value of register Rs as input to PC.\n\nAlso, we need to store PC+4 in register Rd. To accomplish this, we need another multiplexer to select between the incremented PC, the ALU result and data memory out, to be placed on BusW. Also, we need to add a path from the output of the incremented PC to the input of this new multiplexer. A control signal \u2018RA\u2019 (Return Address) is needed to select between the incremented PC and the ALU result. The MemtoReg multiplexer selects between the output of the \u2018RA\u2019 multiplexer and the Data Memory output to place on BusW.",
                    "rows": null,
                    "bBox": {
                        "x": 28.2,
                        "y": 79.2,
                        "w": 510.73,
                        "h": 544.5
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "b) Control Signals for JALR Instruction",
                    "md": "# b) Control Signals for JALR Instruction",
                    "rows": null,
                    "bBox": {
                        "x": 28.2,
                        "y": 79.2,
                        "w": 510.54,
                        "h": 512.8
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Show the values of the control signals to control the execution of the jalr instruction. If you need to add a new control signal, please add it along with its value to the table below. Use the following table for ALUCtrl.",
                    "md": "Show the values of the control signals to control the execution of the jalr instruction. If you need to add a new control signal, please add it along with its value to the table below. Use the following table for ALUCtrl.",
                    "rows": null,
                    "bBox": {
                        "x": 28.2,
                        "y": 79.2,
                        "w": 510.79,
                        "h": 528.9
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "| ALU function | 4-bit ALU Control |\n| ------------ | ----------------- |\n| AND          | 0001              |\n| OR           | 0010              |\n| XOR          | 0011              |\n| ADD          | 0100              |\n| SUB          | 0101              |\n| SLT          | 0110              |",
                    "rows": [
                        [
                            "ALU function",
                            "4-bit ALU Control"
                        ],
                        [
                            "AND",
                            "0001"
                        ],
                        [
                            "OR",
                            "0010"
                        ],
                        [
                            "XOR",
                            "0011"
                        ],
                        [
                            "ADD",
                            "0100"
                        ],
                        [
                            "SUB",
                            "0101"
                        ],
                        [
                            "SLT",
                            "0110"
                        ]
                    ],
                    "bBox": {
                        "x": 56.8,
                        "y": 79.2,
                        "w": 481.94,
                        "h": 663.5
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "The main control signals for the JALR instruction are the same for other Rtype instructions, such as ADD and SUB. The ALU Control signals for the JALR instruction require JReg = 1, RA = 0 and ALUCtrl is a don't care. These control signals are shown in the table below:",
                    "md": "The main control signals for the JALR instruction are the same for other Rtype instructions, such as ADD and SUB. The ALU Control signals for the JALR instruction require JReg = 1, RA = 0 and ALUCtrl is a don't care. These control signals are shown in the table below:",
                    "rows": null,
                    "bBox": {
                        "x": 28.2,
                        "y": 79.2,
                        "w": 510.73,
                        "h": 544.5
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "| RegDs | RegWrit | ExtO | ALUSr | MemRead | MemWrite | MemtoReg | ALUCtr | J | Be | Bn | R | JReg |\n| ----- | ------- | ---- | ----- | ------- | -------- | -------- | ------ | - | -- | -- | - | ---- |\n| 1     | X       | X    | 0     | 0       | 0        | XXXX     | 0      | 0 | 0  | 0  | 1 | 1    |",
                    "rows": [
                        [
                            "RegDs",
                            "RegWrit",
                            "ExtO",
                            "ALUSr",
                            "MemRead",
                            "MemWrite",
                            "MemtoReg",
                            "ALUCtr",
                            "J",
                            "Be",
                            "Bn",
                            "R",
                            "JReg"
                        ],
                        [
                            "1",
                            "X",
                            "X",
                            "0",
                            "0",
                            "0",
                            "XXXX",
                            "0",
                            "0",
                            "0",
                            "0",
                            "1",
                            "1"
                        ]
                    ],
                    "bBox": {
                        "x": 28.2,
                        "y": 79.2,
                        "w": 510.54,
                        "h": 663.5
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Q2. Processor Performance",
                    "md": "# Q2. Processor Performance",
                    "rows": null,
                    "bBox": {
                        "x": 56.8,
                        "y": 196.2,
                        "w": 481.94,
                        "h": 597.1
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Suppose we add the multiply and divide instructions. The operation times are as follows:\n\n- Instruction memory access time = 190 ps\n- Data memory access time = 190 ps\n- Register file read access time = 150 ps\n- Register file write access = 150 ps\n- ALU delay for basic instructions = 190 ps\n- ALU delay for multiply or divide = 550 ps\n\nIgnore the other delays in the multiplexers, control unit, sign-extension, etc.",
                    "md": "Suppose we add the multiply and divide instructions. The operation times are as follows:\n\n- Instruction memory access time = 190 ps\n- Data memory access time = 190 ps\n- Register file read access time = 150 ps\n- Register file write access = 150 ps\n- ALU delay for basic instructions = 190 ps\n- ALU delay for multiply or divide = 550 ps\n\nIgnore the other delays in the multiplexers, control unit, sign-extension, etc.",
                    "rows": null,
                    "bBox": {
                        "x": 28.2,
                        "y": 79.2,
                        "w": 510.73,
                        "h": 663.5
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.0,
            "height": 842.0,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 3,
            "text": "Assume the following instruction mix: 30% ALU, 15% multiply & divide, 20% load, 10%\nstore, 15% branch, and 10% jump.\na)  What is the total delay for each instruction class and the clock cycle for the single-\n    cycle CPU design?\n                 Instruction Instruction Register ALU  Data  Register    Total\n             Class     Memory              Read  Memory         Write  Delay\n                  Basic ALU     190 ps  150 ps  190 ps          150 ps  680 ps\n                  Mul & Div     190 ps  150 ps  550 ps          150 ps  1040 ps\n                     Load       190 ps  150 ps  190 ps  190 ps  150 ps  870 ps\n             Store              190 ps  150 ps  190 ps  190 ps          720 ps\n                    Branch      190 ps  150 ps  190 ps                  530 ps\n                     Jump       190 ps  150 ps                          340 ps\n    Clock cycle = max delay = 1040 ps.\nb)  Assume we fix the clock cycle to 200 ps for a multi-cycle CPU, what is the CPI for\n    each instruction class and the speedup over a fixed-length clock cycle?\n    Solution:\n    CPI for Basic ALU = 4 cycles\n    CPI for Multiply & Divide = 6 cycles\n    CPI for Load = 5 cycles\n    CPI for Store = 4 cycles\n    CPI for Branch = 3 cycles\n    CPI for Jump = 2 cycles\n    Average CPI = 0.3 * 4 + 0.15 * 6 + 0.2* 5 + 0.1 * 4 + 0.15 * 3         +\n    0.1 * 2 = 4.15\n    Speedup  of  multi-cycle  over      single-cycle =          (1040 * 1) / (200 *\n    4.15) = 1.253\nQ3. (10 pts) Consider the following MIPS code sequence:\n    a: add $t0,  $s0,  $s1\n    b: sub $t1,  $s2,  $t0\n    c: xor $t0,  $s0,  $s1\n    d: or $t2,   $t1,  $t0\na)  (5 pts) Identify all the RAW dependencies between pairs of instructions.\n    Instruction b is dependent on instruction a ($t0)\n    Instruction d is dependent on instruction b ($t1)\n    Instruction d is dependent on instruction c ($t0)\n                                        3",
            "md": "\n# Instruction Mix and Delays\n\nAssume the following instruction mix: 30% ALU, 15% multiply & divide, 20% load, 10% store, 15% branch, and 10% jump.\n\n# a) Total Delay for Each Instruction Class\n\nWhat is the total delay for each instruction class and the clock cycle for the single-cycle CPU design?\n\n| Instruction Class | Instruction Register | ALU    | Data Memory Read | Data Memory Write | Total Delay |\n| ----------------- | -------------------- | ------ | ---------------- | ----------------- | ----------- |\n| Basic ALU         | 190 ps               | 150 ps | 190 ps           | 150 ps            | 680 ps      |\n| Mul & Div         | 190 ps               | 150 ps | 550 ps           | 150 ps            | 1040 ps     |\n| Load              | 190 ps               | 150 ps | 190 ps           | 190 ps            | 870 ps      |\n| Store             | 190 ps               | 150 ps | 190 ps           |                   | 720 ps      |\n| Branch            | 190 ps               | 150 ps | 190 ps           |                   | 530 ps      |\n| Jump              | 190 ps               | 150 ps |                  |                   | 340 ps      |\n\nClock cycle = max delay = 1040 ps.\n\n# b) CPI for Each Instruction Class\n\nAssume we fix the clock cycle to 200 ps for a multi-cycle CPU, what is the CPI for each instruction class and the speedup over a fixed-length clock cycle?\n\nSolution:\n\n- CPI for Basic ALU = 4 cycles\n- CPI for Multiply & Divide = 6 cycles\n- CPI for Load = 5 cycles\n- CPI for Store = 4 cycles\n- CPI for Branch = 3 cycles\n- CPI for Jump = 2 cycles\n\nAverage CPI = 0.3 * 4 + 0.15 * 6 + 0.2 * 5 + 0.1 * 4 + 0.15 * 3 + 0.1 * 2 = 4.15\n\nSpeedup of multi-cycle over single-cycle = (1040 * 1) / (200 * 4.15) = 1.253\n\n# Q3. (10 pts) MIPS Code Sequence\n\nConsider the following MIPS code sequence:\n\na: add $t0,  $s0,  $s1\nb: sub $t1,  $s2,  $t0\nc: xor $t0,  $s0,  $s1\nd: or $t2,   $t1,  $t0\n\n# a) RAW Dependencies\n\n(5 pts) Identify all the RAW dependencies between pairs of instructions.\n\n- Instruction b is dependent on instruction a ($t0)\n- Instruction d is dependent on instruction b ($t1)\n- Instruction d is dependent on instruction c ($t0)\n\n",
            "images": [
                {
                    "name": "img_p2_1.png",
                    "height": 255.0,
                    "width": 659.0,
                    "x": 127.8,
                    "y": 157.49999999999997,
                    "original_width": 659,
                    "original_height": 255,
                    "type": null
                }
            ],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Instruction Mix and Delays",
                    "md": "# Instruction Mix and Delays",
                    "rows": null,
                    "bBox": {
                        "x": 137.0,
                        "y": 164.0,
                        "w": 319.0,
                        "h": 21.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Assume the following instruction mix: 30% ALU, 15% multiply & divide, 20% load, 10% store, 15% branch, and 10% jump.",
                    "md": "Assume the following instruction mix: 30% ALU, 15% multiply & divide, 20% load, 10% store, 15% branch, and 10% jump.",
                    "rows": null,
                    "bBox": {
                        "x": 56.8,
                        "y": 79.7,
                        "w": 480.91,
                        "h": 713.6
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "a) Total Delay for Each Instruction Class",
                    "md": "# a) Total Delay for Each Instruction Class",
                    "rows": null,
                    "bBox": {
                        "x": 56.8,
                        "y": 118.7,
                        "w": 400.2,
                        "h": 573.6
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "What is the total delay for each instruction class and the clock cycle for the single-cycle CPU design?",
                    "md": "What is the total delay for each instruction class and the clock cycle for the single-cycle CPU design?",
                    "rows": null,
                    "bBox": {
                        "x": 77.8,
                        "y": 118.7,
                        "w": 459.48,
                        "h": 408.7
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "| Instruction Class | Instruction Register | ALU    | Data Memory Read | Data Memory Write | Total Delay |\n| ----------------- | -------------------- | ------ | ---------------- | ----------------- | ----------- |\n| Basic ALU         | 190 ps               | 150 ps | 190 ps           | 150 ps            | 680 ps      |\n| Mul & Div         | 190 ps               | 150 ps | 550 ps           | 150 ps            | 1040 ps     |\n| Load              | 190 ps               | 150 ps | 190 ps           | 190 ps            | 870 ps      |\n| Store             | 190 ps               | 150 ps | 190 ps           |                   | 720 ps      |\n| Branch            | 190 ps               | 150 ps | 190 ps           |                   | 530 ps      |\n| Jump              | 190 ps               | 150 ps |                  |                   | 340 ps      |",
                    "rows": [
                        [
                            "Instruction Class",
                            "Instruction Register",
                            "ALU",
                            "Data Memory Read",
                            "Data Memory Write",
                            "Total Delay"
                        ],
                        [
                            "Basic ALU",
                            "190 ps",
                            "150 ps",
                            "190 ps",
                            "150 ps",
                            "680 ps"
                        ],
                        [
                            "Mul & Div",
                            "190 ps",
                            "150 ps",
                            "550 ps",
                            "150 ps",
                            "1040 ps"
                        ],
                        [
                            "Load",
                            "190 ps",
                            "150 ps",
                            "190 ps",
                            "190 ps",
                            "870 ps"
                        ],
                        [
                            "Store",
                            "190 ps",
                            "150 ps",
                            "190 ps",
                            "",
                            "720 ps"
                        ],
                        [
                            "Branch",
                            "190 ps",
                            "150 ps",
                            "190 ps",
                            "",
                            "530 ps"
                        ],
                        [
                            "Jump",
                            "190 ps",
                            "150 ps",
                            "",
                            "",
                            "340 ps"
                        ]
                    ],
                    "bBox": {
                        "x": 56.8,
                        "y": 79.7,
                        "w": 481.6,
                        "h": 713.6
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Clock cycle = max delay = 1040 ps.",
                    "md": "Clock cycle = max delay = 1040 ps.",
                    "rows": null,
                    "bBox": {
                        "x": 77.8,
                        "y": 172.0,
                        "w": 382.2,
                        "h": 355.4
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "b) CPI for Each Instruction Class",
                    "md": "# b) CPI for Each Instruction Class",
                    "rows": null,
                    "bBox": {
                        "x": 56.8,
                        "y": 164.0,
                        "w": 184.2,
                        "h": 169.5
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Assume we fix the clock cycle to 200 ps for a multi-cycle CPU, what is the CPI for each instruction class and the speedup over a fixed-length clock cycle?\n\nSolution:\n\n- CPI for Basic ALU = 4 cycles\n- CPI for Multiply & Divide = 6 cycles\n- CPI for Load = 5 cycles\n- CPI for Store = 4 cycles\n- CPI for Branch = 3 cycles\n- CPI for Jump = 2 cycles\n\nAverage CPI = 0.3 * 4 + 0.15 * 6 + 0.2 * 5 + 0.1 * 4 + 0.15 * 3 + 0.1 * 2 = 4.15\n\nSpeedup of multi-cycle over single-cycle = (1040 * 1) / (200 * 4.15) = 1.253",
                    "md": "Assume we fix the clock cycle to 200 ps for a multi-cycle CPU, what is the CPI for each instruction class and the speedup over a fixed-length clock cycle?\n\nSolution:\n\n- CPI for Basic ALU = 4 cycles\n- CPI for Multiply & Divide = 6 cycles\n- CPI for Load = 5 cycles\n- CPI for Store = 4 cycles\n- CPI for Branch = 3 cycles\n- CPI for Jump = 2 cycles\n\nAverage CPI = 0.3 * 4 + 0.15 * 6 + 0.2 * 5 + 0.1 * 4 + 0.15 * 3 + 0.1 * 2 = 4.15\n\nSpeedup of multi-cycle over single-cycle = (1040 * 1) / (200 * 4.15) = 1.253",
                    "rows": null,
                    "bBox": {
                        "x": 77.8,
                        "y": 164.0,
                        "w": 460.6,
                        "h": 629.3
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Q3. (10 pts) MIPS Code Sequence",
                    "md": "# Q3. (10 pts) MIPS Code Sequence",
                    "rows": null,
                    "bBox": {
                        "x": 294.9,
                        "y": 784.3,
                        "w": 6.0,
                        "h": 9.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Consider the following MIPS code sequence:\n\na: add $t0,  $s0,  $s1\nb: sub $t1,  $s2,  $t0\nc: xor $t0,  $s0,  $s1\nd: or $t2,   $t1,  $t0",
                    "md": "Consider the following MIPS code sequence:\n\na: add $t0,  $s0,  $s1\nb: sub $t1,  $s2,  $t0\nc: xor $t0,  $s0,  $s1\nd: or $t2,   $t1,  $t0",
                    "rows": null,
                    "bBox": {
                        "x": 77.8,
                        "y": 594.5,
                        "w": 126.1,
                        "h": 57.8
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "a) RAW Dependencies",
                    "md": "# a) RAW Dependencies",
                    "rows": null,
                    "bBox": {
                        "x": 56.8,
                        "y": 118.7,
                        "w": 11.0,
                        "h": 573.6
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "(5 pts) Identify all the RAW dependencies between pairs of instructions.\n\n- Instruction b is dependent on instruction a ($t0)\n- Instruction d is dependent on instruction b ($t1)\n- Instruction d is dependent on instruction c ($t0)",
                    "md": "(5 pts) Identify all the RAW dependencies between pairs of instructions.\n\n- Instruction b is dependent on instruction a ($t0)\n- Instruction d is dependent on instruction b ($t1)\n- Instruction d is dependent on instruction c ($t0)",
                    "rows": null,
                    "bBox": {
                        "x": 77.8,
                        "y": 164.0,
                        "w": 391.38,
                        "h": 586.0
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.0,
            "height": 842.0,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 4,
            "text": "b)  (3 pts) Identify all the WAR dependencies between pairs of instructions\n    Instruction c is dependent on instruction b ($t0)\nc)  (2 pts) Identify all the WAW dependencies between pairs of instructions\n    Instruction c is dependent on instruction a ($t0)\n                                        4",
            "md": "# Dependencies in Instructions\n\n# b) (3 pts) Identify all the WAR dependencies between pairs of instructions\n\nInstruction c is dependent on instruction b ($t0)\n\n# c) (2 pts) Identify all the WAW dependencies between pairs of instructions\n\nInstruction c is dependent on instruction a ($t0)\n\n4",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Dependencies in Instructions",
                    "md": "# Dependencies in Instructions",
                    "rows": null,
                    "bBox": {
                        "x": 0.0,
                        "y": 0.0,
                        "w": 595.0,
                        "h": 842.0
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "b) (3 pts) Identify all the WAR dependencies between pairs of instructions",
                    "md": "# b) (3 pts) Identify all the WAR dependencies between pairs of instructions",
                    "rows": null,
                    "bBox": {
                        "x": 56.8,
                        "y": 79.7,
                        "w": 396.64,
                        "h": 12.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Instruction c is dependent on instruction b ($t0)",
                    "md": "Instruction c is dependent on instruction b ($t0)",
                    "rows": null,
                    "bBox": {
                        "x": 77.8,
                        "y": 96.2,
                        "w": 352.8,
                        "h": 12.0
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "c) (2 pts) Identify all the WAW dependencies between pairs of instructions",
                    "md": "# c) (2 pts) Identify all the WAW dependencies between pairs of instructions",
                    "rows": null,
                    "bBox": {
                        "x": 56.8,
                        "y": 120.8,
                        "w": 398.84,
                        "h": 12.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Instruction c is dependent on instruction a ($t0)\n\n4",
                    "md": "Instruction c is dependent on instruction a ($t0)\n\n4",
                    "rows": null,
                    "bBox": {
                        "x": 77.8,
                        "y": 137.3,
                        "w": 352.8,
                        "h": 656.0
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.0,
            "height": 842.0,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 5,
            "text": "             Q4. (25 pts) Use the following MIPS code fragment:\n                        I1:     ADDI    $3, $0, 100             # $3 = 100\n                        I2:     ADD     $4, $0, $0               # $4 = 0\n                 Loop:\n                        I3:     LW             $5, 0($1)                  # $5 = MEM[$1]\n                        I4:     ADD     $4, $4, $5              # $4 = $4 + $5\n                        I5:     LW             $6, 0($2)                  # $6 = MEM[$2]\n                        I6:     SUB     $4, $4, $6              # $4 = $4 \u2013 $6\n                        I7:     ADDI    $1, $1, 4               # $1 = $1 + 4\n                        I8:     ADDI    $2, $2, 4               # $2 = $2 + 4\n                        I9:     ADDI    $3, $3, -1              # $3 = $3 \u2013 1\n                        I10:    BNE     $3, $0, Loop             # if ($3 != 0) goto Loop\n            a)\n             (10 pts) Show the timing of one loop iteration on the 5-stage MIPS pipeline without forwarding hardware. Complete the timing\n                 table, showing all the stall cycles. Assume that the register write is in the first half of the clock cycle and the register read is in\n                the second half. Also assume that the branch will stall the pipeline for 1 clock cycle only. Ignore the \"startup cost\" of the\n                 pipeline.\n      1     2     3    4     5       6       7     8     9    10    11    12    13    14    15      16    17    18    1   20      21    22     2  24      25\nI1    IF    ID    E   MEM   WB                                                                                        9                        3\nI2          IF    I   EX     MEM    WB\n                  X\nI3                I   ID    EX       MEM    WB\n                  D\nI4                F   IF    Stall   Stall   ID    EX    ME    WB\nI5                                          IF    ID    EX     MEM  WB\n                                                        M\nI6                                                IF    St     Sta  ID    EX    MEM   WB\nI7                                                      al    ll    IF    ID    EX     MEM  WB\nI8                                                                        IF    ID    EX     MEM    WB\nI9                                                                              IF    ID    EX      MEM   WB\n                                                                              5",
            "md": "\n# Q4. (25 pts) Use the following MIPS code fragment:\n\nI1:     ADDI    $3, $0, 100             # $3 = 100\nI2:     ADD     $4, $0, $0               # $4 = 0\nLoop:\nI3:     LW             $5, 0($1)                  # $5 = MEM[$1]\nI4:     ADD     $4, $4, $5              # $4 = $4 + $5\nI5:     LW             $6, 0($2)                  # $6 = MEM[$2]\nI6:     SUB     $4, $4, $6              # $4 = $4 \u2013 $6\nI7:     ADDI    $1, $1, 4               # $1 = $1 + 4\nI8:     ADDI    $2, $2, 4               # $2 = $2 + 4\nI9:     ADDI    $3, $3, -1              # $3 = $3 \u2013 1\nI10:    BNE     $3, $0, Loop             # if ($3 != 0) goto Loop\n\n# a) (10 pts) Show the timing of one loop iteration on the 5-stage MIPS pipeline without forwarding hardware. Complete the timing table, showing all the stall cycles. Assume that the register write is in the first half of the clock cycle and the register read is in the second half. Also assume that the branch will stall the pipeline for 1 clock cycle only. Ignore the \"startup cost\" of the pipeline.\n\n|    | 1  | 2  | 3  | 4   | 5     | 6     | 7   | 8  | 9   | 10  | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 |\n| -- | -- | -- | -- | --- | ----- | ----- | --- | -- | --- | --- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- |\n| I1 | IF | ID | E  | MEM | WB    |       |     |    |     |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| I2 |    | IF | ID | EX  | MEM   | WB    |     |    |     |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| I3 |    |    | IF | ID  | EX    | MEM   | WB  |    |     |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| I4 |    |    | F  | IF  | Stall | Stall | ID  | EX | MEM | WB  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| I5 |    |    |    | IF  | ID    | EX    | MEM | WB |     |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| I6 |    |    |    | IF  | St    | Sta   | ID  | EX | MEM | WB  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| I7 |    |    |    |     | al    | ll    | IF  | ID | EX  | MEM | WB |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| I8 |    |    |    |     |       | IF    | ID  | EX | MEM | WB  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| I9 |    |    |    |     |       |       | IF  | ID | EX  | MEM | WB |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n\n",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Q4. (25 pts) Use the following MIPS code fragment:",
                    "md": "# Q4. (25 pts) Use the following MIPS code fragment:",
                    "rows": null,
                    "bBox": {
                        "x": 77.4,
                        "y": 65.5,
                        "w": 752.9,
                        "h": 481.2
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "I1:     ADDI    $3, $0, 100             # $3 = 100\nI2:     ADD     $4, $0, $0               # $4 = 0\nLoop:\nI3:     LW             $5, 0($1)                  # $5 = MEM[$1]\nI4:     ADD     $4, $4, $5              # $4 = $4 + $5\nI5:     LW             $6, 0($2)                  # $6 = MEM[$2]\nI6:     SUB     $4, $4, $6              # $4 = $4 \u2013 $6\nI7:     ADDI    $1, $1, 4               # $1 = $1 + 4\nI8:     ADDI    $2, $2, 4               # $2 = $2 + 4\nI9:     ADDI    $3, $3, -1              # $3 = $3 \u2013 1\nI10:    BNE     $3, $0, Loop             # if ($3 != 0) goto Loop",
                    "md": "I1:     ADDI    $3, $0, 100             # $3 = 100\nI2:     ADD     $4, $0, $0               # $4 = 0\nLoop:\nI3:     LW             $5, 0($1)                  # $5 = MEM[$1]\nI4:     ADD     $4, $4, $5              # $4 = $4 + $5\nI5:     LW             $6, 0($2)                  # $6 = MEM[$2]\nI6:     SUB     $4, $4, $6              # $4 = $4 \u2013 $6\nI7:     ADDI    $1, $1, 4               # $1 = $1 + 4\nI8:     ADDI    $2, $2, 4               # $2 = $2 + 4\nI9:     ADDI    $3, $3, -1              # $3 = $3 \u2013 1\nI10:    BNE     $3, $0, Loop             # if ($3 != 0) goto Loop",
                    "rows": null,
                    "bBox": {
                        "x": 12.4,
                        "y": 79.9,
                        "w": 752.0,
                        "h": 466.8
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "a) (10 pts) Show the timing of one loop iteration on the 5-stage MIPS pipeline without forwarding hardware. Complete the timing table, showing all the stall cycles. Assume that the register write is in the first half of the clock cycle and the register read is in the second half. Also assume that the branch will stall the pipeline for 1 clock cycle only. Ignore the \"startup cost\" of the pipeline.",
                    "md": "# a) (10 pts) Show the timing of one loop iteration on the 5-stage MIPS pipeline without forwarding hardware. Complete the timing table, showing all the stall cycles. Assume that the register write is in the first half of the clock cycle and the register read is in the second half. Also assume that the branch will stall the pipeline for 1 clock cycle only. Ignore the \"startup cost\" of the pipeline.",
                    "rows": null,
                    "bBox": {
                        "x": 42.9,
                        "y": 252.7,
                        "w": 724.53,
                        "h": 294.0
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "|    | 1  | 2  | 3  | 4   | 5     | 6     | 7   | 8  | 9   | 10  | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 |\n| -- | -- | -- | -- | --- | ----- | ----- | --- | -- | --- | --- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- |\n| I1 | IF | ID | E  | MEM | WB    |       |     |    |     |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| I2 |    | IF | ID | EX  | MEM   | WB    |     |    |     |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| I3 |    |    | IF | ID  | EX    | MEM   | WB  |    |     |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| I4 |    |    | F  | IF  | Stall | Stall | ID  | EX | MEM | WB  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| I5 |    |    |    | IF  | ID    | EX    | MEM | WB |     |     |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| I6 |    |    |    | IF  | St    | Sta   | ID  | EX | MEM | WB  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| I7 |    |    |    |     | al    | ll    | IF  | ID | EX  | MEM | WB |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| I8 |    |    |    |     |       | IF    | ID  | EX | MEM | WB  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n| I9 |    |    |    |     |       |       | IF  | ID | EX  | MEM | WB |    |    |    |    |    |    |    |    |    |    |    |    |    |    |",
                    "rows": [
                        [
                            "",
                            "1",
                            "2",
                            "3",
                            "4",
                            "5",
                            "6",
                            "7",
                            "8",
                            "9",
                            "10",
                            "11",
                            "12",
                            "13",
                            "14",
                            "15",
                            "16",
                            "17",
                            "18",
                            "19",
                            "20",
                            "21",
                            "22",
                            "23",
                            "24",
                            "25"
                        ],
                        [
                            "I1",
                            "IF",
                            "ID",
                            "E",
                            "MEM",
                            "WB",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "I2",
                            "",
                            "IF",
                            "ID",
                            "EX",
                            "MEM",
                            "WB",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "I3",
                            "",
                            "",
                            "IF",
                            "ID",
                            "EX",
                            "MEM",
                            "WB",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "I4",
                            "",
                            "",
                            "F",
                            "IF",
                            "Stall",
                            "Stall",
                            "ID",
                            "EX",
                            "MEM",
                            "WB",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "I5",
                            "",
                            "",
                            "",
                            "IF",
                            "ID",
                            "EX",
                            "MEM",
                            "WB",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "I6",
                            "",
                            "",
                            "",
                            "IF",
                            "St",
                            "Sta",
                            "ID",
                            "EX",
                            "MEM",
                            "WB",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "I7",
                            "",
                            "",
                            "",
                            "",
                            "al",
                            "ll",
                            "IF",
                            "ID",
                            "EX",
                            "MEM",
                            "WB",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "I8",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "IF",
                            "ID",
                            "EX",
                            "MEM",
                            "WB",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "I9",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "IF",
                            "ID",
                            "EX",
                            "MEM",
                            "WB",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    ],
                    "bBox": {
                        "x": 12.4,
                        "y": 65.5,
                        "w": 817.9,
                        "h": 481.2
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 842.0,
            "height": 595.0,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 6,
            "text": " I10                                                                                       IF    Stal     Sta   ID    EX    M   WB\nI3                                                                                               l       ll     IF    IF    I   EX       MEM   WB\n                                                                                                                            E\nI4                                                                                                                          I    Stal    Sta   ID     E   MEM     WB\n                                                                                                                            D\n                                                                                                                            F    l       ll           X\n                                                                                  6",
            "md": "\n| I10 |   | IF | Stal | Sta | ID   | EX  | M  | WB  |     |    |\n| --- | - | -- | ---- | --- | ---- | --- | -- | --- | --- | -- |\n| I3  |   | l  | ll   | IF  | IF   | I   | EX | MEM | WB  |    |\n|     |   |    | I    |     | Stal | Sta | ID | E   | MEM | WB |\n|     |   |    | D    |     |      | F   | l  | ll  | X   |    |\n\n",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "| I10 |   | IF | Stal | Sta | ID   | EX  | M  | WB  |     |    |\n| --- | - | -- | ---- | --- | ---- | --- | -- | --- | --- | -- |\n| I3  |   | l  | ll   | IF  | IF   | I   | EX | MEM | WB  |    |\n|     |   |    | I    |     | Stal | Sta | ID | E   | MEM | WB |\n|     |   |    | D    |     |      | F   | l  | ll  | X   |    |",
                    "rows": [
                        [
                            "I10",
                            "",
                            "IF",
                            "Stal",
                            "Sta",
                            "ID",
                            "EX",
                            "M",
                            "WB",
                            "",
                            ""
                        ],
                        [
                            "I3",
                            "",
                            "l",
                            "ll",
                            "IF",
                            "IF",
                            "I",
                            "EX",
                            "MEM",
                            "WB",
                            ""
                        ],
                        [
                            "",
                            "",
                            "",
                            "I",
                            "",
                            "Stal",
                            "Sta",
                            "ID",
                            "E",
                            "MEM",
                            "WB"
                        ],
                        [
                            "",
                            "",
                            "",
                            "D",
                            "",
                            "",
                            "F",
                            "l",
                            "ll",
                            "X",
                            ""
                        ]
                    ],
                    "bBox": {
                        "x": 12.4,
                        "y": 67.7,
                        "w": 817.9,
                        "h": 479.0
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 842.0,
            "height": 595.0,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 7,
            "text": "b)\n According to the timing diagram of part (a), compute the number of clock cycles and the average CPI to execute ALL the iterations\n    of the above loop.\n There are 100 iterations\nEach iteration requires 15 cycles =\n 8 cycles to start the 8 instructions in loop body + 7 stall cycles\n There are 2 additional cycles to start the first 2 instructions before the loop.\nTherefore, total cycles = 100 * 15 + 2 (can be ignored) = 1502 cycles  \u2248 1500 cycles\n Total instruction executed = 2 + 8 * 100 = 802 instructions (counting first two)\n Average CPI = 1502 / 802 = 1.87\n If we ignore first two instructions and the time to terminate last iteration then\n Average CPI = 1500/800 = 1.88 (almost same answer)\n                                                7",
            "md": "b)\n\nAccording to the timing diagram of part (a), compute the number of clock cycles and the average CPI to execute ALL the iterations of the above loop.\n\nThere are 100 iterations.\n\nEach iteration requires 15 cycles = 8 cycles to start the 8 instructions in loop body + 7 stall cycles.\n\nThere are 2 additional cycles to start the first 2 instructions before the loop.\n\nTherefore, total cycles = 100 * 15 + 2 (can be ignored) = 1502 cycles \u2248 1500 cycles.\n\nTotal instruction executed = 2 + 8 * 100 = 802 instructions (counting first two).\n\nAverage CPI = 1502 / 802 = 1.87.\n\nIf we ignore first two instructions and the time to terminate last iteration then Average CPI = 1500/800 = 1.88 (almost same answer).\n\n7",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "text",
                    "lvl": null,
                    "value": "b)\n\nAccording to the timing diagram of part (a), compute the number of clock cycles and the average CPI to execute ALL the iterations of the above loop.\n\nThere are 100 iterations.\n\nEach iteration requires 15 cycles = 8 cycles to start the 8 instructions in loop body + 7 stall cycles.\n\nThere are 2 additional cycles to start the first 2 instructions before the loop.\n\nTherefore, total cycles = 100 * 15 + 2 (can be ignored) = 1502 cycles \u2248 1500 cycles.\n\nTotal instruction executed = 2 + 8 * 100 = 802 instructions (counting first two).\n\nAverage CPI = 1502 / 802 = 1.87.\n\nIf we ignore first two instructions and the time to terminate last iteration then Average CPI = 1500/800 = 1.88 (almost same answer).\n\n7",
                    "md": "b)\n\nAccording to the timing diagram of part (a), compute the number of clock cycles and the average CPI to execute ALL the iterations of the above loop.\n\nThere are 100 iterations.\n\nEach iteration requires 15 cycles = 8 cycles to start the 8 instructions in loop body + 7 stall cycles.\n\nThere are 2 additional cycles to start the first 2 instructions before the loop.\n\nTherefore, total cycles = 100 * 15 + 2 (can be ignored) = 1502 cycles \u2248 1500 cycles.\n\nTotal instruction executed = 2 + 8 * 100 = 802 instructions (counting first two).\n\nAverage CPI = 1502 / 802 = 1.87.\n\nIf we ignore first two instructions and the time to terminate last iteration then Average CPI = 1500/800 = 1.88 (almost same answer).\n\n7",
                    "rows": null,
                    "bBox": {
                        "x": 74.6,
                        "y": 65.6,
                        "w": 691.42,
                        "h": 481.1
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 842.0,
            "height": 595.0,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 8,
            "text": "      c)\n      Redo part (a) to show the timing of one loop iteration with full forwarding hardware. If forwarding happens, please show how the\n          data is forwarded with an arrow.\n        1    2      3    4     5      6      7  8        9    10    1   12     13   14    15    16    17   18     19   20\n I1     IF   ID     EX  MEM     WB                                  1\n I2          IF     ID   EX    MEM     WB\n I3                 IF   ID     EX    MEM    W\n I4                      IF    Stal    ID    E  MEM      WB\n                                             B\n I5                            l       IF    I   EX      ME   WB\n                                             X\n I6                                          I  Stall    ID   EX    M   WB\n                                             D           M\n I7                                          F           IF   ID    E   MEM    WB\n                                                                    E\n I8                                                           IF    I   EX     ME   WB\n                                                                    X\n I9                                                                 I   ID     EX  MEM    WB\n                                                                    D          M\nI10                                                                 F   IF     ID   EX    ME    WB\n I3                                                                            IF   IF    ID    EX   MEM   WB\n                                                                                          M\n I4                                                                                       IF   Stal   ID   EX     MEM  WB\n                                                                                               l\n      d)\n      Reorder the instructions of the above loop to fill the load-delay and the branch delay slots, without changing the computation. Write\n         the code of the modified loop.\n                ADDI $3, $0, 100        # $3 = 100\n                                                             8",
            "md": "\n# c)\n\nRedo part (a) to show the timing of one loop iteration with full forwarding hardware. If forwarding happens, please show how the data is forwarded with an arrow.\n\n|     | 1  | 2  | 3  | 4    | 5   | 6     | 7   | 8  | 9  | 10  | 11   | 12 | 13  | 14  | 15 | 16 | 17 | 18 | 19 | 20 |   |   |   |   |   |\n| --- | -- | -- | -- | ---- | --- | ----- | --- | -- | -- | --- | ---- | -- | --- | --- | -- | -- | -- | -- | -- | -- | - | - | - | - | - |\n| I1  | IF | ID | EX | MEM  | WB  |       |     |    |    |     |      |    |     |     |    |    |    |    |    | 1  |   |   |   |   |   |\n| I2  |    | IF | ID | EX   | MEM | WB    |     |    |    |     |      |    |     |     |    |    |    |    |    |    |   |   |   |   |   |\n| I3  |    |    | IF | ID   | EX  | MEM   | W   |    |    |     |      |    |     |     |    |    |    |    |    |    |   |   |   |   |   |\n| I4  |    |    | IF | Stal | ID  | E     | MEM | WB |    |     |      |    |     |     |    |    |    |    |    |    |   |   |   |   |   |\n| I5  |    |    |    | l    | IF  | I     | EX  | ME | WB |     |      |    |     |     |    |    |    |    |    |    |   |   |   |   |   |\n| I6  |    |    |    | I    |     | Stall | ID  | EX | M  | WB  |      |    |     |     |    |    |    |    |    |    |   |   |   |   |   |\n| I7  |    |    |    |      |     | F     |     | IF | ID | E   | MEM  | WB |     |     |    |    |    |    |    |    |   |   |   |   |   |\n| I8  |    |    |    |      |     |       | IF  | I  | EX | ME  | WB   |    |     |     |    |    |    |    |    |    |   |   |   |   |   |\n| I9  |    |    |    |      | I   |       |     | ID | EX | MEM | WB   |    |     |     |    |    |    |    |    |    |   |   |   |   |   |\n| I10 |    |    |    |      |     |       |     | F  | IF | ID  | EX   | ME | WB  |     |    |    |    |    |    |    |   |   |   |   |   |\n| I3  |    |    |    |      |     |       |     |    | IF | IF  | ID   | EX | MEM | WB  |    |    |    |    |    |    |   |   |   |   |   |\n| I4  |    |    |    |      |     |       |     |    |    | IF  | Stal | ID | EX  | MEM | WB |    |    |    |    |    |   |   |   |   |   |\n\n# d)\n\nReorder the instructions of the above loop to fill the load-delay and the branch delay slots, without changing the computation. Write the code of the modified loop.\n\nADDI $3, $0, 100        # $3 = 100\n\n",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "c)",
                    "md": "# c)",
                    "rows": null,
                    "bBox": {
                        "x": 74.6,
                        "y": 96.8,
                        "w": 11.0,
                        "h": 12.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Redo part (a) to show the timing of one loop iteration with full forwarding hardware. If forwarding happens, please show how the data is forwarded with an arrow.",
                    "md": "Redo part (a) to show the timing of one loop iteration with full forwarding hardware. If forwarding happens, please show how the data is forwarded with an arrow.",
                    "rows": null,
                    "bBox": {
                        "x": 76.8,
                        "y": 122.5,
                        "w": 685.04,
                        "h": 277.1
                    }
                },
                {
                    "type": "table",
                    "lvl": null,
                    "value": null,
                    "md": "|     | 1  | 2  | 3  | 4    | 5   | 6     | 7   | 8  | 9  | 10  | 11   | 12 | 13  | 14  | 15 | 16 | 17 | 18 | 19 | 20 |   |   |   |   |   |\n| --- | -- | -- | -- | ---- | --- | ----- | --- | -- | -- | --- | ---- | -- | --- | --- | -- | -- | -- | -- | -- | -- | - | - | - | - | - |\n| I1  | IF | ID | EX | MEM  | WB  |       |     |    |    |     |      |    |     |     |    |    |    |    |    | 1  |   |   |   |   |   |\n| I2  |    | IF | ID | EX   | MEM | WB    |     |    |    |     |      |    |     |     |    |    |    |    |    |    |   |   |   |   |   |\n| I3  |    |    | IF | ID   | EX  | MEM   | W   |    |    |     |      |    |     |     |    |    |    |    |    |    |   |   |   |   |   |\n| I4  |    |    | IF | Stal | ID  | E     | MEM | WB |    |     |      |    |     |     |    |    |    |    |    |    |   |   |   |   |   |\n| I5  |    |    |    | l    | IF  | I     | EX  | ME | WB |     |      |    |     |     |    |    |    |    |    |    |   |   |   |   |   |\n| I6  |    |    |    | I    |     | Stall | ID  | EX | M  | WB  |      |    |     |     |    |    |    |    |    |    |   |   |   |   |   |\n| I7  |    |    |    |      |     | F     |     | IF | ID | E   | MEM  | WB |     |     |    |    |    |    |    |    |   |   |   |   |   |\n| I8  |    |    |    |      |     |       | IF  | I  | EX | ME  | WB   |    |     |     |    |    |    |    |    |    |   |   |   |   |   |\n| I9  |    |    |    |      | I   |       |     | ID | EX | MEM | WB   |    |     |     |    |    |    |    |    |    |   |   |   |   |   |\n| I10 |    |    |    |      |     |       |     | F  | IF | ID  | EX   | ME | WB  |     |    |    |    |    |    |    |   |   |   |   |   |\n| I3  |    |    |    |      |     |       |     |    | IF | IF  | ID   | EX | MEM | WB  |    |    |    |    |    |    |   |   |   |   |   |\n| I4  |    |    |    |      |     |       |     |    |    | IF  | Stal | ID | EX  | MEM | WB |    |    |    |    |    |   |   |   |   |   |",
                    "rows": [
                        [
                            "",
                            "1",
                            "2",
                            "3",
                            "4",
                            "5",
                            "6",
                            "7",
                            "8",
                            "9",
                            "10",
                            "11",
                            "12",
                            "13",
                            "14",
                            "15",
                            "16",
                            "17",
                            "18",
                            "19",
                            "20",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "I1",
                            "IF",
                            "ID",
                            "EX",
                            "MEM",
                            "WB",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "1",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "I2",
                            "",
                            "IF",
                            "ID",
                            "EX",
                            "MEM",
                            "WB",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "I3",
                            "",
                            "",
                            "IF",
                            "ID",
                            "EX",
                            "MEM",
                            "W",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "I4",
                            "",
                            "",
                            "IF",
                            "Stal",
                            "ID",
                            "E",
                            "MEM",
                            "WB",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "I5",
                            "",
                            "",
                            "",
                            "l",
                            "IF",
                            "I",
                            "EX",
                            "ME",
                            "WB",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "I6",
                            "",
                            "",
                            "",
                            "I",
                            "",
                            "Stall",
                            "ID",
                            "EX",
                            "M",
                            "WB",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "I7",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "F",
                            "",
                            "IF",
                            "ID",
                            "E",
                            "MEM",
                            "WB",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "I8",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "IF",
                            "I",
                            "EX",
                            "ME",
                            "WB",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "I9",
                            "",
                            "",
                            "",
                            "",
                            "I",
                            "",
                            "",
                            "ID",
                            "EX",
                            "MEM",
                            "WB",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "I10",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "F",
                            "IF",
                            "ID",
                            "EX",
                            "ME",
                            "WB",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "I3",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "IF",
                            "IF",
                            "ID",
                            "EX",
                            "MEM",
                            "WB",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        [
                            "I4",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "IF",
                            "Stal",
                            "ID",
                            "EX",
                            "MEM",
                            "WB",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    ],
                    "bBox": {
                        "x": 40.4,
                        "y": 96.8,
                        "w": 754.9,
                        "h": 449.9
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "d)",
                    "md": "# d)",
                    "rows": null,
                    "bBox": {
                        "x": 74.6,
                        "y": 270.7,
                        "w": 396.1,
                        "h": 152.3
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Reorder the instructions of the above loop to fill the load-delay and the branch delay slots, without changing the computation. Write the code of the modified loop.\n\nADDI $3, $0, 100        # $3 = 100",
                    "md": "Reorder the instructions of the above loop to fill the load-delay and the branch delay slots, without changing the computation. Write the code of the modified loop.\n\nADDI $3, $0, 100        # $3 = 100",
                    "rows": null,
                    "bBox": {
                        "x": 74.6,
                        "y": 168.5,
                        "w": 692.09,
                        "h": 332.4
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 842.0,
            "height": 595.0,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 9,
            "text": "         ADD $4, $0, $0       # $4 = 0\n    Loop:\n         LW $5, 0($1)         # $5 = MEM[$1]\n         LW $6, 0($2)         # Moved earlier to avoid load-delay\n         ADDI $3, $3, -1      # Moved earlier\n         ADD $4, $4, $5       # $4 = $4 + $5\n         ADDI $1, $1, 4       # $1 = $1 + 4\n         ADDI $2, $2, 4       # $2 = $2 + 4\n         BNE $3, $0, Loop     # if ($3 != 0) goto Loop\n         SUB $4, $4, $6       # Fills branch delay slot\ne)\n (5 pts) Compute the number of cycles and the average CPI to execute ALL the iteration of the modified loop. What is the speedup\n    factor?\n There are 100 iterations\n Each iteration requires 8 cycles =\n 8 cycles to start the 8 instructions in loop body + 0 stall cycles\n There are 2 additional cycles to start the first 2 instructions before the loop\n + 4 additional cycles to terminate the ADDI instruction in the last iteration.\nTherefore, total cycles =  100 * 8 + 6 (can be ignored) = 806 cycles \u2248 800 cycles\nTotal  instruction executed = 2 + 8 * 100 = 802 instructions (counting first two)\n Average CPI = 806 / 802 = 1.00\n If we ignore first two instructions and the time to terminate last iteration then\n                                                9",
            "md": "\n# Loop Execution Analysis\n\nADD $4, $0, $0       # $4 = 0\nLoop:\nLW $5, 0($1)         # $5 = MEM[$1]\nLW $6, 0($2)         # Moved earlier to avoid load-delay\nADDI $3, $3, -1      # Moved earlier\nADD $4, $4, $5       # $4 = $4 + $5\nADDI $1, $1, 4       # $1 = $1 + 4\nADDI $2, $2, 4       # $2 = $2 + 4\nBNE $3, $0, Loop     # if ($3 != 0) goto Loop\nSUB $4, $4, $6       # Fills branch delay slot\n\n# Performance Metrics\n\n(5 pts) Compute the number of cycles and the average CPI to execute ALL the iteration of the modified loop. What is the speedup factor?\n\nThere are 100 iterations\n\nEach iteration requires 8 cycles = 8 cycles to start the 8 instructions in loop body + 0 stall cycles\n\nThere are 2 additional cycles to start the first 2 instructions before the loop + 4 additional cycles to terminate the ADDI instruction in the last iteration.\n\nTherefore, total cycles = 100 * 8 + 6 (can be ignored) = 806 cycles \u2248 800 cycles\n\nTotal instruction executed = 2 + 8 * 100 = 802 instructions (counting first two)\n\nAverage CPI = 806 / 802 = 1.00\n\nIf we ignore first two instructions and the time to terminate last iteration then\n\n9\n\n",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Loop Execution Analysis",
                    "md": "# Loop Execution Analysis",
                    "rows": null,
                    "bBox": {
                        "x": 0.0,
                        "y": 0.0,
                        "w": 842.0,
                        "h": 595.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "ADD $4, $0, $0       # $4 = 0\nLoop:\nLW $5, 0($1)         # $5 = MEM[$1]\nLW $6, 0($2)         # Moved earlier to avoid load-delay\nADDI $3, $3, -1      # Moved earlier\nADD $4, $4, $5       # $4 = $4 + $5\nADDI $1, $1, 4       # $1 = $1 + 4\nADDI $2, $2, 4       # $2 = $2 + 4\nBNE $3, $0, Loop     # if ($3 != 0) goto Loop\nSUB $4, $4, $6       # Fills branch delay slot",
                    "md": "ADD $4, $0, $0       # $4 = 0\nLoop:\nLW $5, 0($1)         # $5 = MEM[$1]\nLW $6, 0($2)         # Moved earlier to avoid load-delay\nADDI $3, $3, -1      # Moved earlier\nADD $4, $4, $5       # $4 = $4 + $5\nADDI $1, $1, 4       # $1 = $1 + 4\nADDI $2, $2, 4       # $2 = $2 + 4\nBNE $3, $0, Loop     # if ($3 != 0) goto Loop\nSUB $4, $4, $6       # Fills branch delay slot",
                    "rows": null,
                    "bBox": {
                        "x": 77.0,
                        "y": 64.5,
                        "w": 459.6,
                        "h": 449.8
                    }
                },
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "Performance Metrics",
                    "md": "# Performance Metrics",
                    "rows": null,
                    "bBox": {
                        "x": 0.0,
                        "y": 0.0,
                        "w": 842.0,
                        "h": 595.0
                    }
                },
                {
                    "type": "text",
                    "lvl": null,
                    "value": "(5 pts) Compute the number of cycles and the average CPI to execute ALL the iteration of the modified loop. What is the speedup factor?\n\nThere are 100 iterations\n\nEach iteration requires 8 cycles = 8 cycles to start the 8 instructions in loop body + 0 stall cycles\n\nThere are 2 additional cycles to start the first 2 instructions before the loop + 4 additional cycles to terminate the ADDI instruction in the last iteration.\n\nTherefore, total cycles = 100 * 8 + 6 (can be ignored) = 806 cycles \u2248 800 cycles\n\nTotal instruction executed = 2 + 8 * 100 = 802 instructions (counting first two)\n\nAverage CPI = 806 / 802 = 1.00\n\nIf we ignore first two instructions and the time to terminate last iteration then\n\n9",
                    "md": "(5 pts) Compute the number of cycles and the average CPI to execute ALL the iteration of the modified loop. What is the speedup factor?\n\nThere are 100 iterations\n\nEach iteration requires 8 cycles = 8 cycles to start the 8 instructions in loop body + 0 stall cycles\n\nThere are 2 additional cycles to start the first 2 instructions before the loop + 4 additional cycles to terminate the ADDI instruction in the last iteration.\n\nTherefore, total cycles = 100 * 8 + 6 (can be ignored) = 806 cycles \u2248 800 cycles\n\nTotal instruction executed = 2 + 8 * 100 = 802 instructions (counting first two)\n\nAverage CPI = 806 / 802 = 1.00\n\nIf we ignore first two instructions and the time to terminate last iteration then\n\n9",
                    "rows": null,
                    "bBox": {
                        "x": 75.3,
                        "y": 255.1,
                        "w": 691.15,
                        "h": 291.6
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 842.0,
            "height": 595.0,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 10,
            "text": "Average CPI = 800/800 = 1.00 (almost same answer)\nSpeedup Factor = CPIpart-b/CPIpart-d = 1.88/1.00 = 1.88\n                                               10",
            "md": "Average CPI = 800/800 = 1.00 (almost same answer)\n\nSpeedup Factor = CPIpart-b/CPIpart-d = 1.88/1.00 = 1.88\n\n10",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "text",
                    "lvl": null,
                    "value": "Average CPI = 800/800 = 1.00 (almost same answer)\n\nSpeedup Factor = CPIpart-b/CPIpart-d = 1.88/1.00 = 1.88\n\n10",
                    "md": "Average CPI = 800/800 = 1.00 (almost same answer)\n\nSpeedup Factor = CPIpart-b/CPIpart-d = 1.88/1.00 = 1.88\n\n10",
                    "rows": null,
                    "bBox": {
                        "x": 76.1,
                        "y": 64.5,
                        "w": 396.2,
                        "h": 482.2
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 842.0,
            "height": 595.0,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        },
        {
            "page": 11,
            "text": "11",
            "md": "\n# 11\n\n",
            "images": [],
            "charts": [],
            "tables": [],
            "layout": [],
            "items": [
                {
                    "type": "heading",
                    "lvl": 1,
                    "value": "11",
                    "md": "# 11",
                    "rows": null,
                    "bBox": {
                        "x": 292.1,
                        "y": 784.3,
                        "w": 11.0,
                        "h": 9.0
                    }
                }
            ],
            "status": "OK",
            "links": [],
            "width": 595.0,
            "height": 842.0,
            "triggeredAutoMode": false,
            "parsingMode": "accurate",
            "structuredData": null,
            "noStructuredContent": false,
            "noTextContent": false
        }
    ],
    "job_metadata": {
        "job_pages": 11,
        "job_auto_mode_triggered_pages": 0,
        "job_is_cache_hit": false
    },
    "file_name": "data/CDA 4205 Computer Architecture Exam 2 Practice Solution-3.pdf",
    "job_id": "be187c24-82e6-4946-890b-69844772dd95",
    "is_done": false,
    "error": null
}